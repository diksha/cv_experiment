// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: protos/platform/devcert/v1/devcert.proto

package devcertpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DevCertServiceClient is the client API for DevCertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevCertServiceClient interface {
	GetDevCert(ctx context.Context, in *GetDevCertRequest, opts ...grpc.CallOption) (*GetDevCertResponse, error)
}

type devCertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDevCertServiceClient(cc grpc.ClientConnInterface) DevCertServiceClient {
	return &devCertServiceClient{cc}
}

func (c *devCertServiceClient) GetDevCert(ctx context.Context, in *GetDevCertRequest, opts ...grpc.CallOption) (*GetDevCertResponse, error) {
	out := new(GetDevCertResponse)
	err := c.cc.Invoke(ctx, "/protos.platform.devcert.v1.DevCertService/GetDevCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevCertServiceServer is the server API for DevCertService service.
// All implementations must embed UnimplementedDevCertServiceServer
// for forward compatibility
type DevCertServiceServer interface {
	GetDevCert(context.Context, *GetDevCertRequest) (*GetDevCertResponse, error)
	mustEmbedUnimplementedDevCertServiceServer()
}

// UnimplementedDevCertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDevCertServiceServer struct {
}

func (UnimplementedDevCertServiceServer) GetDevCert(context.Context, *GetDevCertRequest) (*GetDevCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevCert not implemented")
}
func (UnimplementedDevCertServiceServer) mustEmbedUnimplementedDevCertServiceServer() {}

// UnsafeDevCertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevCertServiceServer will
// result in compilation errors.
type UnsafeDevCertServiceServer interface {
	mustEmbedUnimplementedDevCertServiceServer()
}

func RegisterDevCertServiceServer(s grpc.ServiceRegistrar, srv DevCertServiceServer) {
	s.RegisterService(&DevCertService_ServiceDesc, srv)
}

func _DevCertService_GetDevCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevCertServiceServer).GetDevCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.platform.devcert.v1.DevCertService/GetDevCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevCertServiceServer).GetDevCert(ctx, req.(*GetDevCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DevCertService_ServiceDesc is the grpc.ServiceDesc for DevCertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DevCertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.platform.devcert.v1.DevCertService",
	HandlerType: (*DevCertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevCert",
			Handler:    _DevCertService_GetDevCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/devcert/v1/devcert.proto",
}
