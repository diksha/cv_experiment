// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: protos/perception/types/v1/types.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Uuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uuid) Reset() {
	*x = Uuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uuid) ProtoMessage() {}

func (x *Uuid) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uuid.ProtoReflect.Descriptor instead.
func (*Uuid) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Uuid) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochTimestampMs    uint64 `protobuf:"varint,1,opt,name=epoch_timestamp_ms,json=epochTimestampMs,proto3" json:"epoch_timestamp_ms,omitempty"`
	RelativeTimestampMs uint64 `protobuf:"varint,2,opt,name=relative_timestamp_ms,json=relativeTimestampMs,proto3" json:"relative_timestamp_ms,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *Timestamp) GetEpochTimestampMs() uint64 {
	if x != nil {
		return x.EpochTimestampMs
	}
	return 0
}

func (x *Timestamp) GetRelativeTimestampMs() uint64 {
	if x != nil {
		return x.RelativeTimestampMs
	}
	return 0
}

type Position3DMeters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XPositionMeters float32 `protobuf:"fixed32,1,opt,name=x_position_meters,json=xPositionMeters,proto3" json:"x_position_meters,omitempty"`
	YPositionMeters float32 `protobuf:"fixed32,2,opt,name=y_position_meters,json=yPositionMeters,proto3" json:"y_position_meters,omitempty"`
	ZPositionMeters float32 `protobuf:"fixed32,3,opt,name=z_position_meters,json=zPositionMeters,proto3" json:"z_position_meters,omitempty"`
}

func (x *Position3DMeters) Reset() {
	*x = Position3DMeters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position3DMeters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position3DMeters) ProtoMessage() {}

func (x *Position3DMeters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position3DMeters.ProtoReflect.Descriptor instead.
func (*Position3DMeters) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *Position3DMeters) GetXPositionMeters() float32 {
	if x != nil {
		return x.XPositionMeters
	}
	return 0
}

func (x *Position3DMeters) GetYPositionMeters() float32 {
	if x != nil {
		return x.YPositionMeters
	}
	return 0
}

func (x *Position3DMeters) GetZPositionMeters() float32 {
	if x != nil {
		return x.ZPositionMeters
	}
	return 0
}

type Velocity2DMetersPerSecond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XVelocityMetersPerSecond float32 `protobuf:"fixed32,1,opt,name=x_velocity_meters_per_second,json=xVelocityMetersPerSecond,proto3" json:"x_velocity_meters_per_second,omitempty"`
	YVelocityMetersPerSecond float32 `protobuf:"fixed32,2,opt,name=y_velocity_meters_per_second,json=yVelocityMetersPerSecond,proto3" json:"y_velocity_meters_per_second,omitempty"`
}

func (x *Velocity2DMetersPerSecond) Reset() {
	*x = Velocity2DMetersPerSecond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Velocity2DMetersPerSecond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Velocity2DMetersPerSecond) ProtoMessage() {}

func (x *Velocity2DMetersPerSecond) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Velocity2DMetersPerSecond.ProtoReflect.Descriptor instead.
func (*Velocity2DMetersPerSecond) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *Velocity2DMetersPerSecond) GetXVelocityMetersPerSecond() float32 {
	if x != nil {
		return x.XVelocityMetersPerSecond
	}
	return 0
}

func (x *Velocity2DMetersPerSecond) GetYVelocityMetersPerSecond() float32 {
	if x != nil {
		return x.YVelocityMetersPerSecond
	}
	return 0
}

type VelocityPixelsPerSecond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XVelocityPixelsPerSecond float32 `protobuf:"fixed32,1,opt,name=x_velocity_pixels_per_second,json=xVelocityPixelsPerSecond,proto3" json:"x_velocity_pixels_per_second,omitempty"`
	YVelocityPixelsPerSecond float32 `protobuf:"fixed32,2,opt,name=y_velocity_pixels_per_second,json=yVelocityPixelsPerSecond,proto3" json:"y_velocity_pixels_per_second,omitempty"`
}

func (x *VelocityPixelsPerSecond) Reset() {
	*x = VelocityPixelsPerSecond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VelocityPixelsPerSecond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VelocityPixelsPerSecond) ProtoMessage() {}

func (x *VelocityPixelsPerSecond) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VelocityPixelsPerSecond.ProtoReflect.Descriptor instead.
func (*VelocityPixelsPerSecond) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *VelocityPixelsPerSecond) GetXVelocityPixelsPerSecond() float32 {
	if x != nil {
		return x.XVelocityPixelsPerSecond
	}
	return 0
}

func (x *VelocityPixelsPerSecond) GetYVelocityPixelsPerSecond() float32 {
	if x != nil {
		return x.YVelocityPixelsPerSecond
	}
	return 0
}

type Vertex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,opt,name=x,proto3,oneof" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,opt,name=y,proto3,oneof" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,opt,name=z,proto3,oneof" json:"z,omitempty"`
}

func (x *Vertex) Reset() {
	*x = Vertex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vertex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vertex) ProtoMessage() {}

func (x *Vertex) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vertex.ProtoReflect.Descriptor instead.
func (*Vertex) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *Vertex) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Vertex) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Vertex) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type KeyPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X                     float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                     float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                     *float32 `protobuf:"fixed32,3,opt,name=z,proto3,oneof" json:"z,omitempty"`
	ConfidenceProbability float32  `protobuf:"fixed32,4,opt,name=confidence_probability,json=confidenceProbability,proto3" json:"confidence_probability,omitempty"`
}

func (x *KeyPoint) Reset() {
	*x = KeyPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPoint) ProtoMessage() {}

func (x *KeyPoint) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPoint.ProtoReflect.Descriptor instead.
func (*KeyPoint) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *KeyPoint) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *KeyPoint) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *KeyPoint) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *KeyPoint) GetConfidenceProbability() float32 {
	if x != nil {
		return x.ConfidenceProbability
	}
	return 0
}

type Pose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoseKeypoint          *KeyPoint `protobuf:"bytes,1,opt,name=nose_keypoint,json=noseKeypoint,proto3,oneof" json:"nose_keypoint,omitempty"`
	NeckKeypoint          *KeyPoint `protobuf:"bytes,2,opt,name=neck_keypoint,json=neckKeypoint,proto3,oneof" json:"neck_keypoint,omitempty"`
	RightShoulderKeypoint *KeyPoint `protobuf:"bytes,3,opt,name=right_shoulder_keypoint,json=rightShoulderKeypoint,proto3,oneof" json:"right_shoulder_keypoint,omitempty"`
	RightElbowKeypoint    *KeyPoint `protobuf:"bytes,4,opt,name=right_elbow_keypoint,json=rightElbowKeypoint,proto3,oneof" json:"right_elbow_keypoint,omitempty"`
	RightWristKeypoint    *KeyPoint `protobuf:"bytes,5,opt,name=right_wrist_keypoint,json=rightWristKeypoint,proto3,oneof" json:"right_wrist_keypoint,omitempty"`
	LeftShoulderKeypoint  *KeyPoint `protobuf:"bytes,6,opt,name=left_shoulder_keypoint,json=leftShoulderKeypoint,proto3,oneof" json:"left_shoulder_keypoint,omitempty"`
	LeftElbowKeypoint     *KeyPoint `protobuf:"bytes,7,opt,name=left_elbow_keypoint,json=leftElbowKeypoint,proto3,oneof" json:"left_elbow_keypoint,omitempty"`
	LeftWristKeypoint     *KeyPoint `protobuf:"bytes,8,opt,name=left_wrist_keypoint,json=leftWristKeypoint,proto3,oneof" json:"left_wrist_keypoint,omitempty"`
	MidHipKeypoint        *KeyPoint `protobuf:"bytes,9,opt,name=mid_hip_keypoint,json=midHipKeypoint,proto3,oneof" json:"mid_hip_keypoint,omitempty"`
	RightHipKeypoint      *KeyPoint `protobuf:"bytes,10,opt,name=right_hip_keypoint,json=rightHipKeypoint,proto3,oneof" json:"right_hip_keypoint,omitempty"`
	RightKneeKeypoint     *KeyPoint `protobuf:"bytes,11,opt,name=right_knee_keypoint,json=rightKneeKeypoint,proto3,oneof" json:"right_knee_keypoint,omitempty"`
	RightAnkleKeypoint    *KeyPoint `protobuf:"bytes,12,opt,name=right_ankle_keypoint,json=rightAnkleKeypoint,proto3,oneof" json:"right_ankle_keypoint,omitempty"`
	LeftHipKeypoint       *KeyPoint `protobuf:"bytes,13,opt,name=left_hip_keypoint,json=leftHipKeypoint,proto3,oneof" json:"left_hip_keypoint,omitempty"`
	LeftKneeKeypoint      *KeyPoint `protobuf:"bytes,14,opt,name=left_knee_keypoint,json=leftKneeKeypoint,proto3,oneof" json:"left_knee_keypoint,omitempty"`
	LeftAnkleKeypoint     *KeyPoint `protobuf:"bytes,15,opt,name=left_ankle_keypoint,json=leftAnkleKeypoint,proto3,oneof" json:"left_ankle_keypoint,omitempty"`
	RightEyeKeypoint      *KeyPoint `protobuf:"bytes,16,opt,name=right_eye_keypoint,json=rightEyeKeypoint,proto3,oneof" json:"right_eye_keypoint,omitempty"`
	LeftEyeKeypoint       *KeyPoint `protobuf:"bytes,17,opt,name=left_eye_keypoint,json=leftEyeKeypoint,proto3,oneof" json:"left_eye_keypoint,omitempty"`
	RightEarKeypoint      *KeyPoint `protobuf:"bytes,18,opt,name=right_ear_keypoint,json=rightEarKeypoint,proto3,oneof" json:"right_ear_keypoint,omitempty"`
	LeftEarKeypoint       *KeyPoint `protobuf:"bytes,19,opt,name=left_ear_keypoint,json=leftEarKeypoint,proto3,oneof" json:"left_ear_keypoint,omitempty"`
	LeftBigToeKeypoint    *KeyPoint `protobuf:"bytes,20,opt,name=left_big_toe_keypoint,json=leftBigToeKeypoint,proto3,oneof" json:"left_big_toe_keypoint,omitempty"`
	LeftSmallToeKeypoint  *KeyPoint `protobuf:"bytes,21,opt,name=left_small_toe_keypoint,json=leftSmallToeKeypoint,proto3,oneof" json:"left_small_toe_keypoint,omitempty"`
	LeftHeelKeypoint      *KeyPoint `protobuf:"bytes,22,opt,name=left_heel_keypoint,json=leftHeelKeypoint,proto3,oneof" json:"left_heel_keypoint,omitempty"`
	RightBigToeKeypoint   *KeyPoint `protobuf:"bytes,23,opt,name=right_big_toe_keypoint,json=rightBigToeKeypoint,proto3,oneof" json:"right_big_toe_keypoint,omitempty"`
	RightSmallToeKeypoint *KeyPoint `protobuf:"bytes,24,opt,name=right_small_toe_keypoint,json=rightSmallToeKeypoint,proto3,oneof" json:"right_small_toe_keypoint,omitempty"`
	RightHeelKeypoint     *KeyPoint `protobuf:"bytes,25,opt,name=right_heel_keypoint,json=rightHeelKeypoint,proto3,oneof" json:"right_heel_keypoint,omitempty"`
}

func (x *Pose) Reset() {
	*x = Pose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pose) ProtoMessage() {}

func (x *Pose) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pose.ProtoReflect.Descriptor instead.
func (*Pose) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *Pose) GetNoseKeypoint() *KeyPoint {
	if x != nil {
		return x.NoseKeypoint
	}
	return nil
}

func (x *Pose) GetNeckKeypoint() *KeyPoint {
	if x != nil {
		return x.NeckKeypoint
	}
	return nil
}

func (x *Pose) GetRightShoulderKeypoint() *KeyPoint {
	if x != nil {
		return x.RightShoulderKeypoint
	}
	return nil
}

func (x *Pose) GetRightElbowKeypoint() *KeyPoint {
	if x != nil {
		return x.RightElbowKeypoint
	}
	return nil
}

func (x *Pose) GetRightWristKeypoint() *KeyPoint {
	if x != nil {
		return x.RightWristKeypoint
	}
	return nil
}

func (x *Pose) GetLeftShoulderKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftShoulderKeypoint
	}
	return nil
}

func (x *Pose) GetLeftElbowKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftElbowKeypoint
	}
	return nil
}

func (x *Pose) GetLeftWristKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftWristKeypoint
	}
	return nil
}

func (x *Pose) GetMidHipKeypoint() *KeyPoint {
	if x != nil {
		return x.MidHipKeypoint
	}
	return nil
}

func (x *Pose) GetRightHipKeypoint() *KeyPoint {
	if x != nil {
		return x.RightHipKeypoint
	}
	return nil
}

func (x *Pose) GetRightKneeKeypoint() *KeyPoint {
	if x != nil {
		return x.RightKneeKeypoint
	}
	return nil
}

func (x *Pose) GetRightAnkleKeypoint() *KeyPoint {
	if x != nil {
		return x.RightAnkleKeypoint
	}
	return nil
}

func (x *Pose) GetLeftHipKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftHipKeypoint
	}
	return nil
}

func (x *Pose) GetLeftKneeKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftKneeKeypoint
	}
	return nil
}

func (x *Pose) GetLeftAnkleKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftAnkleKeypoint
	}
	return nil
}

func (x *Pose) GetRightEyeKeypoint() *KeyPoint {
	if x != nil {
		return x.RightEyeKeypoint
	}
	return nil
}

func (x *Pose) GetLeftEyeKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftEyeKeypoint
	}
	return nil
}

func (x *Pose) GetRightEarKeypoint() *KeyPoint {
	if x != nil {
		return x.RightEarKeypoint
	}
	return nil
}

func (x *Pose) GetLeftEarKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftEarKeypoint
	}
	return nil
}

func (x *Pose) GetLeftBigToeKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftBigToeKeypoint
	}
	return nil
}

func (x *Pose) GetLeftSmallToeKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftSmallToeKeypoint
	}
	return nil
}

func (x *Pose) GetLeftHeelKeypoint() *KeyPoint {
	if x != nil {
		return x.LeftHeelKeypoint
	}
	return nil
}

func (x *Pose) GetRightBigToeKeypoint() *KeyPoint {
	if x != nil {
		return x.RightBigToeKeypoint
	}
	return nil
}

func (x *Pose) GetRightSmallToeKeypoint() *KeyPoint {
	if x != nil {
		return x.RightSmallToeKeypoint
	}
	return nil
}

func (x *Pose) GetRightHeelKeypoint() *KeyPoint {
	if x != nil {
		return x.RightHeelKeypoint
	}
	return nil
}

type Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertices []*Vertex `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *Polygon) GetVertices() []*Vertex {
	if x != nil {
		return x.Vertices
	}
	return nil
}

type RectangleXYWH struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Width  float32 `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	Height float32 `protobuf:"fixed32,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *RectangleXYWH) Reset() {
	*x = RectangleXYWH{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_types_v1_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RectangleXYWH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RectangleXYWH) ProtoMessage() {}

func (x *RectangleXYWH) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_types_v1_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RectangleXYWH.ProtoReflect.Descriptor instead.
func (*RectangleXYWH) Descriptor() ([]byte, []int) {
	return file_protos_perception_types_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *RectangleXYWH) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *RectangleXYWH) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *RectangleXYWH) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *RectangleXYWH) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_protos_perception_types_v1_types_proto protoreflect.FileDescriptor

var file_protos_perception_types_v1_types_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6d, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2c, 0x0a, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x73, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x44,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x78, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x79,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x7a, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x7a, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x19, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x32, 0x44, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x78, 0x5f, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x78, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x79, 0x5f, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x79, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x78, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x78, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x79, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x79, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0x53, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x12, 0x11,
	0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x01, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x11, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x01,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x02, 0x52, 0x01, 0x7a, 0x88, 0x01, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x78, 0x42, 0x04, 0x0a,
	0x02, 0x5f, 0x79, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x7a, 0x22, 0x76, 0x0a, 0x08, 0x4b, 0x65, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01,
	0x79, 0x12, 0x11, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x01,
	0x7a, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x04, 0x0a, 0x02, 0x5f,
	0x7a, 0x22, 0xb9, 0x16, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x6e, 0x6f,
	0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x73, 0x65, 0x4b,
	0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0d, 0x6e, 0x65,
	0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x17, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x02, 0x52, 0x15, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a,
	0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x03, 0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6c, 0x62, 0x6f, 0x77, 0x4b,
	0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x14, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x04,
	0x52, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x57, 0x72, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x16, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x05, 0x52,
	0x14, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x06, 0x52, 0x11, 0x6c,
	0x65, 0x66, 0x74, 0x45, 0x6c, 0x62, 0x6f, 0x77, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x73,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x07, 0x52, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x57, 0x72,
	0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x53,
	0x0a, 0x10, 0x6d, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x08,
	0x52, 0x0e, 0x6d, 0x69, 0x64, 0x48, 0x69, 0x70, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x69, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x09, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x69,
	0x70, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6b, 0x6e, 0x65, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48,
	0x0a, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x6e, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x61, 0x6e, 0x6b, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x0b, 0x52, 0x12, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x6b, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x68, 0x69, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x0c, 0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x48, 0x69, 0x70,
	0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x12, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x6b, 0x6e, 0x65, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x0d, 0x52,
	0x10, 0x6c, 0x65, 0x66, 0x74, 0x4b, 0x6e, 0x65, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x61, 0x6e, 0x6b,
	0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x0e, 0x52, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x41,
	0x6e, 0x6b, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x0f, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x79, 0x65, 0x4b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x65, 0x79, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x10, 0x52, 0x0f, 0x6c, 0x65, 0x66,
	0x74, 0x45, 0x79, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x12, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x61, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x11, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x61, 0x72, 0x4b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x65, 0x61, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x12, 0x52, 0x0f, 0x6c, 0x65, 0x66,
	0x74, 0x45, 0x61, 0x72, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x5c, 0x0a, 0x15, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x74, 0x6f, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x13, 0x52, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x42, 0x69, 0x67, 0x54,
	0x6f, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a,
	0x17, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x14, 0x52, 0x14, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x54, 0x6f, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x48, 0x15, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x74, 0x6f, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x16,
	0x52, 0x13, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x69, 0x67, 0x54, 0x6f, 0x65, 0x4b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x18, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x17, 0x52, 0x15, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x6f,
	0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x13,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48,
	0x18, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x65, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x6f, 0x73, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65,
	0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x65, 0x6c, 0x62, 0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x73, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x6c,
	0x62, 0x6f, 0x77, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6b, 0x6e, 0x65, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x61, 0x6e, 0x6b, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x6b, 0x6e, 0x65, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x61, 0x6e, 0x6b, 0x6c, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x65, 0x79, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x65, 0x79, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x61,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x65, 0x61, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x74, 0x6f,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x74, 0x6f, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x68, 0x65, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x49, 0x0a,
	0x07, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x08,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x74,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x58, 0x59, 0x57, 0x48, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x76, 0x6f, 0x78, 0x65, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x76, 0x6f, 0x78, 0x65, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_perception_types_v1_types_proto_rawDescOnce sync.Once
	file_protos_perception_types_v1_types_proto_rawDescData = file_protos_perception_types_v1_types_proto_rawDesc
)

func file_protos_perception_types_v1_types_proto_rawDescGZIP() []byte {
	file_protos_perception_types_v1_types_proto_rawDescOnce.Do(func() {
		file_protos_perception_types_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_perception_types_v1_types_proto_rawDescData)
	})
	return file_protos_perception_types_v1_types_proto_rawDescData
}

var file_protos_perception_types_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protos_perception_types_v1_types_proto_goTypes = []interface{}{
	(*Uuid)(nil),                      // 0: protos.perception.types.v1.Uuid
	(*Timestamp)(nil),                 // 1: protos.perception.types.v1.Timestamp
	(*Position3DMeters)(nil),          // 2: protos.perception.types.v1.Position3DMeters
	(*Velocity2DMetersPerSecond)(nil), // 3: protos.perception.types.v1.Velocity2DMetersPerSecond
	(*VelocityPixelsPerSecond)(nil),   // 4: protos.perception.types.v1.VelocityPixelsPerSecond
	(*Vertex)(nil),                    // 5: protos.perception.types.v1.Vertex
	(*KeyPoint)(nil),                  // 6: protos.perception.types.v1.KeyPoint
	(*Pose)(nil),                      // 7: protos.perception.types.v1.Pose
	(*Polygon)(nil),                   // 8: protos.perception.types.v1.Polygon
	(*RectangleXYWH)(nil),             // 9: protos.perception.types.v1.RectangleXYWH
}
var file_protos_perception_types_v1_types_proto_depIdxs = []int32{
	6,  // 0: protos.perception.types.v1.Pose.nose_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 1: protos.perception.types.v1.Pose.neck_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 2: protos.perception.types.v1.Pose.right_shoulder_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 3: protos.perception.types.v1.Pose.right_elbow_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 4: protos.perception.types.v1.Pose.right_wrist_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 5: protos.perception.types.v1.Pose.left_shoulder_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 6: protos.perception.types.v1.Pose.left_elbow_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 7: protos.perception.types.v1.Pose.left_wrist_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 8: protos.perception.types.v1.Pose.mid_hip_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 9: protos.perception.types.v1.Pose.right_hip_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 10: protos.perception.types.v1.Pose.right_knee_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 11: protos.perception.types.v1.Pose.right_ankle_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 12: protos.perception.types.v1.Pose.left_hip_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 13: protos.perception.types.v1.Pose.left_knee_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 14: protos.perception.types.v1.Pose.left_ankle_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 15: protos.perception.types.v1.Pose.right_eye_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 16: protos.perception.types.v1.Pose.left_eye_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 17: protos.perception.types.v1.Pose.right_ear_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 18: protos.perception.types.v1.Pose.left_ear_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 19: protos.perception.types.v1.Pose.left_big_toe_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 20: protos.perception.types.v1.Pose.left_small_toe_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 21: protos.perception.types.v1.Pose.left_heel_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 22: protos.perception.types.v1.Pose.right_big_toe_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 23: protos.perception.types.v1.Pose.right_small_toe_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	6,  // 24: protos.perception.types.v1.Pose.right_heel_keypoint:type_name -> protos.perception.types.v1.KeyPoint
	5,  // 25: protos.perception.types.v1.Polygon.vertices:type_name -> protos.perception.types.v1.Vertex
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_protos_perception_types_v1_types_proto_init() }
func file_protos_perception_types_v1_types_proto_init() {
	if File_protos_perception_types_v1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_perception_types_v1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position3DMeters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Velocity2DMetersPerSecond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VelocityPixelsPerSecond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vertex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_types_v1_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RectangleXYWH); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_perception_types_v1_types_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_protos_perception_types_v1_types_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_protos_perception_types_v1_types_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_perception_types_v1_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_perception_types_v1_types_proto_goTypes,
		DependencyIndexes: file_protos_perception_types_v1_types_proto_depIdxs,
		MessageInfos:      file_protos_perception_types_v1_types_proto_msgTypes,
	}.Build()
	File_protos_perception_types_v1_types_proto = out.File
	file_protos_perception_types_v1_types_proto_rawDesc = nil
	file_protos_perception_types_v1_types_proto_goTypes = nil
	file_protos_perception_types_v1_types_proto_depIdxs = nil
}
