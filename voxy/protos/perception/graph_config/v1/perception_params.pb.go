// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: protos/perception/graph_config/v1/perception_params.proto

package graphconfigpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GpuRuntimeBackend int32

const (
	GpuRuntimeBackend_GPU_RUNTIME_BACKEND_UNSPECIFIED   GpuRuntimeBackend = 0
	GpuRuntimeBackend_GPU_RUNTIME_BACKEND_LOCAL         GpuRuntimeBackend = 1
	GpuRuntimeBackend_GPU_RUNTIME_BACKEND_REMOTE_TRITON GpuRuntimeBackend = 2
)

// Enum value maps for GpuRuntimeBackend.
var (
	GpuRuntimeBackend_name = map[int32]string{
		0: "GPU_RUNTIME_BACKEND_UNSPECIFIED",
		1: "GPU_RUNTIME_BACKEND_LOCAL",
		2: "GPU_RUNTIME_BACKEND_REMOTE_TRITON",
	}
	GpuRuntimeBackend_value = map[string]int32{
		"GPU_RUNTIME_BACKEND_UNSPECIFIED":   0,
		"GPU_RUNTIME_BACKEND_LOCAL":         1,
		"GPU_RUNTIME_BACKEND_REMOTE_TRITON": 2,
	}
)

func (x GpuRuntimeBackend) Enum() *GpuRuntimeBackend {
	p := new(GpuRuntimeBackend)
	*p = x
	return p
}

func (x GpuRuntimeBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpuRuntimeBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_graph_config_v1_perception_params_proto_enumTypes[0].Descriptor()
}

func (GpuRuntimeBackend) Type() protoreflect.EnumType {
	return &file_protos_perception_graph_config_v1_perception_params_proto_enumTypes[0]
}

func (x GpuRuntimeBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpuRuntimeBackend.Descriptor instead.
func (GpuRuntimeBackend) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{0}
}

type GpuRuntimeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runtime *GpuRuntimeBackend `protobuf:"varint,1,opt,name=runtime,proto3,enum=protos.perception.graph_config.v1.GpuRuntimeBackend,oneof" json:"runtime,omitempty"`
}

func (x *GpuRuntimeConfig) Reset() {
	*x = GpuRuntimeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuRuntimeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuRuntimeConfig) ProtoMessage() {}

func (x *GpuRuntimeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuRuntimeConfig.ProtoReflect.Descriptor instead.
func (*GpuRuntimeConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{0}
}

func (x *GpuRuntimeConfig) GetRuntime() GpuRuntimeBackend {
	if x != nil && x.Runtime != nil {
		return *x.Runtime
	}
	return GpuRuntimeBackend_GPU_RUNTIME_BACKEND_UNSPECIFIED
}

type DetectorTrackerPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height      *int32           `protobuf:"varint,1,opt,name=height,proto3,oneof" json:"height,omitempty"`
	Width       *int32           `protobuf:"varint,2,opt,name=width,proto3,oneof" json:"width,omitempty"`
	ModelPath   *string          `protobuf:"bytes,3,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	Actor2Class map[string]int32 `protobuf:"bytes,4,rep,name=actor2class,proto3" json:"actor2class,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DetectorTrackerPerceptionConfig) Reset() {
	*x = DetectorTrackerPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectorTrackerPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectorTrackerPerceptionConfig) ProtoMessage() {}

func (x *DetectorTrackerPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectorTrackerPerceptionConfig.ProtoReflect.Descriptor instead.
func (*DetectorTrackerPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{1}
}

func (x *DetectorTrackerPerceptionConfig) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *DetectorTrackerPerceptionConfig) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *DetectorTrackerPerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *DetectorTrackerPerceptionConfig) GetActor2Class() map[string]int32 {
	if x != nil {
		return x.Actor2Class
	}
	return nil
}

type DoorClassifierPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ModelPath *string `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	ModelType *string `protobuf:"bytes,3,opt,name=model_type,json=modelType,proto3,oneof" json:"model_type,omitempty"`
}

func (x *DoorClassifierPerceptionConfig) Reset() {
	*x = DoorClassifierPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorClassifierPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorClassifierPerceptionConfig) ProtoMessage() {}

func (x *DoorClassifierPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorClassifierPerceptionConfig.ProtoReflect.Descriptor instead.
func (*DoorClassifierPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{2}
}

func (x *DoorClassifierPerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *DoorClassifierPerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *DoorClassifierPerceptionConfig) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

type HatClassifierPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                     *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ModelPath                   *string `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	IsClassificationByDetection *bool   `protobuf:"varint,3,opt,name=is_classification_by_detection,json=isClassificationByDetection,proto3,oneof" json:"is_classification_by_detection,omitempty"`
	MinActorPixelArea           *int32  `protobuf:"varint,4,opt,name=min_actor_pixel_area,json=minActorPixelArea,proto3,oneof" json:"min_actor_pixel_area,omitempty"`
}

func (x *HatClassifierPerceptionConfig) Reset() {
	*x = HatClassifierPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HatClassifierPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HatClassifierPerceptionConfig) ProtoMessage() {}

func (x *HatClassifierPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HatClassifierPerceptionConfig.ProtoReflect.Descriptor instead.
func (*HatClassifierPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{3}
}

func (x *HatClassifierPerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *HatClassifierPerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *HatClassifierPerceptionConfig) GetIsClassificationByDetection() bool {
	if x != nil && x.IsClassificationByDetection != nil {
		return *x.IsClassificationByDetection
	}
	return false
}

func (x *HatClassifierPerceptionConfig) GetMinActorPixelArea() int32 {
	if x != nil && x.MinActorPixelArea != nil {
		return *x.MinActorPixelArea
	}
	return 0
}

type LiftClassifierPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ModelPath *string `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	ModelType *string `protobuf:"bytes,3,opt,name=model_type,json=modelType,proto3,oneof" json:"model_type,omitempty"`
}

func (x *LiftClassifierPerceptionConfig) Reset() {
	*x = LiftClassifierPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiftClassifierPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiftClassifierPerceptionConfig) ProtoMessage() {}

func (x *LiftClassifierPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiftClassifierPerceptionConfig.ProtoReflect.Descriptor instead.
func (*LiftClassifierPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{4}
}

func (x *LiftClassifierPerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *LiftClassifierPerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *LiftClassifierPerceptionConfig) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

type PosePerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                   *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ModelPath                 *string `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	ActivityClassifierEnabled *bool   `protobuf:"varint,3,opt,name=activity_classifier_enabled,json=activityClassifierEnabled,proto3,oneof" json:"activity_classifier_enabled,omitempty"`
	ClassifierPath            *string `protobuf:"bytes,4,opt,name=classifier_path,json=classifierPath,proto3,oneof" json:"classifier_path,omitempty"`
}

func (x *PosePerceptionConfig) Reset() {
	*x = PosePerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosePerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosePerceptionConfig) ProtoMessage() {}

func (x *PosePerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosePerceptionConfig.ProtoReflect.Descriptor instead.
func (*PosePerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{5}
}

func (x *PosePerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PosePerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *PosePerceptionConfig) GetActivityClassifierEnabled() bool {
	if x != nil && x.ActivityClassifierEnabled != nil {
		return *x.ActivityClassifierEnabled
	}
	return false
}

func (x *PosePerceptionConfig) GetClassifierPath() string {
	if x != nil && x.ClassifierPath != nil {
		return *x.ClassifierPath
	}
	return ""
}

type ReachClassifierPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ModelPath *string `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	ModelType *string `protobuf:"bytes,3,opt,name=model_type,json=modelType,proto3,oneof" json:"model_type,omitempty"`
}

func (x *ReachClassifierPerceptionConfig) Reset() {
	*x = ReachClassifierPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReachClassifierPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReachClassifierPerceptionConfig) ProtoMessage() {}

func (x *ReachClassifierPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReachClassifierPerceptionConfig.ProtoReflect.Descriptor instead.
func (*ReachClassifierPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{6}
}

func (x *ReachClassifierPerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ReachClassifierPerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *ReachClassifierPerceptionConfig) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

type VestClassifierPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ModelPath         *string `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	ModelType         *string `protobuf:"bytes,3,opt,name=model_type,json=modelType,proto3,oneof" json:"model_type,omitempty"`
	MinActorPixelArea *int32  `protobuf:"varint,4,opt,name=min_actor_pixel_area,json=minActorPixelArea,proto3,oneof" json:"min_actor_pixel_area,omitempty"`
}

func (x *VestClassifierPerceptionConfig) Reset() {
	*x = VestClassifierPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VestClassifierPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VestClassifierPerceptionConfig) ProtoMessage() {}

func (x *VestClassifierPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VestClassifierPerceptionConfig.ProtoReflect.Descriptor instead.
func (*VestClassifierPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{7}
}

func (x *VestClassifierPerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *VestClassifierPerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *VestClassifierPerceptionConfig) GetModelType() string {
	if x != nil && x.ModelType != nil {
		return *x.ModelType
	}
	return ""
}

func (x *VestClassifierPerceptionConfig) GetMinActorPixelArea() int32 {
	if x != nil && x.MinActorPixelArea != nil {
		return *x.MinActorPixelArea
	}
	return 0
}

type PPESmoothenerPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeIntervalMs                   *int32   `protobuf:"varint,1,opt,name=time_interval_ms,json=timeIntervalMs,proto3,oneof" json:"time_interval_ms,omitempty"`
	SafetyVestTimeIntervalMs         *int32   `protobuf:"varint,2,opt,name=safety_vest_time_interval_ms,json=safetyVestTimeIntervalMs,proto3,oneof" json:"safety_vest_time_interval_ms,omitempty"`
	PosePointsMinConfidenceThreshold *float32 `protobuf:"fixed32,3,opt,name=pose_points_min_confidence_threshold,json=posePointsMinConfidenceThreshold,proto3,oneof" json:"pose_points_min_confidence_threshold,omitempty"`
}

func (x *PPESmoothenerPerceptionConfig) Reset() {
	*x = PPESmoothenerPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PPESmoothenerPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PPESmoothenerPerceptionConfig) ProtoMessage() {}

func (x *PPESmoothenerPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PPESmoothenerPerceptionConfig.ProtoReflect.Descriptor instead.
func (*PPESmoothenerPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{8}
}

func (x *PPESmoothenerPerceptionConfig) GetTimeIntervalMs() int32 {
	if x != nil && x.TimeIntervalMs != nil {
		return *x.TimeIntervalMs
	}
	return 0
}

func (x *PPESmoothenerPerceptionConfig) GetSafetyVestTimeIntervalMs() int32 {
	if x != nil && x.SafetyVestTimeIntervalMs != nil {
		return *x.SafetyVestTimeIntervalMs
	}
	return 0
}

func (x *PPESmoothenerPerceptionConfig) GetPosePointsMinConfidenceThreshold() float32 {
	if x != nil && x.PosePointsMinConfidenceThreshold != nil {
		return *x.PosePointsMinConfidenceThreshold
	}
	return 0
}

type AcausalLayerPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PPESmoothener *PPESmoothenerPerceptionConfig `protobuf:"bytes,1,opt,name=PPESmoothener,proto3,oneof" json:"PPESmoothener,omitempty"`
}

func (x *AcausalLayerPerceptionConfig) Reset() {
	*x = AcausalLayerPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcausalLayerPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcausalLayerPerceptionConfig) ProtoMessage() {}

func (x *AcausalLayerPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcausalLayerPerceptionConfig.ProtoReflect.Descriptor instead.
func (*AcausalLayerPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{9}
}

func (x *AcausalLayerPerceptionConfig) GetPPESmoothener() *PPESmoothenerPerceptionConfig {
	if x != nil {
		return x.PPESmoothener
	}
	return nil
}

type SpillPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                *bool            `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ModelPath              *string          `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	MinRunTimeDifferenceMs *int32           `protobuf:"varint,3,opt,name=min_run_time_difference_ms,json=minRunTimeDifferenceMs,proto3,oneof" json:"min_run_time_difference_ms,omitempty"`
	MinPixelSize           *int32           `protobuf:"varint,4,opt,name=min_pixel_size,json=minPixelSize,proto3,oneof" json:"min_pixel_size,omitempty"`
	MaxConsecutiveRuns     *int32           `protobuf:"varint,5,opt,name=max_consecutive_runs,json=maxConsecutiveRuns,proto3,oneof" json:"max_consecutive_runs,omitempty"`
	PostProcessEnabled     *bool            `protobuf:"varint,6,opt,name=post_process_enabled,json=postProcessEnabled,proto3,oneof" json:"post_process_enabled,omitempty"`
	FrameSegment2Class     map[string]int32 `protobuf:"bytes,7,rep,name=frame_segment2class,json=frameSegment2class,proto3" json:"frame_segment2class,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SpillPerceptionConfig) Reset() {
	*x = SpillPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpillPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpillPerceptionConfig) ProtoMessage() {}

func (x *SpillPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpillPerceptionConfig.ProtoReflect.Descriptor instead.
func (*SpillPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{10}
}

func (x *SpillPerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *SpillPerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *SpillPerceptionConfig) GetMinRunTimeDifferenceMs() int32 {
	if x != nil && x.MinRunTimeDifferenceMs != nil {
		return *x.MinRunTimeDifferenceMs
	}
	return 0
}

func (x *SpillPerceptionConfig) GetMinPixelSize() int32 {
	if x != nil && x.MinPixelSize != nil {
		return *x.MinPixelSize
	}
	return 0
}

func (x *SpillPerceptionConfig) GetMaxConsecutiveRuns() int32 {
	if x != nil && x.MaxConsecutiveRuns != nil {
		return *x.MaxConsecutiveRuns
	}
	return 0
}

func (x *SpillPerceptionConfig) GetPostProcessEnabled() bool {
	if x != nil && x.PostProcessEnabled != nil {
		return *x.PostProcessEnabled
	}
	return false
}

func (x *SpillPerceptionConfig) GetFrameSegment2Class() map[string]int32 {
	if x != nil {
		return x.FrameSegment2Class
	}
	return nil
}

type MotionZoneDetectionPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled            *bool  `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	GaussianKernelSize *int32 `protobuf:"varint,2,opt,name=gaussian_kernel_size,json=gaussianKernelSize,proto3,oneof" json:"gaussian_kernel_size,omitempty"`
	VarianceThreshold  *int32 `protobuf:"varint,3,opt,name=variance_threshold,json=varianceThreshold,proto3,oneof" json:"variance_threshold,omitempty"`
	BgFramesHistory    *int32 `protobuf:"varint,4,opt,name=bg_frames_history,json=bgFramesHistory,proto3,oneof" json:"bg_frames_history,omitempty"`
}

func (x *MotionZoneDetectionPerceptionConfig) Reset() {
	*x = MotionZoneDetectionPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotionZoneDetectionPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotionZoneDetectionPerceptionConfig) ProtoMessage() {}

func (x *MotionZoneDetectionPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotionZoneDetectionPerceptionConfig.ProtoReflect.Descriptor instead.
func (*MotionZoneDetectionPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{11}
}

func (x *MotionZoneDetectionPerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *MotionZoneDetectionPerceptionConfig) GetGaussianKernelSize() int32 {
	if x != nil && x.GaussianKernelSize != nil {
		return *x.GaussianKernelSize
	}
	return 0
}

func (x *MotionZoneDetectionPerceptionConfig) GetVarianceThreshold() int32 {
	if x != nil && x.VarianceThreshold != nil {
		return *x.VarianceThreshold
	}
	return 0
}

func (x *MotionZoneDetectionPerceptionConfig) GetBgFramesHistory() int32 {
	if x != nil && x.BgFramesHistory != nil {
		return *x.BgFramesHistory
	}
	return 0
}

type CarryObjectPerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled           *bool            `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	MinActorPixelArea *int32           `protobuf:"varint,2,opt,name=min_actor_pixel_area,json=minActorPixelArea,proto3,oneof" json:"min_actor_pixel_area,omitempty"`
	ModelPath         *string          `protobuf:"bytes,3,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	Prediction2Class  map[string]int32 `protobuf:"bytes,4,rep,name=prediction2class,proto3" json:"prediction2class,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CarryObjectPerceptionConfig) Reset() {
	*x = CarryObjectPerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarryObjectPerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarryObjectPerceptionConfig) ProtoMessage() {}

func (x *CarryObjectPerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarryObjectPerceptionConfig.ProtoReflect.Descriptor instead.
func (*CarryObjectPerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{12}
}

func (x *CarryObjectPerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *CarryObjectPerceptionConfig) GetMinActorPixelArea() int32 {
	if x != nil && x.MinActorPixelArea != nil {
		return *x.MinActorPixelArea
	}
	return 0
}

func (x *CarryObjectPerceptionConfig) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *CarryObjectPerceptionConfig) GetPrediction2Class() map[string]int32 {
	if x != nil {
		return x.Prediction2Class
	}
	return nil
}

type ObstructionSegmenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                *bool            `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	ModelPath              *string          `protobuf:"bytes,2,opt,name=model_path,json=modelPath,proto3,oneof" json:"model_path,omitempty"`
	PostProcessEnabled     *bool            `protobuf:"varint,3,opt,name=post_process_enabled,json=postProcessEnabled,proto3,oneof" json:"post_process_enabled,omitempty"`
	FrameSegment2Class     map[string]int32 `protobuf:"bytes,4,rep,name=frame_segment2class,json=frameSegment2class,proto3" json:"frame_segment2class,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MinPixelSize           *int32           `protobuf:"varint,5,opt,name=min_pixel_size,json=minPixelSize,proto3,oneof" json:"min_pixel_size,omitempty"`
	MinRunTimeDifferenceMs *int32           `protobuf:"varint,6,opt,name=min_run_time_difference_ms,json=minRunTimeDifferenceMs,proto3,oneof" json:"min_run_time_difference_ms,omitempty"`
	IgnoreActorCategories  []string         `protobuf:"bytes,7,rep,name=ignore_actor_categories,json=ignoreActorCategories,proto3" json:"ignore_actor_categories,omitempty"`
}

func (x *ObstructionSegmenter) Reset() {
	*x = ObstructionSegmenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObstructionSegmenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObstructionSegmenter) ProtoMessage() {}

func (x *ObstructionSegmenter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObstructionSegmenter.ProtoReflect.Descriptor instead.
func (*ObstructionSegmenter) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{13}
}

func (x *ObstructionSegmenter) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *ObstructionSegmenter) GetModelPath() string {
	if x != nil && x.ModelPath != nil {
		return *x.ModelPath
	}
	return ""
}

func (x *ObstructionSegmenter) GetPostProcessEnabled() bool {
	if x != nil && x.PostProcessEnabled != nil {
		return *x.PostProcessEnabled
	}
	return false
}

func (x *ObstructionSegmenter) GetFrameSegment2Class() map[string]int32 {
	if x != nil {
		return x.FrameSegment2Class
	}
	return nil
}

func (x *ObstructionSegmenter) GetMinPixelSize() int32 {
	if x != nil && x.MinPixelSize != nil {
		return *x.MinPixelSize
	}
	return 0
}

func (x *ObstructionSegmenter) GetMinRunTimeDifferenceMs() int32 {
	if x != nil && x.MinRunTimeDifferenceMs != nil {
		return *x.MinRunTimeDifferenceMs
	}
	return 0
}

func (x *ObstructionSegmenter) GetIgnoreActorCategories() []string {
	if x != nil {
		return x.IgnoreActorCategories
	}
	return nil
}

type PerceptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled               *bool                                `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	DetectorTracker       *DetectorTrackerPerceptionConfig     `protobuf:"bytes,2,opt,name=detector_tracker,json=detectorTracker,proto3,oneof" json:"detector_tracker,omitempty"`
	DoorClassifier        *DoorClassifierPerceptionConfig      `protobuf:"bytes,3,opt,name=door_classifier,json=doorClassifier,proto3,oneof" json:"door_classifier,omitempty"`
	HatClassifier         *HatClassifierPerceptionConfig       `protobuf:"bytes,4,opt,name=hat_classifier,json=hatClassifier,proto3,oneof" json:"hat_classifier,omitempty"`
	LiftClassifier        *LiftClassifierPerceptionConfig      `protobuf:"bytes,5,opt,name=lift_classifier,json=liftClassifier,proto3,oneof" json:"lift_classifier,omitempty"`
	Pose                  *PosePerceptionConfig                `protobuf:"bytes,6,opt,name=pose,proto3,oneof" json:"pose,omitempty"`
	ReachClassifier       *ReachClassifierPerceptionConfig     `protobuf:"bytes,7,opt,name=reach_classifier,json=reachClassifier,proto3,oneof" json:"reach_classifier,omitempty"`
	VestClassifier        *VestClassifierPerceptionConfig      `protobuf:"bytes,8,opt,name=vest_classifier,json=vestClassifier,proto3,oneof" json:"vest_classifier,omitempty"`
	AcausalLayer          *AcausalLayerPerceptionConfig        `protobuf:"bytes,9,opt,name=acausal_layer,json=acausalLayer,proto3,oneof" json:"acausal_layer,omitempty"`
	Spill                 *SpillPerceptionConfig               `protobuf:"bytes,10,opt,name=spill,proto3,oneof" json:"spill,omitempty"`
	MotionZoneDetection   *MotionZoneDetectionPerceptionConfig `protobuf:"bytes,11,opt,name=motion_zone_detection,json=motionZoneDetection,proto3,oneof" json:"motion_zone_detection,omitempty"`
	CarryObjectClassifier *CarryObjectPerceptionConfig         `protobuf:"bytes,12,opt,name=carry_object_classifier,json=carryObjectClassifier,proto3,oneof" json:"carry_object_classifier,omitempty"`
	GpuRuntime            *GpuRuntimeConfig                    `protobuf:"bytes,13,opt,name=gpu_runtime,json=gpuRuntime,proto3,oneof" json:"gpu_runtime,omitempty"`
	ObstructionSegmenter  *ObstructionSegmenter                `protobuf:"bytes,14,opt,name=obstruction_segmenter,json=obstructionSegmenter,proto3,oneof" json:"obstruction_segmenter,omitempty"`
}

func (x *PerceptionConfig) Reset() {
	*x = PerceptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerceptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerceptionConfig) ProtoMessage() {}

func (x *PerceptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerceptionConfig.ProtoReflect.Descriptor instead.
func (*PerceptionConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP(), []int{14}
}

func (x *PerceptionConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PerceptionConfig) GetDetectorTracker() *DetectorTrackerPerceptionConfig {
	if x != nil {
		return x.DetectorTracker
	}
	return nil
}

func (x *PerceptionConfig) GetDoorClassifier() *DoorClassifierPerceptionConfig {
	if x != nil {
		return x.DoorClassifier
	}
	return nil
}

func (x *PerceptionConfig) GetHatClassifier() *HatClassifierPerceptionConfig {
	if x != nil {
		return x.HatClassifier
	}
	return nil
}

func (x *PerceptionConfig) GetLiftClassifier() *LiftClassifierPerceptionConfig {
	if x != nil {
		return x.LiftClassifier
	}
	return nil
}

func (x *PerceptionConfig) GetPose() *PosePerceptionConfig {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *PerceptionConfig) GetReachClassifier() *ReachClassifierPerceptionConfig {
	if x != nil {
		return x.ReachClassifier
	}
	return nil
}

func (x *PerceptionConfig) GetVestClassifier() *VestClassifierPerceptionConfig {
	if x != nil {
		return x.VestClassifier
	}
	return nil
}

func (x *PerceptionConfig) GetAcausalLayer() *AcausalLayerPerceptionConfig {
	if x != nil {
		return x.AcausalLayer
	}
	return nil
}

func (x *PerceptionConfig) GetSpill() *SpillPerceptionConfig {
	if x != nil {
		return x.Spill
	}
	return nil
}

func (x *PerceptionConfig) GetMotionZoneDetection() *MotionZoneDetectionPerceptionConfig {
	if x != nil {
		return x.MotionZoneDetection
	}
	return nil
}

func (x *PerceptionConfig) GetCarryObjectClassifier() *CarryObjectPerceptionConfig {
	if x != nil {
		return x.CarryObjectClassifier
	}
	return nil
}

func (x *PerceptionConfig) GetGpuRuntime() *GpuRuntimeConfig {
	if x != nil {
		return x.GpuRuntime
	}
	return nil
}

func (x *PerceptionConfig) GetObstructionSegmenter() *ObstructionSegmenter {
	if x != nil {
		return x.ObstructionSegmenter
	}
	return nil
}

var File_protos_perception_graph_config_v1_perception_params_proto protoreflect.FileDescriptor

var file_protos_perception_graph_config_v1_perception_params_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x22, 0x73,
	0x0a, 0x10, 0x47, 0x70, 0x75, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x53, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x75, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x1f, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xb1,
	0x01, 0x0a, 0x1e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x1d, 0x48, 0x61, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x1b, 0x69, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x69, 0x78, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x22, 0xb1,
	0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x66, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x22, 0xb2, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x1e, 0x56, 0x65, 0x73, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x78,
	0x65, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52,
	0x11, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x41, 0x72,
	0x65, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x69,
	0x78, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x22, 0xc7, 0x02, 0x0a, 0x1d, 0x50, 0x50, 0x45,
	0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x10, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1c, 0x73, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x18, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x56, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x53,
	0x0a, 0x24, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x20,
	0x70, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x70, 0x6f,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x0d, 0x50, 0x50, 0x45, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68,
	0x65, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x50, 0x45, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d,
	0x50, 0x50, 0x45, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x65, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x50, 0x45, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x65, 0x6e,
	0x65, 0x72, 0x22, 0xfe, 0x04, 0x0a, 0x15, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x50,
	0x69, 0x78, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x75, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x69, 0x6c,
	0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x45, 0x0a,
	0x17, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42,
	0x1d, 0x0a, 0x1b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xb2, 0x02, 0x0a, 0x23, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f,
	0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x67, 0x61,
	0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x12, 0x67, 0x61, 0x75, 0x73,
	0x73, 0x69, 0x61, 0x6e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x62, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x0f, 0x62, 0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x67, 0x61, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x5f,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x62, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x92, 0x03, 0x0a, 0x1b, 0x43, 0x61, 0x72,
	0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x72, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x10, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xe4, 0x04,
	0x0a, 0x14, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x80, 0x01, 0x0a, 0x13, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x17, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x73, 0x22, 0xc2, 0x0d, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x0f,
	0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x0e, 0x64, 0x6f, 0x6f, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x6c, 0x0a,
	0x0e, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x03, 0x52, 0x0d, 0x68, 0x61, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x0f, 0x6c,
	0x69, 0x66, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x04, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x04,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x72,
	0x0a, 0x10, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x06, 0x52, 0x0f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x6f, 0x0a, 0x0f, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x07,
	0x52, 0x0e, 0x76, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x0d, 0x61, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x5f, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x08, 0x52, 0x0c, 0x61,
	0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x53,
	0x0a, 0x05, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x70, 0x69, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x09, 0x52, 0x05, 0x73, 0x70, 0x69, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x7f, 0x0a, 0x15, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e,
	0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x0a, 0x52, 0x13, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x17, 0x63, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x0b, 0x52, 0x15, 0x63, 0x61, 0x72, 0x72, 0x79, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x59, 0x0a, 0x0b, 0x67, 0x70, 0x75, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x70, 0x75, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x0c, 0x52, 0x0a, 0x67,
	0x70, 0x75, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x15,
	0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x0d, 0x52, 0x14, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x66, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x70, 0x6f, 0x73, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x61, 0x63, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6f, 0x62, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2a, 0x7e, 0x0a, 0x11, 0x47, 0x70, 0x75,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x23,
	0x0a, 0x1f, 0x47, 0x50, 0x55, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x50, 0x55, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x50, 0x55, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x54, 0x52, 0x49, 0x54, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x78, 0x65, 0x6c, 0x2d, 0x61, 0x69,
	0x2f, 0x76, 0x6f, 0x78, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_perception_graph_config_v1_perception_params_proto_rawDescOnce sync.Once
	file_protos_perception_graph_config_v1_perception_params_proto_rawDescData = file_protos_perception_graph_config_v1_perception_params_proto_rawDesc
)

func file_protos_perception_graph_config_v1_perception_params_proto_rawDescGZIP() []byte {
	file_protos_perception_graph_config_v1_perception_params_proto_rawDescOnce.Do(func() {
		file_protos_perception_graph_config_v1_perception_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_perception_graph_config_v1_perception_params_proto_rawDescData)
	})
	return file_protos_perception_graph_config_v1_perception_params_proto_rawDescData
}

var file_protos_perception_graph_config_v1_perception_params_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_perception_graph_config_v1_perception_params_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_protos_perception_graph_config_v1_perception_params_proto_goTypes = []interface{}{
	(GpuRuntimeBackend)(0),                      // 0: protos.perception.graph_config.v1.GpuRuntimeBackend
	(*GpuRuntimeConfig)(nil),                    // 1: protos.perception.graph_config.v1.GpuRuntimeConfig
	(*DetectorTrackerPerceptionConfig)(nil),     // 2: protos.perception.graph_config.v1.DetectorTrackerPerceptionConfig
	(*DoorClassifierPerceptionConfig)(nil),      // 3: protos.perception.graph_config.v1.DoorClassifierPerceptionConfig
	(*HatClassifierPerceptionConfig)(nil),       // 4: protos.perception.graph_config.v1.HatClassifierPerceptionConfig
	(*LiftClassifierPerceptionConfig)(nil),      // 5: protos.perception.graph_config.v1.LiftClassifierPerceptionConfig
	(*PosePerceptionConfig)(nil),                // 6: protos.perception.graph_config.v1.PosePerceptionConfig
	(*ReachClassifierPerceptionConfig)(nil),     // 7: protos.perception.graph_config.v1.ReachClassifierPerceptionConfig
	(*VestClassifierPerceptionConfig)(nil),      // 8: protos.perception.graph_config.v1.VestClassifierPerceptionConfig
	(*PPESmoothenerPerceptionConfig)(nil),       // 9: protos.perception.graph_config.v1.PPESmoothenerPerceptionConfig
	(*AcausalLayerPerceptionConfig)(nil),        // 10: protos.perception.graph_config.v1.AcausalLayerPerceptionConfig
	(*SpillPerceptionConfig)(nil),               // 11: protos.perception.graph_config.v1.SpillPerceptionConfig
	(*MotionZoneDetectionPerceptionConfig)(nil), // 12: protos.perception.graph_config.v1.MotionZoneDetectionPerceptionConfig
	(*CarryObjectPerceptionConfig)(nil),         // 13: protos.perception.graph_config.v1.CarryObjectPerceptionConfig
	(*ObstructionSegmenter)(nil),                // 14: protos.perception.graph_config.v1.ObstructionSegmenter
	(*PerceptionConfig)(nil),                    // 15: protos.perception.graph_config.v1.PerceptionConfig
	nil,                                         // 16: protos.perception.graph_config.v1.DetectorTrackerPerceptionConfig.Actor2classEntry
	nil,                                         // 17: protos.perception.graph_config.v1.SpillPerceptionConfig.FrameSegment2classEntry
	nil,                                         // 18: protos.perception.graph_config.v1.CarryObjectPerceptionConfig.Prediction2classEntry
	nil,                                         // 19: protos.perception.graph_config.v1.ObstructionSegmenter.FrameSegment2classEntry
}
var file_protos_perception_graph_config_v1_perception_params_proto_depIdxs = []int32{
	0,  // 0: protos.perception.graph_config.v1.GpuRuntimeConfig.runtime:type_name -> protos.perception.graph_config.v1.GpuRuntimeBackend
	16, // 1: protos.perception.graph_config.v1.DetectorTrackerPerceptionConfig.actor2class:type_name -> protos.perception.graph_config.v1.DetectorTrackerPerceptionConfig.Actor2classEntry
	9,  // 2: protos.perception.graph_config.v1.AcausalLayerPerceptionConfig.PPESmoothener:type_name -> protos.perception.graph_config.v1.PPESmoothenerPerceptionConfig
	17, // 3: protos.perception.graph_config.v1.SpillPerceptionConfig.frame_segment2class:type_name -> protos.perception.graph_config.v1.SpillPerceptionConfig.FrameSegment2classEntry
	18, // 4: protos.perception.graph_config.v1.CarryObjectPerceptionConfig.prediction2class:type_name -> protos.perception.graph_config.v1.CarryObjectPerceptionConfig.Prediction2classEntry
	19, // 5: protos.perception.graph_config.v1.ObstructionSegmenter.frame_segment2class:type_name -> protos.perception.graph_config.v1.ObstructionSegmenter.FrameSegment2classEntry
	2,  // 6: protos.perception.graph_config.v1.PerceptionConfig.detector_tracker:type_name -> protos.perception.graph_config.v1.DetectorTrackerPerceptionConfig
	3,  // 7: protos.perception.graph_config.v1.PerceptionConfig.door_classifier:type_name -> protos.perception.graph_config.v1.DoorClassifierPerceptionConfig
	4,  // 8: protos.perception.graph_config.v1.PerceptionConfig.hat_classifier:type_name -> protos.perception.graph_config.v1.HatClassifierPerceptionConfig
	5,  // 9: protos.perception.graph_config.v1.PerceptionConfig.lift_classifier:type_name -> protos.perception.graph_config.v1.LiftClassifierPerceptionConfig
	6,  // 10: protos.perception.graph_config.v1.PerceptionConfig.pose:type_name -> protos.perception.graph_config.v1.PosePerceptionConfig
	7,  // 11: protos.perception.graph_config.v1.PerceptionConfig.reach_classifier:type_name -> protos.perception.graph_config.v1.ReachClassifierPerceptionConfig
	8,  // 12: protos.perception.graph_config.v1.PerceptionConfig.vest_classifier:type_name -> protos.perception.graph_config.v1.VestClassifierPerceptionConfig
	10, // 13: protos.perception.graph_config.v1.PerceptionConfig.acausal_layer:type_name -> protos.perception.graph_config.v1.AcausalLayerPerceptionConfig
	11, // 14: protos.perception.graph_config.v1.PerceptionConfig.spill:type_name -> protos.perception.graph_config.v1.SpillPerceptionConfig
	12, // 15: protos.perception.graph_config.v1.PerceptionConfig.motion_zone_detection:type_name -> protos.perception.graph_config.v1.MotionZoneDetectionPerceptionConfig
	13, // 16: protos.perception.graph_config.v1.PerceptionConfig.carry_object_classifier:type_name -> protos.perception.graph_config.v1.CarryObjectPerceptionConfig
	1,  // 17: protos.perception.graph_config.v1.PerceptionConfig.gpu_runtime:type_name -> protos.perception.graph_config.v1.GpuRuntimeConfig
	14, // 18: protos.perception.graph_config.v1.PerceptionConfig.obstruction_segmenter:type_name -> protos.perception.graph_config.v1.ObstructionSegmenter
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_protos_perception_graph_config_v1_perception_params_proto_init() }
func file_protos_perception_graph_config_v1_perception_params_proto_init() {
	if File_protos_perception_graph_config_v1_perception_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuRuntimeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectorTrackerPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorClassifierPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HatClassifierPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiftClassifierPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosePerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReachClassifierPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VestClassifierPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PPESmoothenerPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcausalLayerPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpillPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotionZoneDetectionPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarryObjectPerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObstructionSegmenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerceptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_perception_params_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_perception_graph_config_v1_perception_params_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_perception_graph_config_v1_perception_params_proto_goTypes,
		DependencyIndexes: file_protos_perception_graph_config_v1_perception_params_proto_depIdxs,
		EnumInfos:         file_protos_perception_graph_config_v1_perception_params_proto_enumTypes,
		MessageInfos:      file_protos_perception_graph_config_v1_perception_params_proto_msgTypes,
	}.Build()
	File_protos_perception_graph_config_v1_perception_params_proto = out.File
	file_protos_perception_graph_config_v1_perception_params_proto_rawDesc = nil
	file_protos_perception_graph_config_v1_perception_params_proto_goTypes = nil
	file_protos_perception_graph_config_v1_perception_params_proto_depIdxs = nil
}
