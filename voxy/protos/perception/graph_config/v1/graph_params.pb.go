// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: protos/perception/graph_config/v1/graph_params.proto

package graphconfigpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Camera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arn     *string `protobuf:"bytes,1,opt,name=arn,proto3,oneof" json:"arn,omitempty"`
	Version *int32  `protobuf:"varint,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Fps     *int32  `protobuf:"varint,3,opt,name=fps,proto3,oneof" json:"fps,omitempty"`
}

func (x *Camera) Reset() {
	*x = Camera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Camera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camera) ProtoMessage() {}

func (x *Camera) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camera.ProtoReflect.Descriptor instead.
func (*Camera) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{0}
}

func (x *Camera) GetArn() string {
	if x != nil && x.Arn != nil {
		return *x.Arn
	}
	return ""
}

func (x *Camera) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Camera) GetFps() int32 {
	if x != nil && x.Fps != nil {
		return *x.Fps
	}
	return 0
}

type IncidentPublisherConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled     *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	SnsTopicArn *string `protobuf:"bytes,2,opt,name=sns_topic_arn,json=snsTopicArn,proto3,oneof" json:"sns_topic_arn,omitempty"`
}

func (x *IncidentPublisherConfig) Reset() {
	*x = IncidentPublisherConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncidentPublisherConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentPublisherConfig) ProtoMessage() {}

func (x *IncidentPublisherConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentPublisherConfig.ProtoReflect.Descriptor instead.
func (*IncidentPublisherConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{1}
}

func (x *IncidentPublisherConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *IncidentPublisherConfig) GetSnsTopicArn() string {
	if x != nil && x.SnsTopicArn != nil {
		return *x.SnsTopicArn
	}
	return ""
}

type IncidentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncidentMachineParams *ModelConfig `protobuf:"bytes,1,opt,name=incident_machine_params,json=incidentMachineParams,proto3,oneof" json:"incident_machine_params,omitempty"`
	// Deprecated: Do not use.
	MonitorsRequested             []string                 `protobuf:"bytes,2,rep,name=monitors_requested,json=monitorsRequested,proto3" json:"monitors_requested,omitempty"`
	StateMachineMonitorsRequested []string                 `protobuf:"bytes,3,rep,name=state_machine_monitors_requested,json=stateMachineMonitorsRequested,proto3" json:"state_machine_monitors_requested,omitempty"`
	ShouldGenerateOnCooldown      *bool                    `protobuf:"varint,4,opt,name=should_generate_on_cooldown,json=shouldGenerateOnCooldown,proto3,oneof" json:"should_generate_on_cooldown,omitempty"`
	IncidentMachineEnabled        *bool                    `protobuf:"varint,5,opt,name=incident_machine_enabled,json=incidentMachineEnabled,proto3,oneof" json:"incident_machine_enabled,omitempty"`
	DryRun                        *bool                    `protobuf:"varint,6,opt,name=dry_run,json=dryRun,proto3,oneof" json:"dry_run,omitempty"`
	GenerateTempSubdirs           *bool                    `protobuf:"varint,7,opt,name=generate_temp_subdirs,json=generateTempSubdirs,proto3,oneof" json:"generate_temp_subdirs,omitempty"`
	TempDirectory                 *string                  `protobuf:"bytes,8,opt,name=temp_directory,json=tempDirectory,proto3,oneof" json:"temp_directory,omitempty"`
	Publisher                     *IncidentPublisherConfig `protobuf:"bytes,9,opt,name=publisher,proto3,oneof" json:"publisher,omitempty"`
}

func (x *IncidentConfig) Reset() {
	*x = IncidentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncidentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncidentConfig) ProtoMessage() {}

func (x *IncidentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncidentConfig.ProtoReflect.Descriptor instead.
func (*IncidentConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{2}
}

func (x *IncidentConfig) GetIncidentMachineParams() *ModelConfig {
	if x != nil {
		return x.IncidentMachineParams
	}
	return nil
}

// Deprecated: Do not use.
func (x *IncidentConfig) GetMonitorsRequested() []string {
	if x != nil {
		return x.MonitorsRequested
	}
	return nil
}

func (x *IncidentConfig) GetStateMachineMonitorsRequested() []string {
	if x != nil {
		return x.StateMachineMonitorsRequested
	}
	return nil
}

func (x *IncidentConfig) GetShouldGenerateOnCooldown() bool {
	if x != nil && x.ShouldGenerateOnCooldown != nil {
		return *x.ShouldGenerateOnCooldown
	}
	return false
}

func (x *IncidentConfig) GetIncidentMachineEnabled() bool {
	if x != nil && x.IncidentMachineEnabled != nil {
		return *x.IncidentMachineEnabled
	}
	return false
}

func (x *IncidentConfig) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

func (x *IncidentConfig) GetGenerateTempSubdirs() bool {
	if x != nil && x.GenerateTempSubdirs != nil {
		return *x.GenerateTempSubdirs
	}
	return false
}

func (x *IncidentConfig) GetTempDirectory() string {
	if x != nil && x.TempDirectory != nil {
		return *x.TempDirectory
	}
	return ""
}

func (x *IncidentConfig) GetPublisher() *IncidentPublisherConfig {
	if x != nil {
		return x.Publisher
	}
	return nil
}

type TemporalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPastFrames     *int32 `protobuf:"varint,1,opt,name=max_past_frames,json=maxPastFrames,proto3,oneof" json:"max_past_frames,omitempty"`
	MaxFutureFrames   *int32 `protobuf:"varint,2,opt,name=max_future_frames,json=maxFutureFrames,proto3,oneof" json:"max_future_frames,omitempty"`
	ExpireThresholdMs *int32 `protobuf:"varint,3,opt,name=expire_threshold_ms,json=expireThresholdMs,proto3,oneof" json:"expire_threshold_ms,omitempty"`
	MaxFrameSegments  *int32 `protobuf:"varint,4,opt,name=max_frame_segments,json=maxFrameSegments,proto3,oneof" json:"max_frame_segments,omitempty"`
}

func (x *TemporalConfig) Reset() {
	*x = TemporalConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalConfig) ProtoMessage() {}

func (x *TemporalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalConfig.ProtoReflect.Descriptor instead.
func (*TemporalConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{3}
}

func (x *TemporalConfig) GetMaxPastFrames() int32 {
	if x != nil && x.MaxPastFrames != nil {
		return *x.MaxPastFrames
	}
	return 0
}

func (x *TemporalConfig) GetMaxFutureFrames() int32 {
	if x != nil && x.MaxFutureFrames != nil {
		return *x.MaxFutureFrames
	}
	return 0
}

func (x *TemporalConfig) GetExpireThresholdMs() int32 {
	if x != nil && x.ExpireThresholdMs != nil {
		return *x.ExpireThresholdMs
	}
	return 0
}

func (x *TemporalConfig) GetMaxFrameSegments() int32 {
	if x != nil && x.MaxFrameSegments != nil {
		return *x.MaxFrameSegments
	}
	return 0
}

type PublisherConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled                   *bool   `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	PortalHost                *string `protobuf:"bytes,2,opt,name=portal_host,json=portalHost,proto3,oneof" json:"portal_host,omitempty"`
	AuthToken                 *string `protobuf:"bytes,3,opt,name=auth_token,json=authToken,proto3,oneof" json:"auth_token,omitempty"`
	OrganizationKey           *string `protobuf:"bytes,4,opt,name=organization_key,json=organizationKey,proto3,oneof" json:"organization_key,omitempty"`
	KinesisFrameStructsStream *string `protobuf:"bytes,5,opt,name=kinesis_frame_structs_stream,json=kinesisFrameStructsStream,proto3,oneof" json:"kinesis_frame_structs_stream,omitempty"`
}

func (x *PublisherConfig) Reset() {
	*x = PublisherConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherConfig) ProtoMessage() {}

func (x *PublisherConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherConfig.ProtoReflect.Descriptor instead.
func (*PublisherConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{4}
}

func (x *PublisherConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *PublisherConfig) GetPortalHost() string {
	if x != nil && x.PortalHost != nil {
		return *x.PortalHost
	}
	return ""
}

func (x *PublisherConfig) GetAuthToken() string {
	if x != nil && x.AuthToken != nil {
		return *x.AuthToken
	}
	return ""
}

func (x *PublisherConfig) GetOrganizationKey() string {
	if x != nil && x.OrganizationKey != nil {
		return *x.OrganizationKey
	}
	return ""
}

func (x *PublisherConfig) GetKinesisFrameStructsStream() string {
	if x != nil && x.KinesisFrameStructsStream != nil {
		return *x.KinesisFrameStructsStream
	}
	return ""
}

type PublisherStateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchMaxBytes          *int32  `protobuf:"varint,1,opt,name=batch_max_bytes,json=batchMaxBytes,proto3,oneof" json:"batch_max_bytes,omitempty"`
	BatchMaxLatencySeconds *int32  `protobuf:"varint,2,opt,name=batch_max_latency_seconds,json=batchMaxLatencySeconds,proto3,oneof" json:"batch_max_latency_seconds,omitempty"`
	BatchMaxMessage        *int32  `protobuf:"varint,3,opt,name=batch_max_message,json=batchMaxMessage,proto3,oneof" json:"batch_max_message,omitempty"`
	RetryDeadlineSeconds   *int32  `protobuf:"varint,4,opt,name=retry_deadline_seconds,json=retryDeadlineSeconds,proto3,oneof" json:"retry_deadline_seconds,omitempty"`
	EmulatorHost           *string `protobuf:"bytes,5,opt,name=emulator_host,json=emulatorHost,proto3,oneof" json:"emulator_host,omitempty"`
	EventTopic             *string `protobuf:"bytes,6,opt,name=event_topic,json=eventTopic,proto3,oneof" json:"event_topic,omitempty"`
	StateTopic             *string `protobuf:"bytes,7,opt,name=state_topic,json=stateTopic,proto3,oneof" json:"state_topic,omitempty"`
	KinesisDataStream      *string `protobuf:"bytes,8,opt,name=kinesis_data_stream,json=kinesisDataStream,proto3,oneof" json:"kinesis_data_stream,omitempty"`
}

func (x *PublisherStateConfig) Reset() {
	*x = PublisherStateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherStateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherStateConfig) ProtoMessage() {}

func (x *PublisherStateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherStateConfig.ProtoReflect.Descriptor instead.
func (*PublisherStateConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{5}
}

func (x *PublisherStateConfig) GetBatchMaxBytes() int32 {
	if x != nil && x.BatchMaxBytes != nil {
		return *x.BatchMaxBytes
	}
	return 0
}

func (x *PublisherStateConfig) GetBatchMaxLatencySeconds() int32 {
	if x != nil && x.BatchMaxLatencySeconds != nil {
		return *x.BatchMaxLatencySeconds
	}
	return 0
}

func (x *PublisherStateConfig) GetBatchMaxMessage() int32 {
	if x != nil && x.BatchMaxMessage != nil {
		return *x.BatchMaxMessage
	}
	return 0
}

func (x *PublisherStateConfig) GetRetryDeadlineSeconds() int32 {
	if x != nil && x.RetryDeadlineSeconds != nil {
		return *x.RetryDeadlineSeconds
	}
	return 0
}

func (x *PublisherStateConfig) GetEmulatorHost() string {
	if x != nil && x.EmulatorHost != nil {
		return *x.EmulatorHost
	}
	return ""
}

func (x *PublisherStateConfig) GetEventTopic() string {
	if x != nil && x.EventTopic != nil {
		return *x.EventTopic
	}
	return ""
}

func (x *PublisherStateConfig) GetStateTopic() string {
	if x != nil && x.StateTopic != nil {
		return *x.StateTopic
	}
	return ""
}

func (x *PublisherStateConfig) GetKinesisDataStream() string {
	if x != nil && x.KinesisDataStream != nil {
		return *x.KinesisDataStream
	}
	return ""
}

type StateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled        *bool                 `protobuf:"varint,1,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	AddEpochTime   *bool                 `protobuf:"varint,2,opt,name=add_epoch_time,json=addEpochTime,proto3,oneof" json:"add_epoch_time,omitempty"`
	FramesToBuffer *int32                `protobuf:"varint,3,opt,name=frames_to_buffer,json=framesToBuffer,proto3,oneof" json:"frames_to_buffer,omitempty"`
	Publisher      *PublisherStateConfig `protobuf:"bytes,4,opt,name=publisher,proto3,oneof" json:"publisher,omitempty"`
}

func (x *StateConfig) Reset() {
	*x = StateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateConfig) ProtoMessage() {}

func (x *StateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateConfig.ProtoReflect.Descriptor instead.
func (*StateConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{6}
}

func (x *StateConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *StateConfig) GetAddEpochTime() bool {
	if x != nil && x.AddEpochTime != nil {
		return *x.AddEpochTime
	}
	return false
}

func (x *StateConfig) GetFramesToBuffer() int32 {
	if x != nil && x.FramesToBuffer != nil {
		return *x.FramesToBuffer
	}
	return 0
}

func (x *StateConfig) GetPublisher() *PublisherStateConfig {
	if x != nil {
		return x.Publisher
	}
	return nil
}

type AssumeRoleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultRoleArn *string `protobuf:"bytes,1,opt,name=default_role_arn,json=defaultRoleArn,proto3,oneof" json:"default_role_arn,omitempty"`
	ReadKvsArn     *string `protobuf:"bytes,2,opt,name=read_kvs_arn,json=readKvsArn,proto3,oneof" json:"read_kvs_arn,omitempty"`
}

func (x *AssumeRoleConfig) Reset() {
	*x = AssumeRoleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssumeRoleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssumeRoleConfig) ProtoMessage() {}

func (x *AssumeRoleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssumeRoleConfig.ProtoReflect.Descriptor instead.
func (*AssumeRoleConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{7}
}

func (x *AssumeRoleConfig) GetDefaultRoleArn() string {
	if x != nil && x.DefaultRoleArn != nil {
		return *x.DefaultRoleArn
	}
	return ""
}

func (x *AssumeRoleConfig) GetReadKvsArn() string {
	if x != nil && x.ReadKvsArn != nil {
		return *x.ReadKvsArn
	}
	return ""
}

type GraphConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CameraUuid *string           `protobuf:"bytes,10,opt,name=camera_uuid,json=cameraUuid,proto3,oneof" json:"camera_uuid,omitempty"`
	Camera     *Camera           `protobuf:"bytes,20,opt,name=camera,proto3,oneof" json:"camera,omitempty"`
	Incident   *IncidentConfig   `protobuf:"bytes,30,opt,name=incident,proto3,oneof" json:"incident,omitempty"`
	Perception *PerceptionConfig `protobuf:"bytes,40,opt,name=perception,proto3,oneof" json:"perception,omitempty"`
	Temporal   *TemporalConfig   `protobuf:"bytes,50,opt,name=temporal,proto3,oneof" json:"temporal,omitempty"`
	Publisher  *PublisherConfig  `protobuf:"bytes,60,opt,name=publisher,proto3,oneof" json:"publisher,omitempty"`
	State      *StateConfig      `protobuf:"bytes,70,opt,name=state,proto3,oneof" json:"state,omitempty"`
	AssumeRole *AssumeRoleConfig `protobuf:"bytes,80,opt,name=assume_role,json=assumeRole,proto3,oneof" json:"assume_role,omitempty"`
}

func (x *GraphConfig) Reset() {
	*x = GraphConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphConfig) ProtoMessage() {}

func (x *GraphConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphConfig.ProtoReflect.Descriptor instead.
func (*GraphConfig) Descriptor() ([]byte, []int) {
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP(), []int{8}
}

func (x *GraphConfig) GetCameraUuid() string {
	if x != nil && x.CameraUuid != nil {
		return *x.CameraUuid
	}
	return ""
}

func (x *GraphConfig) GetCamera() *Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

func (x *GraphConfig) GetIncident() *IncidentConfig {
	if x != nil {
		return x.Incident
	}
	return nil
}

func (x *GraphConfig) GetPerception() *PerceptionConfig {
	if x != nil {
		return x.Perception
	}
	return nil
}

func (x *GraphConfig) GetTemporal() *TemporalConfig {
	if x != nil {
		return x.Temporal
	}
	return nil
}

func (x *GraphConfig) GetPublisher() *PublisherConfig {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *GraphConfig) GetState() *StateConfig {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GraphConfig) GetAssumeRole() *AssumeRoleConfig {
	if x != nil {
		return x.AssumeRole
	}
	return nil
}

var File_protos_perception_graph_config_v1_graph_params_proto protoreflect.FileDescriptor

var file_protos_perception_graph_config_v1_graph_params_proto_rawDesc = []byte{
	0x0a, 0x34, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x3f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x06, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12,
	0x15, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x03, 0x66, 0x70, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x61, 0x72, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x66, 0x70, 0x73, 0x22, 0x7f, 0x0a, 0x17, 0x49, 0x6e, 0x63, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x6e, 0x73,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x6e, 0x73, 0x5f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x6e, 0x22, 0xfe, 0x05, 0x0a, 0x0e, 0x49, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x17,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52,
	0x15, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x18, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x69, 0x6e, 0x63,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x16, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x64, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x53, 0x75, 0x62, 0x64, 0x69, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x06, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x69, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x73, 0x75, 0x62, 0x64, 0x69, 0x72, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0xaf, 0x02, 0x0a, 0x0e, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a,
	0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61,
	0x78, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x6d, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd1, 0x02, 0x0a,
	0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x6b, 0x69, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x19, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x22, 0xc7, 0x04, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x0f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x16, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x4d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x14, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x65, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x69, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x11, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xa4, 0x02, 0x0a, 0x0b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x54, 0x6f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x03, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x76,
	0x73, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x4b, 0x76, 0x73, 0x41, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72,
	0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6b, 0x76, 0x73, 0x5f, 0x61,
	0x72, 0x6e, 0x22, 0xe6, 0x05, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x48, 0x01, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x52, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x03, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x52,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x04, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x55, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x05, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x06, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x07,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x4b, 0x5a, 0x49, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x78, 0x65, 0x6c, 0x2d,
	0x61, 0x69, 0x2f, 0x76, 0x6f, 0x78, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_perception_graph_config_v1_graph_params_proto_rawDescOnce sync.Once
	file_protos_perception_graph_config_v1_graph_params_proto_rawDescData = file_protos_perception_graph_config_v1_graph_params_proto_rawDesc
)

func file_protos_perception_graph_config_v1_graph_params_proto_rawDescGZIP() []byte {
	file_protos_perception_graph_config_v1_graph_params_proto_rawDescOnce.Do(func() {
		file_protos_perception_graph_config_v1_graph_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_perception_graph_config_v1_graph_params_proto_rawDescData)
	})
	return file_protos_perception_graph_config_v1_graph_params_proto_rawDescData
}

var file_protos_perception_graph_config_v1_graph_params_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_protos_perception_graph_config_v1_graph_params_proto_goTypes = []interface{}{
	(*Camera)(nil),                  // 0: protos.perception.graph_config.v1.Camera
	(*IncidentPublisherConfig)(nil), // 1: protos.perception.graph_config.v1.IncidentPublisherConfig
	(*IncidentConfig)(nil),          // 2: protos.perception.graph_config.v1.IncidentConfig
	(*TemporalConfig)(nil),          // 3: protos.perception.graph_config.v1.TemporalConfig
	(*PublisherConfig)(nil),         // 4: protos.perception.graph_config.v1.PublisherConfig
	(*PublisherStateConfig)(nil),    // 5: protos.perception.graph_config.v1.PublisherStateConfig
	(*StateConfig)(nil),             // 6: protos.perception.graph_config.v1.StateConfig
	(*AssumeRoleConfig)(nil),        // 7: protos.perception.graph_config.v1.AssumeRoleConfig
	(*GraphConfig)(nil),             // 8: protos.perception.graph_config.v1.GraphConfig
	(*ModelConfig)(nil),             // 9: protos.perception.graph_config.v1.ModelConfig
	(*PerceptionConfig)(nil),        // 10: protos.perception.graph_config.v1.PerceptionConfig
}
var file_protos_perception_graph_config_v1_graph_params_proto_depIdxs = []int32{
	9,  // 0: protos.perception.graph_config.v1.IncidentConfig.incident_machine_params:type_name -> protos.perception.graph_config.v1.ModelConfig
	1,  // 1: protos.perception.graph_config.v1.IncidentConfig.publisher:type_name -> protos.perception.graph_config.v1.IncidentPublisherConfig
	5,  // 2: protos.perception.graph_config.v1.StateConfig.publisher:type_name -> protos.perception.graph_config.v1.PublisherStateConfig
	0,  // 3: protos.perception.graph_config.v1.GraphConfig.camera:type_name -> protos.perception.graph_config.v1.Camera
	2,  // 4: protos.perception.graph_config.v1.GraphConfig.incident:type_name -> protos.perception.graph_config.v1.IncidentConfig
	10, // 5: protos.perception.graph_config.v1.GraphConfig.perception:type_name -> protos.perception.graph_config.v1.PerceptionConfig
	3,  // 6: protos.perception.graph_config.v1.GraphConfig.temporal:type_name -> protos.perception.graph_config.v1.TemporalConfig
	4,  // 7: protos.perception.graph_config.v1.GraphConfig.publisher:type_name -> protos.perception.graph_config.v1.PublisherConfig
	6,  // 8: protos.perception.graph_config.v1.GraphConfig.state:type_name -> protos.perception.graph_config.v1.StateConfig
	7,  // 9: protos.perception.graph_config.v1.GraphConfig.assume_role:type_name -> protos.perception.graph_config.v1.AssumeRoleConfig
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_protos_perception_graph_config_v1_graph_params_proto_init() }
func file_protos_perception_graph_config_v1_graph_params_proto_init() {
	if File_protos_perception_graph_config_v1_graph_params_proto != nil {
		return
	}
	file_protos_perception_graph_config_v1_incident_machine_params_proto_init()
	file_protos_perception_graph_config_v1_perception_params_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Camera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncidentPublisherConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncidentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporalConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherStateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssumeRoleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_protos_perception_graph_config_v1_graph_params_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_perception_graph_config_v1_graph_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_perception_graph_config_v1_graph_params_proto_goTypes,
		DependencyIndexes: file_protos_perception_graph_config_v1_graph_params_proto_depIdxs,
		MessageInfos:      file_protos_perception_graph_config_v1_graph_params_proto_msgTypes,
	}.Build()
	File_protos_perception_graph_config_v1_graph_params_proto = out.File
	file_protos_perception_graph_config_v1_graph_params_proto_rawDesc = nil
	file_protos_perception_graph_config_v1_graph_params_proto_goTypes = nil
	file_protos_perception_graph_config_v1_graph_params_proto_depIdxs = nil
}
