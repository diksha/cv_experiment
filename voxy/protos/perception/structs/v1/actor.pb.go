// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: protos/perception/structs/v1/actor.proto

package structspb

import (
	v1 "github.com/voxel-ai/voxel/protos/perception/types/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActorCategory int32

const (
	ActorCategory_ACTOR_CATEGORY_UNKNOWN               ActorCategory = 0
	ActorCategory_ACTOR_CATEGORY_PERSON                ActorCategory = 1
	ActorCategory_ACTOR_CATEGORY_PIT                   ActorCategory = 2
	ActorCategory_ACTOR_CATEGORY_DOOR                  ActorCategory = 3
	ActorCategory_ACTOR_CATEGORY_HARD_HAT              ActorCategory = 4
	ActorCategory_ACTOR_CATEGORY_SAFETY_VEST           ActorCategory = 5
	ActorCategory_ACTOR_CATEGORY_BARE_CHEST            ActorCategory = 6
	ActorCategory_ACTOR_CATEGORY_BARE_HEAD             ActorCategory = 7
	ActorCategory_ACTOR_CATEGORY_INTERSECTION          ActorCategory = 8
	ActorCategory_ACTOR_CATEGORY_AISLE_END             ActorCategory = 9
	ActorCategory_ACTOR_CATEGORY_TRUCK                 ActorCategory = 10
	ActorCategory_ACTOR_CATEGORY_VEHICLE               ActorCategory = 11
	ActorCategory_ACTOR_CATEGORY_TRAILER               ActorCategory = 12
	ActorCategory_ACTOR_CATEGORY_BIKE                  ActorCategory = 13
	ActorCategory_ACTOR_CATEGORY_BUS                   ActorCategory = 14
	ActorCategory_ACTOR_CATEGORY_MOTION_DETECTION_ZONE ActorCategory = 15
	ActorCategory_ACTOR_CATEGORY_DRIVING_AREA          ActorCategory = 16
	ActorCategory_ACTOR_CATEGORY_NO_PED_ZONE           ActorCategory = 17
	ActorCategory_ACTOR_CATEGORY_SPILL                 ActorCategory = 18
	ActorCategory_ACTOR_CATEGORY_COVERED_HEAD          ActorCategory = 19
	ActorCategory_ACTOR_CATEGORY_PIT_V2                ActorCategory = 22
	ActorCategory_ACTOR_CATEGORY_PERSON_V2             ActorCategory = 23
	ActorCategory_ACTOR_CATEGORY_OBSTRUCTION           ActorCategory = 25
)

// Enum value maps for ActorCategory.
var (
	ActorCategory_name = map[int32]string{
		0:  "ACTOR_CATEGORY_UNKNOWN",
		1:  "ACTOR_CATEGORY_PERSON",
		2:  "ACTOR_CATEGORY_PIT",
		3:  "ACTOR_CATEGORY_DOOR",
		4:  "ACTOR_CATEGORY_HARD_HAT",
		5:  "ACTOR_CATEGORY_SAFETY_VEST",
		6:  "ACTOR_CATEGORY_BARE_CHEST",
		7:  "ACTOR_CATEGORY_BARE_HEAD",
		8:  "ACTOR_CATEGORY_INTERSECTION",
		9:  "ACTOR_CATEGORY_AISLE_END",
		10: "ACTOR_CATEGORY_TRUCK",
		11: "ACTOR_CATEGORY_VEHICLE",
		12: "ACTOR_CATEGORY_TRAILER",
		13: "ACTOR_CATEGORY_BIKE",
		14: "ACTOR_CATEGORY_BUS",
		15: "ACTOR_CATEGORY_MOTION_DETECTION_ZONE",
		16: "ACTOR_CATEGORY_DRIVING_AREA",
		17: "ACTOR_CATEGORY_NO_PED_ZONE",
		18: "ACTOR_CATEGORY_SPILL",
		19: "ACTOR_CATEGORY_COVERED_HEAD",
		22: "ACTOR_CATEGORY_PIT_V2",
		23: "ACTOR_CATEGORY_PERSON_V2",
		25: "ACTOR_CATEGORY_OBSTRUCTION",
	}
	ActorCategory_value = map[string]int32{
		"ACTOR_CATEGORY_UNKNOWN":               0,
		"ACTOR_CATEGORY_PERSON":                1,
		"ACTOR_CATEGORY_PIT":                   2,
		"ACTOR_CATEGORY_DOOR":                  3,
		"ACTOR_CATEGORY_HARD_HAT":              4,
		"ACTOR_CATEGORY_SAFETY_VEST":           5,
		"ACTOR_CATEGORY_BARE_CHEST":            6,
		"ACTOR_CATEGORY_BARE_HEAD":             7,
		"ACTOR_CATEGORY_INTERSECTION":          8,
		"ACTOR_CATEGORY_AISLE_END":             9,
		"ACTOR_CATEGORY_TRUCK":                 10,
		"ACTOR_CATEGORY_VEHICLE":               11,
		"ACTOR_CATEGORY_TRAILER":               12,
		"ACTOR_CATEGORY_BIKE":                  13,
		"ACTOR_CATEGORY_BUS":                   14,
		"ACTOR_CATEGORY_MOTION_DETECTION_ZONE": 15,
		"ACTOR_CATEGORY_DRIVING_AREA":          16,
		"ACTOR_CATEGORY_NO_PED_ZONE":           17,
		"ACTOR_CATEGORY_SPILL":                 18,
		"ACTOR_CATEGORY_COVERED_HEAD":          19,
		"ACTOR_CATEGORY_PIT_V2":                22,
		"ACTOR_CATEGORY_PERSON_V2":             23,
		"ACTOR_CATEGORY_OBSTRUCTION":           25,
	}
)

func (x ActorCategory) Enum() *ActorCategory {
	p := new(ActorCategory)
	*p = x
	return p
}

func (x ActorCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActorCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[0].Descriptor()
}

func (ActorCategory) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[0]
}

func (x ActorCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActorCategory.Descriptor instead.
func (ActorCategory) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{0}
}

type ActivityType int32

const (
	ActivityType_ACTIVITY_TYPE_UNSPECIFIED ActivityType = 0
	ActivityType_ACTIVITY_TYPE_LIFTING     ActivityType = 1
	ActivityType_ACTIVITY_TYPE_REACHING    ActivityType = 2
)

// Enum value maps for ActivityType.
var (
	ActivityType_name = map[int32]string{
		0: "ACTIVITY_TYPE_UNSPECIFIED",
		1: "ACTIVITY_TYPE_LIFTING",
		2: "ACTIVITY_TYPE_REACHING",
	}
	ActivityType_value = map[string]int32{
		"ACTIVITY_TYPE_UNSPECIFIED": 0,
		"ACTIVITY_TYPE_LIFTING":     1,
		"ACTIVITY_TYPE_REACHING":    2,
	}
)

func (x ActivityType) Enum() *ActivityType {
	p := new(ActivityType)
	*p = x
	return p
}

func (x ActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[1].Descriptor()
}

func (ActivityType) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[1]
}

func (x ActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityType.Descriptor instead.
func (ActivityType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{1}
}

type PostureType int32

const (
	PostureType_POSTURE_TYPE_UNSPECIFIED PostureType = 0
	PostureType_POSTURE_TYPE_GOOD        PostureType = 1
	PostureType_POSTURE_TYPE_BAD         PostureType = 2
)

// Enum value maps for PostureType.
var (
	PostureType_name = map[int32]string{
		0: "POSTURE_TYPE_UNSPECIFIED",
		1: "POSTURE_TYPE_GOOD",
		2: "POSTURE_TYPE_BAD",
	}
	PostureType_value = map[string]int32{
		"POSTURE_TYPE_UNSPECIFIED": 0,
		"POSTURE_TYPE_GOOD":        1,
		"POSTURE_TYPE_BAD":         2,
	}
)

func (x PostureType) Enum() *PostureType {
	p := new(PostureType)
	*p = x
	return p
}

func (x PostureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostureType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[2].Descriptor()
}

func (PostureType) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[2]
}

func (x PostureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostureType.Descriptor instead.
func (PostureType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{2}
}

type DoorState int32

const (
	DoorState_DOOR_STATE_UNSPECIFIED    DoorState = 0
	DoorState_DOOR_STATE_FULLY_CLOSED   DoorState = 1
	DoorState_DOOR_STATE_FULLY_OPEN     DoorState = 2
	DoorState_DOOR_STATE_PARTIALLY_OPEN DoorState = 3
)

// Enum value maps for DoorState.
var (
	DoorState_name = map[int32]string{
		0: "DOOR_STATE_UNSPECIFIED",
		1: "DOOR_STATE_FULLY_CLOSED",
		2: "DOOR_STATE_FULLY_OPEN",
		3: "DOOR_STATE_PARTIALLY_OPEN",
	}
	DoorState_value = map[string]int32{
		"DOOR_STATE_UNSPECIFIED":    0,
		"DOOR_STATE_FULLY_CLOSED":   1,
		"DOOR_STATE_FULLY_OPEN":     2,
		"DOOR_STATE_PARTIALLY_OPEN": 3,
	}
)

func (x DoorState) Enum() *DoorState {
	p := new(DoorState)
	*p = x
	return p
}

func (x DoorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoorState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[3].Descriptor()
}

func (DoorState) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[3]
}

func (x DoorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoorState.Descriptor instead.
func (DoorState) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{3}
}

type MotionDetectionZoneState int32

const (
	MotionDetectionZoneState_MOTION_DETECTION_ZONE_STATE_UNSPECIFIED MotionDetectionZoneState = 0
	MotionDetectionZoneState_MOTION_DETECTION_ZONE_STATE_FROZEN      MotionDetectionZoneState = 1
	MotionDetectionZoneState_MOTION_DETECTION_ZONE_STATE_MOTION      MotionDetectionZoneState = 2
	MotionDetectionZoneState_MOTION_DETECTION_ZONE_STATE_UNKNOWN     MotionDetectionZoneState = 50
)

// Enum value maps for MotionDetectionZoneState.
var (
	MotionDetectionZoneState_name = map[int32]string{
		0:  "MOTION_DETECTION_ZONE_STATE_UNSPECIFIED",
		1:  "MOTION_DETECTION_ZONE_STATE_FROZEN",
		2:  "MOTION_DETECTION_ZONE_STATE_MOTION",
		50: "MOTION_DETECTION_ZONE_STATE_UNKNOWN",
	}
	MotionDetectionZoneState_value = map[string]int32{
		"MOTION_DETECTION_ZONE_STATE_UNSPECIFIED": 0,
		"MOTION_DETECTION_ZONE_STATE_FROZEN":      1,
		"MOTION_DETECTION_ZONE_STATE_MOTION":      2,
		"MOTION_DETECTION_ZONE_STATE_UNKNOWN":     50,
	}
)

func (x MotionDetectionZoneState) Enum() *MotionDetectionZoneState {
	p := new(MotionDetectionZoneState)
	*p = x
	return p
}

func (x MotionDetectionZoneState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MotionDetectionZoneState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[4].Descriptor()
}

func (MotionDetectionZoneState) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[4]
}

func (x MotionDetectionZoneState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MotionDetectionZoneState.Descriptor instead.
func (MotionDetectionZoneState) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{4}
}

type HeadCoveringType int32

const (
	HeadCoveringType_HEAD_COVERING_UNKNOWN          HeadCoveringType = 0
	HeadCoveringType_HEAD_COVERING_LEGACY_BARE_HEAD HeadCoveringType = 1
	HeadCoveringType_HEAD_COVERING_BARE_HEAD        HeadCoveringType = 2
	HeadCoveringType_HEAD_COVERING_COVERED_HEAD     HeadCoveringType = 3
	HeadCoveringType_HEAD_COVERING_HARD_HAT         HeadCoveringType = 4
)

// Enum value maps for HeadCoveringType.
var (
	HeadCoveringType_name = map[int32]string{
		0: "HEAD_COVERING_UNKNOWN",
		1: "HEAD_COVERING_LEGACY_BARE_HEAD",
		2: "HEAD_COVERING_BARE_HEAD",
		3: "HEAD_COVERING_COVERED_HEAD",
		4: "HEAD_COVERING_HARD_HAT",
	}
	HeadCoveringType_value = map[string]int32{
		"HEAD_COVERING_UNKNOWN":          0,
		"HEAD_COVERING_LEGACY_BARE_HEAD": 1,
		"HEAD_COVERING_BARE_HEAD":        2,
		"HEAD_COVERING_COVERED_HEAD":     3,
		"HEAD_COVERING_HARD_HAT":         4,
	}
)

func (x HeadCoveringType) Enum() *HeadCoveringType {
	p := new(HeadCoveringType)
	*p = x
	return p
}

func (x HeadCoveringType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeadCoveringType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[5].Descriptor()
}

func (HeadCoveringType) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[5]
}

func (x HeadCoveringType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeadCoveringType.Descriptor instead.
func (HeadCoveringType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{5}
}

type PoseKeypointType int32

const (
	PoseKeypointType_POSE_KEYPOINT_TYPE_UNSPECIFIED     PoseKeypointType = 0
	PoseKeypointType_POSE_KEYPOINT_TYPE_NOSE            PoseKeypointType = 1
	PoseKeypointType_POSE_KEYPOINT_TYPE_NECK            PoseKeypointType = 2
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_SHOULDER  PoseKeypointType = 3
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_ELBOW     PoseKeypointType = 4
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_WRIST     PoseKeypointType = 5
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_SHOULDER   PoseKeypointType = 6
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_ELBOW      PoseKeypointType = 7
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_WRIST      PoseKeypointType = 8
	PoseKeypointType_POSE_KEYPOINT_TYPE_MID_HIP         PoseKeypointType = 9
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_HIP       PoseKeypointType = 10
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_KNEE      PoseKeypointType = 11
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_ANKLE     PoseKeypointType = 12
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_HIP        PoseKeypointType = 13
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_KNEE       PoseKeypointType = 14
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_ANKLE      PoseKeypointType = 15
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_EYE       PoseKeypointType = 16
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_EYE        PoseKeypointType = 17
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_EAR       PoseKeypointType = 18
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_EAR        PoseKeypointType = 19
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_BIG_TOE    PoseKeypointType = 20
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_SMALL_TOE  PoseKeypointType = 21
	PoseKeypointType_POSE_KEYPOINT_TYPE_LEFT_HEEL       PoseKeypointType = 22
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_BIG_TOE   PoseKeypointType = 23
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_SMALL_TOE PoseKeypointType = 24
	PoseKeypointType_POSE_KEYPOINT_TYPE_RIGHT_HEEL      PoseKeypointType = 25
)

// Enum value maps for PoseKeypointType.
var (
	PoseKeypointType_name = map[int32]string{
		0:  "POSE_KEYPOINT_TYPE_UNSPECIFIED",
		1:  "POSE_KEYPOINT_TYPE_NOSE",
		2:  "POSE_KEYPOINT_TYPE_NECK",
		3:  "POSE_KEYPOINT_TYPE_RIGHT_SHOULDER",
		4:  "POSE_KEYPOINT_TYPE_RIGHT_ELBOW",
		5:  "POSE_KEYPOINT_TYPE_RIGHT_WRIST",
		6:  "POSE_KEYPOINT_TYPE_LEFT_SHOULDER",
		7:  "POSE_KEYPOINT_TYPE_LEFT_ELBOW",
		8:  "POSE_KEYPOINT_TYPE_LEFT_WRIST",
		9:  "POSE_KEYPOINT_TYPE_MID_HIP",
		10: "POSE_KEYPOINT_TYPE_RIGHT_HIP",
		11: "POSE_KEYPOINT_TYPE_RIGHT_KNEE",
		12: "POSE_KEYPOINT_TYPE_RIGHT_ANKLE",
		13: "POSE_KEYPOINT_TYPE_LEFT_HIP",
		14: "POSE_KEYPOINT_TYPE_LEFT_KNEE",
		15: "POSE_KEYPOINT_TYPE_LEFT_ANKLE",
		16: "POSE_KEYPOINT_TYPE_RIGHT_EYE",
		17: "POSE_KEYPOINT_TYPE_LEFT_EYE",
		18: "POSE_KEYPOINT_TYPE_RIGHT_EAR",
		19: "POSE_KEYPOINT_TYPE_LEFT_EAR",
		20: "POSE_KEYPOINT_TYPE_LEFT_BIG_TOE",
		21: "POSE_KEYPOINT_TYPE_LEFT_SMALL_TOE",
		22: "POSE_KEYPOINT_TYPE_LEFT_HEEL",
		23: "POSE_KEYPOINT_TYPE_RIGHT_BIG_TOE",
		24: "POSE_KEYPOINT_TYPE_RIGHT_SMALL_TOE",
		25: "POSE_KEYPOINT_TYPE_RIGHT_HEEL",
	}
	PoseKeypointType_value = map[string]int32{
		"POSE_KEYPOINT_TYPE_UNSPECIFIED":     0,
		"POSE_KEYPOINT_TYPE_NOSE":            1,
		"POSE_KEYPOINT_TYPE_NECK":            2,
		"POSE_KEYPOINT_TYPE_RIGHT_SHOULDER":  3,
		"POSE_KEYPOINT_TYPE_RIGHT_ELBOW":     4,
		"POSE_KEYPOINT_TYPE_RIGHT_WRIST":     5,
		"POSE_KEYPOINT_TYPE_LEFT_SHOULDER":   6,
		"POSE_KEYPOINT_TYPE_LEFT_ELBOW":      7,
		"POSE_KEYPOINT_TYPE_LEFT_WRIST":      8,
		"POSE_KEYPOINT_TYPE_MID_HIP":         9,
		"POSE_KEYPOINT_TYPE_RIGHT_HIP":       10,
		"POSE_KEYPOINT_TYPE_RIGHT_KNEE":      11,
		"POSE_KEYPOINT_TYPE_RIGHT_ANKLE":     12,
		"POSE_KEYPOINT_TYPE_LEFT_HIP":        13,
		"POSE_KEYPOINT_TYPE_LEFT_KNEE":       14,
		"POSE_KEYPOINT_TYPE_LEFT_ANKLE":      15,
		"POSE_KEYPOINT_TYPE_RIGHT_EYE":       16,
		"POSE_KEYPOINT_TYPE_LEFT_EYE":        17,
		"POSE_KEYPOINT_TYPE_RIGHT_EAR":       18,
		"POSE_KEYPOINT_TYPE_LEFT_EAR":        19,
		"POSE_KEYPOINT_TYPE_LEFT_BIG_TOE":    20,
		"POSE_KEYPOINT_TYPE_LEFT_SMALL_TOE":  21,
		"POSE_KEYPOINT_TYPE_LEFT_HEEL":       22,
		"POSE_KEYPOINT_TYPE_RIGHT_BIG_TOE":   23,
		"POSE_KEYPOINT_TYPE_RIGHT_SMALL_TOE": 24,
		"POSE_KEYPOINT_TYPE_RIGHT_HEEL":      25,
	}
)

func (x PoseKeypointType) Enum() *PoseKeypointType {
	p := new(PoseKeypointType)
	*p = x
	return p
}

func (x PoseKeypointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoseKeypointType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[6].Descriptor()
}

func (PoseKeypointType) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[6]
}

func (x PoseKeypointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoseKeypointType.Descriptor instead.
func (PoseKeypointType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{6}
}

type LimbType int32

const (
	LimbType_LIMB_TYPE_UNSPECIFIED LimbType = 0
	LimbType_LIMB_TYPE_NECK        LimbType = 1
	LimbType_LIMB_TYPE_UPPER_ARMS  LimbType = 2
	LimbType_LIMB_TYPE_LOWER_ARMS  LimbType = 3
	LimbType_LIMB_TYPE_TRUNK       LimbType = 4
	LimbType_LIMB_TYPE_LEGS        LimbType = 5
)

// Enum value maps for LimbType.
var (
	LimbType_name = map[int32]string{
		0: "LIMB_TYPE_UNSPECIFIED",
		1: "LIMB_TYPE_NECK",
		2: "LIMB_TYPE_UPPER_ARMS",
		3: "LIMB_TYPE_LOWER_ARMS",
		4: "LIMB_TYPE_TRUNK",
		5: "LIMB_TYPE_LEGS",
	}
	LimbType_value = map[string]int32{
		"LIMB_TYPE_UNSPECIFIED": 0,
		"LIMB_TYPE_NECK":        1,
		"LIMB_TYPE_UPPER_ARMS":  2,
		"LIMB_TYPE_LOWER_ARMS":  3,
		"LIMB_TYPE_TRUNK":       4,
		"LIMB_TYPE_LEGS":        5,
	}
)

func (x LimbType) Enum() *LimbType {
	p := new(LimbType)
	*p = x
	return p
}

func (x LimbType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimbType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[7].Descriptor()
}

func (LimbType) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[7]
}

func (x LimbType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimbType.Descriptor instead.
func (LimbType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{7}
}

type PitType int32

const (
	PitType_PIT_TYPE_UNSPECIFIED PitType = 0
	PitType_PIT_TYPE_FORKLIFT    PitType = 1
)

// Enum value maps for PitType.
var (
	PitType_name = map[int32]string{
		0: "PIT_TYPE_UNSPECIFIED",
		1: "PIT_TYPE_FORKLIFT",
	}
	PitType_value = map[string]int32{
		"PIT_TYPE_UNSPECIFIED": 0,
		"PIT_TYPE_FORKLIFT":    1,
	}
)

func (x PitType) Enum() *PitType {
	p := new(PitType)
	*p = x
	return p
}

func (x PitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PitType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[8].Descriptor()
}

func (PitType) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[8]
}

func (x PitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PitType.Descriptor instead.
func (PitType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{8}
}

type DoorType int32

const (
	DoorType_DOOR_TYPE_UNSPECIFIED DoorType = 0
	DoorType_DOOR_TYPE_DOCK        DoorType = 1
	DoorType_DOOR_TYPE_FREEZER     DoorType = 2
	DoorType_DOOR_TYPE_EXIT        DoorType = 3
	DoorType_DOOR_TYPE_CURTAIN     DoorType = 4
)

// Enum value maps for DoorType.
var (
	DoorType_name = map[int32]string{
		0: "DOOR_TYPE_UNSPECIFIED",
		1: "DOOR_TYPE_DOCK",
		2: "DOOR_TYPE_FREEZER",
		3: "DOOR_TYPE_EXIT",
		4: "DOOR_TYPE_CURTAIN",
	}
	DoorType_value = map[string]int32{
		"DOOR_TYPE_UNSPECIFIED": 0,
		"DOOR_TYPE_DOCK":        1,
		"DOOR_TYPE_FREEZER":     2,
		"DOOR_TYPE_EXIT":        3,
		"DOOR_TYPE_CURTAIN":     4,
	}
)

func (x DoorType) Enum() *DoorType {
	p := new(DoorType)
	*p = x
	return p
}

func (x DoorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoorType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[9].Descriptor()
}

func (DoorType) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[9]
}

func (x DoorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoorType.Descriptor instead.
func (DoorType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{9}
}

type DoorOrientation int32

const (
	DoorOrientation_DOOR_ORIENTATION_UNSPECIFIED DoorOrientation = 0
	DoorOrientation_DOOR_ORIENTATION_SIDE_DOOR   DoorOrientation = 1
	DoorOrientation_DOOR_ORIENTATION_FRONT_DOOR  DoorOrientation = 2
)

// Enum value maps for DoorOrientation.
var (
	DoorOrientation_name = map[int32]string{
		0: "DOOR_ORIENTATION_UNSPECIFIED",
		1: "DOOR_ORIENTATION_SIDE_DOOR",
		2: "DOOR_ORIENTATION_FRONT_DOOR",
	}
	DoorOrientation_value = map[string]int32{
		"DOOR_ORIENTATION_UNSPECIFIED": 0,
		"DOOR_ORIENTATION_SIDE_DOOR":   1,
		"DOOR_ORIENTATION_FRONT_DOOR":  2,
	}
)

func (x DoorOrientation) Enum() *DoorOrientation {
	p := new(DoorOrientation)
	*p = x
	return p
}

func (x DoorOrientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoorOrientation) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perception_structs_v1_actor_proto_enumTypes[10].Descriptor()
}

func (DoorOrientation) Type() protoreflect.EnumType {
	return &file_protos_perception_structs_v1_actor_proto_enumTypes[10]
}

func (x DoorOrientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoorOrientation.Descriptor instead.
func (DoorOrientation) EnumDescriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{10}
}

type Limb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JointStart            *PoseKeypointType `protobuf:"varint,1,opt,name=joint_start,json=jointStart,proto3,enum=protos.perception.structs.v1.PoseKeypointType,oneof" json:"joint_start,omitempty"`
	JointEnd              *PoseKeypointType `protobuf:"varint,2,opt,name=joint_end,json=jointEnd,proto3,enum=protos.perception.structs.v1.PoseKeypointType,oneof" json:"joint_end,omitempty"`
	LimbType              *LimbType         `protobuf:"varint,3,opt,name=limb_type,json=limbType,proto3,enum=protos.perception.structs.v1.LimbType,oneof" json:"limb_type,omitempty"`
	ConfidenceProbability *float32          `protobuf:"fixed32,4,opt,name=confidence_probability,json=confidenceProbability,proto3,oneof" json:"confidence_probability,omitempty"`
}

func (x *Limb) Reset() {
	*x = Limb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limb) ProtoMessage() {}

func (x *Limb) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limb.ProtoReflect.Descriptor instead.
func (*Limb) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{0}
}

func (x *Limb) GetJointStart() PoseKeypointType {
	if x != nil && x.JointStart != nil {
		return *x.JointStart
	}
	return PoseKeypointType_POSE_KEYPOINT_TYPE_UNSPECIFIED
}

func (x *Limb) GetJointEnd() PoseKeypointType {
	if x != nil && x.JointEnd != nil {
		return *x.JointEnd
	}
	return PoseKeypointType_POSE_KEYPOINT_TYPE_UNSPECIFIED
}

func (x *Limb) GetLimbType() LimbType {
	if x != nil && x.LimbType != nil {
		return *x.LimbType
	}
	return LimbType_LIMB_TYPE_UNSPECIFIED
}

func (x *Limb) GetConfidenceProbability() float32 {
	if x != nil && x.ConfidenceProbability != nil {
		return *x.ConfidenceProbability
	}
	return 0
}

type Skeleton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limbs []*Limb `protobuf:"bytes,1,rep,name=limbs,proto3" json:"limbs,omitempty"`
}

func (x *Skeleton) Reset() {
	*x = Skeleton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skeleton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skeleton) ProtoMessage() {}

func (x *Skeleton) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skeleton.ProtoReflect.Descriptor instead.
func (*Skeleton) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{1}
}

func (x *Skeleton) GetLimbs() []*Limb {
	if x != nil {
		return x.Limbs
	}
	return nil
}

type RebaScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *string `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Neck      *uint32 `protobuf:"varint,2,opt,name=neck,proto3,oneof" json:"neck,omitempty"`
	UpperArms *uint32 `protobuf:"varint,3,opt,name=upper_arms,json=upperArms,proto3,oneof" json:"upper_arms,omitempty"`
	LowerArms *uint32 `protobuf:"varint,4,opt,name=lower_arms,json=lowerArms,proto3,oneof" json:"lower_arms,omitempty"`
	Trunk     *uint32 `protobuf:"varint,5,opt,name=trunk,proto3,oneof" json:"trunk,omitempty"`
	Legs      *uint32 `protobuf:"varint,6,opt,name=legs,proto3,oneof" json:"legs,omitempty"`
	TableA    *uint32 `protobuf:"varint,7,opt,name=table_a,json=tableA,proto3,oneof" json:"table_a,omitempty"`
	TableB    *uint32 `protobuf:"varint,8,opt,name=table_b,json=tableB,proto3,oneof" json:"table_b,omitempty"`
	TableC    *uint32 `protobuf:"varint,9,opt,name=table_c,json=tableC,proto3,oneof" json:"table_c,omitempty"`
}

func (x *RebaScores) Reset() {
	*x = RebaScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebaScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebaScores) ProtoMessage() {}

func (x *RebaScores) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebaScores.ProtoReflect.Descriptor instead.
func (*RebaScores) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{2}
}

func (x *RebaScores) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *RebaScores) GetNeck() uint32 {
	if x != nil && x.Neck != nil {
		return *x.Neck
	}
	return 0
}

func (x *RebaScores) GetUpperArms() uint32 {
	if x != nil && x.UpperArms != nil {
		return *x.UpperArms
	}
	return 0
}

func (x *RebaScores) GetLowerArms() uint32 {
	if x != nil && x.LowerArms != nil {
		return *x.LowerArms
	}
	return 0
}

func (x *RebaScores) GetTrunk() uint32 {
	if x != nil && x.Trunk != nil {
		return *x.Trunk
	}
	return 0
}

func (x *RebaScores) GetLegs() uint32 {
	if x != nil && x.Legs != nil {
		return *x.Legs
	}
	return 0
}

func (x *RebaScores) GetTableA() uint32 {
	if x != nil && x.TableA != nil {
		return *x.TableA
	}
	return 0
}

func (x *RebaScores) GetTableB() uint32 {
	if x != nil && x.TableB != nil {
		return *x.TableB
	}
	return 0
}

func (x *RebaScores) GetTableC() uint32 {
	if x != nil && x.TableC != nil {
		return *x.TableC
	}
	return 0
}

type ErgonomicSeverityMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scores:
	//
	//	*ErgonomicSeverityMetrics_RebaScores
	Scores isErgonomicSeverityMetrics_Scores `protobuf_oneof:"scores"`
}

func (x *ErgonomicSeverityMetrics) Reset() {
	*x = ErgonomicSeverityMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErgonomicSeverityMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErgonomicSeverityMetrics) ProtoMessage() {}

func (x *ErgonomicSeverityMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErgonomicSeverityMetrics.ProtoReflect.Descriptor instead.
func (*ErgonomicSeverityMetrics) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{3}
}

func (m *ErgonomicSeverityMetrics) GetScores() isErgonomicSeverityMetrics_Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (x *ErgonomicSeverityMetrics) GetRebaScores() *RebaScores {
	if x, ok := x.GetScores().(*ErgonomicSeverityMetrics_RebaScores); ok {
		return x.RebaScores
	}
	return nil
}

type isErgonomicSeverityMetrics_Scores interface {
	isErgonomicSeverityMetrics_Scores()
}

type ErgonomicSeverityMetrics_RebaScores struct {
	RebaScores *RebaScores `protobuf:"bytes,1,opt,name=reba_scores,json=rebaScores,proto3,oneof"`
}

func (*ErgonomicSeverityMetrics_RebaScores) isErgonomicSeverityMetrics_Scores() {}

type PersonMutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pose                     *v1.Pose                  `protobuf:"bytes,1,opt,name=pose,proto3,oneof" json:"pose,omitempty"`
	Activity                 map[string]string         `protobuf:"bytes,2,rep,name=activity,proto3" json:"activity,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsWearingHardHat         *bool                     `protobuf:"varint,3,opt,name=is_wearing_hard_hat,json=isWearingHardHat,proto3,oneof" json:"is_wearing_hard_hat,omitempty"`
	IsWearingSafetyVest      *bool                     `protobuf:"varint,4,opt,name=is_wearing_safety_vest,json=isWearingSafetyVest,proto3,oneof" json:"is_wearing_safety_vest,omitempty"`
	DistanceToCameraMeters   *float32                  `protobuf:"fixed32,5,opt,name=distance_to_camera_meters,json=distanceToCameraMeters,proto3,oneof" json:"distance_to_camera_meters,omitempty"`
	IsCarryingObject         *bool                     `protobuf:"varint,6,opt,name=is_carrying_object,json=isCarryingObject,proto3,oneof" json:"is_carrying_object,omitempty"`
	HeadCoveringType         *HeadCoveringType         `protobuf:"varint,7,opt,name=head_covering_type,json=headCoveringType,proto3,enum=protos.perception.structs.v1.HeadCoveringType,oneof" json:"head_covering_type,omitempty"`
	Skeleton                 *Skeleton                 `protobuf:"bytes,8,opt,name=skeleton,proto3,oneof" json:"skeleton,omitempty"`
	ErgonomicSeverityMetrics *ErgonomicSeverityMetrics `protobuf:"bytes,9,opt,name=ergonomic_severity_metrics,json=ergonomicSeverityMetrics,proto3,oneof" json:"ergonomic_severity_metrics,omitempty"`
}

func (x *PersonMutableAttributes) Reset() {
	*x = PersonMutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonMutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonMutableAttributes) ProtoMessage() {}

func (x *PersonMutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonMutableAttributes.ProtoReflect.Descriptor instead.
func (*PersonMutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{4}
}

func (x *PersonMutableAttributes) GetPose() *v1.Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *PersonMutableAttributes) GetActivity() map[string]string {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *PersonMutableAttributes) GetIsWearingHardHat() bool {
	if x != nil && x.IsWearingHardHat != nil {
		return *x.IsWearingHardHat
	}
	return false
}

func (x *PersonMutableAttributes) GetIsWearingSafetyVest() bool {
	if x != nil && x.IsWearingSafetyVest != nil {
		return *x.IsWearingSafetyVest
	}
	return false
}

func (x *PersonMutableAttributes) GetDistanceToCameraMeters() float32 {
	if x != nil && x.DistanceToCameraMeters != nil {
		return *x.DistanceToCameraMeters
	}
	return 0
}

func (x *PersonMutableAttributes) GetIsCarryingObject() bool {
	if x != nil && x.IsCarryingObject != nil {
		return *x.IsCarryingObject
	}
	return false
}

func (x *PersonMutableAttributes) GetHeadCoveringType() HeadCoveringType {
	if x != nil && x.HeadCoveringType != nil {
		return *x.HeadCoveringType
	}
	return HeadCoveringType_HEAD_COVERING_UNKNOWN
}

func (x *PersonMutableAttributes) GetSkeleton() *Skeleton {
	if x != nil {
		return x.Skeleton
	}
	return nil
}

func (x *PersonMutableAttributes) GetErgonomicSeverityMetrics() *ErgonomicSeverityMetrics {
	if x != nil {
		return x.ErgonomicSeverityMetrics
	}
	return nil
}

type PitMutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHumanOperating                    *bool                         `protobuf:"varint,1,opt,name=is_human_operating,json=isHumanOperating,proto3,oneof" json:"is_human_operating,omitempty"`
	IsLoaded                            *bool                         `protobuf:"varint,2,opt,name=is_loaded,json=isLoaded,proto3,oneof" json:"is_loaded,omitempty"`
	IsForksRaised                       *bool                         `protobuf:"varint,3,opt,name=is_forks_raised,json=isForksRaised,proto3,oneof" json:"is_forks_raised,omitempty"`
	IsOperatingPit                      *bool                         `protobuf:"varint,4,opt,name=is_operating_pit,json=isOperatingPit,proto3,oneof" json:"is_operating_pit,omitempty"`
	PixelVelocity                       *v1.VelocityPixelsPerSecond   `protobuf:"bytes,5,opt,name=pixel_velocity,json=pixelVelocity,proto3,oneof" json:"pixel_velocity,omitempty"`
	NormalizedPixelSpeedPixelsPerSecond *float32                      `protobuf:"fixed32,6,opt,name=normalized_pixel_speed_pixels_per_second,json=normalizedPixelSpeedPixelsPerSecond,proto3,oneof" json:"normalized_pixel_speed_pixels_per_second,omitempty"`
	WorldVelocity                       *v1.Velocity2DMetersPerSecond `protobuf:"bytes,7,opt,name=world_velocity,json=worldVelocity,proto3,oneof" json:"world_velocity,omitempty"`
	Position                            *v1.Position3DMeters          `protobuf:"bytes,8,opt,name=position,proto3,oneof" json:"position,omitempty"`
	DistanceToCameraMeters              *float32                      `protobuf:"fixed32,9,opt,name=distance_to_camera_meters,json=distanceToCameraMeters,proto3,oneof" json:"distance_to_camera_meters,omitempty"`
}

func (x *PitMutableAttributes) Reset() {
	*x = PitMutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PitMutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PitMutableAttributes) ProtoMessage() {}

func (x *PitMutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PitMutableAttributes.ProtoReflect.Descriptor instead.
func (*PitMutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{5}
}

func (x *PitMutableAttributes) GetIsHumanOperating() bool {
	if x != nil && x.IsHumanOperating != nil {
		return *x.IsHumanOperating
	}
	return false
}

func (x *PitMutableAttributes) GetIsLoaded() bool {
	if x != nil && x.IsLoaded != nil {
		return *x.IsLoaded
	}
	return false
}

func (x *PitMutableAttributes) GetIsForksRaised() bool {
	if x != nil && x.IsForksRaised != nil {
		return *x.IsForksRaised
	}
	return false
}

func (x *PitMutableAttributes) GetIsOperatingPit() bool {
	if x != nil && x.IsOperatingPit != nil {
		return *x.IsOperatingPit
	}
	return false
}

func (x *PitMutableAttributes) GetPixelVelocity() *v1.VelocityPixelsPerSecond {
	if x != nil {
		return x.PixelVelocity
	}
	return nil
}

func (x *PitMutableAttributes) GetNormalizedPixelSpeedPixelsPerSecond() float32 {
	if x != nil && x.NormalizedPixelSpeedPixelsPerSecond != nil {
		return *x.NormalizedPixelSpeedPixelsPerSecond
	}
	return 0
}

func (x *PitMutableAttributes) GetWorldVelocity() *v1.Velocity2DMetersPerSecond {
	if x != nil {
		return x.WorldVelocity
	}
	return nil
}

func (x *PitMutableAttributes) GetPosition() *v1.Position3DMeters {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PitMutableAttributes) GetDistanceToCameraMeters() float32 {
	if x != nil && x.DistanceToCameraMeters != nil {
		return *x.DistanceToCameraMeters
	}
	return 0
}

type DoorStateProbability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenProbability          float32 `protobuf:"fixed32,1,opt,name=open_probability,json=openProbability,proto3" json:"open_probability,omitempty"`
	PartiallyOpenProbability float32 `protobuf:"fixed32,2,opt,name=partially_open_probability,json=partiallyOpenProbability,proto3" json:"partially_open_probability,omitempty"`
	ClosedProbability        float32 `protobuf:"fixed32,3,opt,name=closed_probability,json=closedProbability,proto3" json:"closed_probability,omitempty"`
}

func (x *DoorStateProbability) Reset() {
	*x = DoorStateProbability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorStateProbability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorStateProbability) ProtoMessage() {}

func (x *DoorStateProbability) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorStateProbability.ProtoReflect.Descriptor instead.
func (*DoorStateProbability) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{6}
}

func (x *DoorStateProbability) GetOpenProbability() float32 {
	if x != nil {
		return x.OpenProbability
	}
	return 0
}

func (x *DoorStateProbability) GetPartiallyOpenProbability() float32 {
	if x != nil {
		return x.PartiallyOpenProbability
	}
	return 0
}

func (x *DoorStateProbability) GetClosedProbability() float32 {
	if x != nil {
		return x.ClosedProbability
	}
	return 0
}

type DoorMutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State            *DoorState            `protobuf:"varint,1,opt,name=state,proto3,enum=protos.perception.structs.v1.DoorState,oneof" json:"state,omitempty"`
	StateProbability *DoorStateProbability `protobuf:"bytes,2,opt,name=state_probability,json=stateProbability,proto3,oneof" json:"state_probability,omitempty"`
}

func (x *DoorMutableAttributes) Reset() {
	*x = DoorMutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorMutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorMutableAttributes) ProtoMessage() {}

func (x *DoorMutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorMutableAttributes.ProtoReflect.Descriptor instead.
func (*DoorMutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{7}
}

func (x *DoorMutableAttributes) GetState() DoorState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return DoorState_DOOR_STATE_UNSPECIFIED
}

func (x *DoorMutableAttributes) GetStateProbability() *DoorStateProbability {
	if x != nil {
		return x.StateProbability
	}
	return nil
}

type IntersectionMutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IntersectionMutableAttributes) Reset() {
	*x = IntersectionMutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntersectionMutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntersectionMutableAttributes) ProtoMessage() {}

func (x *IntersectionMutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntersectionMutableAttributes.ProtoReflect.Descriptor instead.
func (*IntersectionMutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{8}
}

type AisleMutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AisleMutableAttributes) Reset() {
	*x = AisleMutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AisleMutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AisleMutableAttributes) ProtoMessage() {}

func (x *AisleMutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AisleMutableAttributes.ProtoReflect.Descriptor instead.
func (*AisleMutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{9}
}

type ProductionLineMutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State    *MotionDetectionZoneState `protobuf:"varint,1,opt,name=state,proto3,enum=protos.perception.structs.v1.MotionDetectionZoneState,oneof" json:"state,omitempty"`
	ScoreStd *float32                  `protobuf:"fixed32,2,opt,name=score_std,json=scoreStd,proto3,oneof" json:"score_std,omitempty"`
}

func (x *ProductionLineMutableAttributes) Reset() {
	*x = ProductionLineMutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductionLineMutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductionLineMutableAttributes) ProtoMessage() {}

func (x *ProductionLineMutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductionLineMutableAttributes.ProtoReflect.Descriptor instead.
func (*ProductionLineMutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{10}
}

func (x *ProductionLineMutableAttributes) GetState() MotionDetectionZoneState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return MotionDetectionZoneState_MOTION_DETECTION_ZONE_STATE_UNSPECIFIED
}

func (x *ProductionLineMutableAttributes) GetScoreStd() float32 {
	if x != nil && x.ScoreStd != nil {
		return *x.ScoreStd
	}
	return 0
}

type PitImmutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PitType *PitType `protobuf:"varint,1,opt,name=pit_type,json=pitType,proto3,enum=protos.perception.structs.v1.PitType,oneof" json:"pit_type,omitempty"`
}

func (x *PitImmutableAttributes) Reset() {
	*x = PitImmutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PitImmutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PitImmutableAttributes) ProtoMessage() {}

func (x *PitImmutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PitImmutableAttributes.ProtoReflect.Descriptor instead.
func (*PitImmutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{11}
}

func (x *PitImmutableAttributes) GetPitType() PitType {
	if x != nil && x.PitType != nil {
		return *x.PitType
	}
	return PitType_PIT_TYPE_UNSPECIFIED
}

type PersonImmutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PersonImmutableAttributes) Reset() {
	*x = PersonImmutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonImmutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonImmutableAttributes) ProtoMessage() {}

func (x *PersonImmutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonImmutableAttributes.ProtoReflect.Descriptor instead.
func (*PersonImmutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{12}
}

type IntersectionImmutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IntersectionImmutableAttributes) Reset() {
	*x = IntersectionImmutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntersectionImmutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntersectionImmutableAttributes) ProtoMessage() {}

func (x *IntersectionImmutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntersectionImmutableAttributes.ProtoReflect.Descriptor instead.
func (*IntersectionImmutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{13}
}

type AisleImmutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AisleImmutableAttributes) Reset() {
	*x = AisleImmutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AisleImmutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AisleImmutableAttributes) ProtoMessage() {}

func (x *AisleImmutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AisleImmutableAttributes.ProtoReflect.Descriptor instead.
func (*AisleImmutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{14}
}

type ProductionLineImmutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductionLineImmutableAttributes) Reset() {
	*x = ProductionLineImmutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductionLineImmutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductionLineImmutableAttributes) ProtoMessage() {}

func (x *ProductionLineImmutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductionLineImmutableAttributes.ProtoReflect.Descriptor instead.
func (*ProductionLineImmutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{15}
}

type DoorImmutableAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        DoorType        `protobuf:"varint,1,opt,name=type,proto3,enum=protos.perception.structs.v1.DoorType" json:"type,omitempty"`
	Orientation DoorOrientation `protobuf:"varint,2,opt,name=orientation,proto3,enum=protos.perception.structs.v1.DoorOrientation" json:"orientation,omitempty"`
}

func (x *DoorImmutableAttributes) Reset() {
	*x = DoorImmutableAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorImmutableAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorImmutableAttributes) ProtoMessage() {}

func (x *DoorImmutableAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorImmutableAttributes.ProtoReflect.Descriptor instead.
func (*DoorImmutableAttributes) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{16}
}

func (x *DoorImmutableAttributes) GetType() DoorType {
	if x != nil {
		return x.Type
	}
	return DoorType_DOOR_TYPE_UNSPECIFIED
}

func (x *DoorImmutableAttributes) GetOrientation() DoorOrientation {
	if x != nil {
		return x.Orientation
	}
	return DoorOrientation_DOOR_ORIENTATION_UNSPECIFIED
}

type PersonActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutableAttributes   *PersonMutableAttributes   `protobuf:"bytes,1,opt,name=mutable_attributes,json=mutableAttributes,proto3" json:"mutable_attributes,omitempty"`
	ImmutableAttributes *PersonImmutableAttributes `protobuf:"bytes,2,opt,name=immutable_attributes,json=immutableAttributes,proto3" json:"immutable_attributes,omitempty"`
	IsOccluded          *bool                      `protobuf:"varint,3,opt,name=is_occluded,json=isOccluded,proto3,oneof" json:"is_occluded,omitempty"`
	IsTruncated         *bool                      `protobuf:"varint,4,opt,name=is_truncated,json=isTruncated,proto3,oneof" json:"is_truncated,omitempty"`
}

func (x *PersonActor) Reset() {
	*x = PersonActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonActor) ProtoMessage() {}

func (x *PersonActor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonActor.ProtoReflect.Descriptor instead.
func (*PersonActor) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{17}
}

func (x *PersonActor) GetMutableAttributes() *PersonMutableAttributes {
	if x != nil {
		return x.MutableAttributes
	}
	return nil
}

func (x *PersonActor) GetImmutableAttributes() *PersonImmutableAttributes {
	if x != nil {
		return x.ImmutableAttributes
	}
	return nil
}

func (x *PersonActor) GetIsOccluded() bool {
	if x != nil && x.IsOccluded != nil {
		return *x.IsOccluded
	}
	return false
}

func (x *PersonActor) GetIsTruncated() bool {
	if x != nil && x.IsTruncated != nil {
		return *x.IsTruncated
	}
	return false
}

type PitActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutableAttributes   *PitMutableAttributes   `protobuf:"bytes,1,opt,name=mutable_attributes,json=mutableAttributes,proto3" json:"mutable_attributes,omitempty"`
	ImmutableAttributes *PitImmutableAttributes `protobuf:"bytes,2,opt,name=immutable_attributes,json=immutableAttributes,proto3" json:"immutable_attributes,omitempty"`
	IsOccluded          *bool                   `protobuf:"varint,3,opt,name=is_occluded,json=isOccluded,proto3,oneof" json:"is_occluded,omitempty"`
	IsTruncated         *bool                   `protobuf:"varint,4,opt,name=is_truncated,json=isTruncated,proto3,oneof" json:"is_truncated,omitempty"`
}

func (x *PitActor) Reset() {
	*x = PitActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PitActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PitActor) ProtoMessage() {}

func (x *PitActor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PitActor.ProtoReflect.Descriptor instead.
func (*PitActor) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{18}
}

func (x *PitActor) GetMutableAttributes() *PitMutableAttributes {
	if x != nil {
		return x.MutableAttributes
	}
	return nil
}

func (x *PitActor) GetImmutableAttributes() *PitImmutableAttributes {
	if x != nil {
		return x.ImmutableAttributes
	}
	return nil
}

func (x *PitActor) GetIsOccluded() bool {
	if x != nil && x.IsOccluded != nil {
		return *x.IsOccluded
	}
	return false
}

func (x *PitActor) GetIsTruncated() bool {
	if x != nil && x.IsTruncated != nil {
		return *x.IsTruncated
	}
	return false
}

type DoorActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutableAttributes   *DoorMutableAttributes   `protobuf:"bytes,1,opt,name=mutable_attributes,json=mutableAttributes,proto3" json:"mutable_attributes,omitempty"`
	ImmutableAttributes *DoorImmutableAttributes `protobuf:"bytes,2,opt,name=immutable_attributes,json=immutableAttributes,proto3" json:"immutable_attributes,omitempty"`
}

func (x *DoorActor) Reset() {
	*x = DoorActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorActor) ProtoMessage() {}

func (x *DoorActor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorActor.ProtoReflect.Descriptor instead.
func (*DoorActor) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{19}
}

func (x *DoorActor) GetMutableAttributes() *DoorMutableAttributes {
	if x != nil {
		return x.MutableAttributes
	}
	return nil
}

func (x *DoorActor) GetImmutableAttributes() *DoorImmutableAttributes {
	if x != nil {
		return x.ImmutableAttributes
	}
	return nil
}

type IntersectionActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutableAttributes   *IntersectionMutableAttributes   `protobuf:"bytes,1,opt,name=mutable_attributes,json=mutableAttributes,proto3" json:"mutable_attributes,omitempty"`
	ImmutableAttributes *IntersectionImmutableAttributes `protobuf:"bytes,2,opt,name=immutable_attributes,json=immutableAttributes,proto3" json:"immutable_attributes,omitempty"`
}

func (x *IntersectionActor) Reset() {
	*x = IntersectionActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntersectionActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntersectionActor) ProtoMessage() {}

func (x *IntersectionActor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntersectionActor.ProtoReflect.Descriptor instead.
func (*IntersectionActor) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{20}
}

func (x *IntersectionActor) GetMutableAttributes() *IntersectionMutableAttributes {
	if x != nil {
		return x.MutableAttributes
	}
	return nil
}

func (x *IntersectionActor) GetImmutableAttributes() *IntersectionImmutableAttributes {
	if x != nil {
		return x.ImmutableAttributes
	}
	return nil
}

type AisleActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutableAttributes   *AisleMutableAttributes   `protobuf:"bytes,1,opt,name=mutable_attributes,json=mutableAttributes,proto3" json:"mutable_attributes,omitempty"`
	ImmutableAttributes *AisleImmutableAttributes `protobuf:"bytes,2,opt,name=immutable_attributes,json=immutableAttributes,proto3" json:"immutable_attributes,omitempty"`
}

func (x *AisleActor) Reset() {
	*x = AisleActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AisleActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AisleActor) ProtoMessage() {}

func (x *AisleActor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AisleActor.ProtoReflect.Descriptor instead.
func (*AisleActor) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{21}
}

func (x *AisleActor) GetMutableAttributes() *AisleMutableAttributes {
	if x != nil {
		return x.MutableAttributes
	}
	return nil
}

func (x *AisleActor) GetImmutableAttributes() *AisleImmutableAttributes {
	if x != nil {
		return x.ImmutableAttributes
	}
	return nil
}

type ProductionLineActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MutableAttributes   *ProductionLineMutableAttributes   `protobuf:"bytes,1,opt,name=mutable_attributes,json=mutableAttributes,proto3" json:"mutable_attributes,omitempty"`
	ImmutableAttributes *ProductionLineImmutableAttributes `protobuf:"bytes,2,opt,name=immutable_attributes,json=immutableAttributes,proto3" json:"immutable_attributes,omitempty"`
}

func (x *ProductionLineActor) Reset() {
	*x = ProductionLineActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductionLineActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductionLineActor) ProtoMessage() {}

func (x *ProductionLineActor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductionLineActor.ProtoReflect.Descriptor instead.
func (*ProductionLineActor) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{22}
}

func (x *ProductionLineActor) GetMutableAttributes() *ProductionLineMutableAttributes {
	if x != nil {
		return x.MutableAttributes
	}
	return nil
}

func (x *ProductionLineActor) GetImmutableAttributes() *ProductionLineImmutableAttributes {
	if x != nil {
		return x.ImmutableAttributes
	}
	return nil
}

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackId    *uint32        `protobuf:"varint,1,opt,name=track_id,json=trackId,proto3,oneof" json:"track_id,omitempty"`
	Polygon    *v1.Polygon    `protobuf:"bytes,2,opt,name=polygon,proto3,oneof" json:"polygon,omitempty"`
	Confidence *float32       `protobuf:"fixed32,3,opt,name=confidence,proto3,oneof" json:"confidence,omitempty"`
	Category   *ActorCategory `protobuf:"varint,4,opt,name=category,proto3,enum=protos.perception.structs.v1.ActorCategory,oneof" json:"category,omitempty"`
	TrackUuid  *string        `protobuf:"bytes,5,opt,name=track_uuid,json=trackUuid,proto3,oneof" json:"track_uuid,omitempty"`
	Uuid       *string        `protobuf:"bytes,6,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// Types that are assignable to ActorAttributes:
	//
	//	*Actor_PersonActor
	//	*Actor_PitActor
	//	*Actor_DoorActor
	//	*Actor_IntersectionActor
	//	*Actor_AisleActor
	//	*Actor_ProductionLineActor
	ActorAttributes isActor_ActorAttributes `protobuf_oneof:"actor_attributes"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perception_structs_v1_actor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_protos_perception_structs_v1_actor_proto_rawDescGZIP(), []int{23}
}

func (x *Actor) GetTrackId() uint32 {
	if x != nil && x.TrackId != nil {
		return *x.TrackId
	}
	return 0
}

func (x *Actor) GetPolygon() *v1.Polygon {
	if x != nil {
		return x.Polygon
	}
	return nil
}

func (x *Actor) GetConfidence() float32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *Actor) GetCategory() ActorCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ActorCategory_ACTOR_CATEGORY_UNKNOWN
}

func (x *Actor) GetTrackUuid() string {
	if x != nil && x.TrackUuid != nil {
		return *x.TrackUuid
	}
	return ""
}

func (x *Actor) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (m *Actor) GetActorAttributes() isActor_ActorAttributes {
	if m != nil {
		return m.ActorAttributes
	}
	return nil
}

func (x *Actor) GetPersonActor() *PersonActor {
	if x, ok := x.GetActorAttributes().(*Actor_PersonActor); ok {
		return x.PersonActor
	}
	return nil
}

func (x *Actor) GetPitActor() *PitActor {
	if x, ok := x.GetActorAttributes().(*Actor_PitActor); ok {
		return x.PitActor
	}
	return nil
}

func (x *Actor) GetDoorActor() *DoorActor {
	if x, ok := x.GetActorAttributes().(*Actor_DoorActor); ok {
		return x.DoorActor
	}
	return nil
}

func (x *Actor) GetIntersectionActor() *IntersectionActor {
	if x, ok := x.GetActorAttributes().(*Actor_IntersectionActor); ok {
		return x.IntersectionActor
	}
	return nil
}

func (x *Actor) GetAisleActor() *AisleActor {
	if x, ok := x.GetActorAttributes().(*Actor_AisleActor); ok {
		return x.AisleActor
	}
	return nil
}

func (x *Actor) GetProductionLineActor() *ProductionLineActor {
	if x, ok := x.GetActorAttributes().(*Actor_ProductionLineActor); ok {
		return x.ProductionLineActor
	}
	return nil
}

type isActor_ActorAttributes interface {
	isActor_ActorAttributes()
}

type Actor_PersonActor struct {
	PersonActor *PersonActor `protobuf:"bytes,101,opt,name=person_actor,json=personActor,proto3,oneof"`
}

type Actor_PitActor struct {
	PitActor *PitActor `protobuf:"bytes,102,opt,name=pit_actor,json=pitActor,proto3,oneof"`
}

type Actor_DoorActor struct {
	DoorActor *DoorActor `protobuf:"bytes,103,opt,name=door_actor,json=doorActor,proto3,oneof"`
}

type Actor_IntersectionActor struct {
	IntersectionActor *IntersectionActor `protobuf:"bytes,104,opt,name=intersection_actor,json=intersectionActor,proto3,oneof"`
}

type Actor_AisleActor struct {
	AisleActor *AisleActor `protobuf:"bytes,105,opt,name=aisle_actor,json=aisleActor,proto3,oneof"`
}

type Actor_ProductionLineActor struct {
	ProductionLineActor *ProductionLineActor `protobuf:"bytes,106,opt,name=production_line_actor,json=productionLineActor,proto3,oneof"`
}

func (*Actor_PersonActor) isActor_ActorAttributes() {}

func (*Actor_PitActor) isActor_ActorAttributes() {}

func (*Actor_DoorActor) isActor_ActorAttributes() {}

func (*Actor_IntersectionActor) isActor_ActorAttributes() {}

func (*Actor_AisleActor) isActor_ActorAttributes() {}

func (*Actor_ProductionLineActor) isActor_ActorAttributes() {}

var File_protos_perception_structs_v1_actor_proto protoreflect.FileDescriptor

var file_protos_perception_structs_v1_actor_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xfb, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x6d, 0x62, 0x12, 0x54, 0x0a, 0x0b, 0x6a, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x01, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x62, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x08,
	0x6c, 0x69, 0x6d, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x16, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x15, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6a, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6d, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x44,
	0x0a, 0x08, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x62, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x62, 0x73, 0x22, 0x84, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x62, 0x61, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x04, 0x6e, 0x65, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x02, 0x52, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x04, 0x52, 0x05, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x6c, 0x65, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x04,
	0x6c, 0x65, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x65, 0x63, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x61, 0x72, 0x6d, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x61, 0x72, 0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6c, 0x65, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x22, 0x71, 0x0a, 0x18, 0x45,
	0x72, 0x67, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x65, 0x62, 0x61, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x61,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x61, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xae,
	0x07, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x69, 0x73, 0x57, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x61, 0x72, 0x64, 0x48, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x73,
	0x5f, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f,
	0x76, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x13, 0x69, 0x73,
	0x57, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x56, 0x65, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x16, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x79,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x10, 0x69, 0x73, 0x43, 0x61, 0x72, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x10, 0x68, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x6b,
	0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x65, 0x6c,
	0x65, 0x74, 0x6f, 0x6e, 0x48, 0x06, 0x52, 0x08, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x1a, 0x65, 0x72, 0x67, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x67, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48,
	0x07, 0x52, 0x18, 0x65, 0x72, 0x67, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x3b,
	0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x70, 0x6f, 0x73, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x74, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x72,
	0x72, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x65, 0x72, 0x67, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0xc2, 0x06, 0x0a, 0x14, 0x50, 0x69, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x69, 0x73, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6b,
	0x73, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0e, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x0e, 0x70, 0x69, 0x78,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x04, 0x52, 0x0d, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x28, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52, 0x23,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x32, 0x44, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x06, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x33, 0x44, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x07, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x16, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x73, 0x5f,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65,
	0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x69, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a,
	0x10, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x6f, 0x72, 0x4d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x69,
	0x73, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01,
	0x52, 0x08, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x64, 0x22, 0x6c, 0x0a, 0x16, 0x50, 0x69, 0x74, 0x49, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x08, 0x70, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x21, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x69, 0x73, 0x6c, 0x65, 0x49, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x23, 0x0a, 0x21, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x17, 0x44, 0x6f, 0x6f, 0x72, 0x49, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x02,
	0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x64, 0x0a,
	0x12, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x11, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x14, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x13, 0x69, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x63, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x69,
	0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x63, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0xc5,
	0x02, 0x0a, 0x08, 0x50, 0x69, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x12, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x67,
	0x0a, 0x14, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x74, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x13, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x63,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x73, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x63, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x44, 0x6f, 0x6f, 0x72, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x12, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x6f, 0x72, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x69, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x13, 0x69,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6a, 0x0a, 0x12, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x11, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x14, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x13, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x41, 0x69, 0x73, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x12, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x69, 0x73, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x14, 0x69, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x73, 0x6c, 0x65, 0x49, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x13, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6c, 0x0a,
	0x12, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x14, 0x69,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x13, 0x69, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0xf5, 0x06, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x6f, 0x6c,
	0x79, 0x67, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x48,
	0x02, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x48, 0x04, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a,
	0x09, 0x70, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x74, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6f, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x60,
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x69, 0x73, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x73, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x69, 0x73, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x67, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x2a, 0xb2, 0x05, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x50, 0x49, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x48, 0x41, 0x54, 0x10, 0x04, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x41, 0x46, 0x45, 0x54, 0x59, 0x5f, 0x56, 0x45, 0x53, 0x54, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x42, 0x41, 0x52, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41,
	0x49, 0x53, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x55,
	0x43, 0x4b, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x0b,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42,
	0x49, 0x4b, 0x45, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x55, 0x53, 0x10, 0x0e, 0x12, 0x28, 0x0a,
	0x24, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45,
	0x44, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x50, 0x49, 0x4c, 0x4c,
	0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x10, 0x13, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x49, 0x54, 0x5f, 0x56, 0x32, 0x10, 0x16, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x32, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f,
	0x42, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x2a, 0x64, 0x0a, 0x0c,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x46,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x2a, 0x58, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x53, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x53, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x44, 0x10, 0x02, 0x2a, 0x7e, 0x0a, 0x09,
	0x44, 0x6f, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x4f,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x2a, 0xc0, 0x01, 0x0a,
	0x18, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x4f, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x26,
	0x0a, 0x22, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x32, 0x2a,
	0xaa, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x52, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x48, 0x41, 0x54, 0x10, 0x04, 0x2a, 0x9f, 0x07, 0x0a,
	0x10, 0x50, 0x6f, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45,
	0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x53, 0x45,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x43, 0x4b, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x55,
	0x4c, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b,
	0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x45, 0x4c, 0x42, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f,
	0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x53, 0x54, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44,
	0x45, 0x52, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f,
	0x45, 0x4c, 0x42, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x53, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45,
	0x46, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x53, 0x54, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f,
	0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x44, 0x5f, 0x48, 0x49, 0x50, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f,
	0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x48, 0x49, 0x50, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d,
	0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4b, 0x4e, 0x45, 0x45, 0x10, 0x0b, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x41, 0x4e, 0x4b, 0x4c,
	0x45, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x48,
	0x49, 0x50, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f,
	0x4b, 0x4e, 0x45, 0x45, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b,
	0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46,
	0x54, 0x5f, 0x41, 0x4e, 0x4b, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x53,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x45, 0x59, 0x45, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x59, 0x45, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x10, 0x12, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x10, 0x13, 0x12,
	0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54,
	0x4f, 0x45, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f,
	0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x45, 0x10, 0x15, 0x12, 0x20, 0x0a, 0x1c, 0x50,
	0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x48, 0x45, 0x45, 0x4c, 0x10, 0x16, 0x12, 0x24, 0x0a,
	0x20, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x4f,
	0x45, 0x10, 0x17, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x45, 0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x4f, 0x53, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x48, 0x45, 0x45, 0x4c, 0x10, 0x19, 0x2a, 0x96,
	0x01, 0x0a, 0x08, 0x4c, 0x69, 0x6d, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x49, 0x4d, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x42, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49,
	0x4d, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x41, 0x52,
	0x4d, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4d, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x4c, 0x49, 0x4d, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e,
	0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4d, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x45, 0x47, 0x53, 0x10, 0x05, 0x2a, 0x3a, 0x0a, 0x07, 0x50, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x4c, 0x49, 0x46,
	0x54, 0x10, 0x01, 0x2a, 0x7b, 0x0a, 0x08, 0x44, 0x6f, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5a, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x04,
	0x2a, 0x74, 0x0a, 0x0f, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x49, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x4f, 0x52,
	0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x44,
	0x4f, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x4f, 0x52,
	0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f,
	0x44, 0x4f, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x78, 0x65, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x76, 0x6f,
	0x78, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_protos_perception_structs_v1_actor_proto_rawDescOnce sync.Once
	file_protos_perception_structs_v1_actor_proto_rawDescData = file_protos_perception_structs_v1_actor_proto_rawDesc
)

func file_protos_perception_structs_v1_actor_proto_rawDescGZIP() []byte {
	file_protos_perception_structs_v1_actor_proto_rawDescOnce.Do(func() {
		file_protos_perception_structs_v1_actor_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_perception_structs_v1_actor_proto_rawDescData)
	})
	return file_protos_perception_structs_v1_actor_proto_rawDescData
}

var file_protos_perception_structs_v1_actor_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_protos_perception_structs_v1_actor_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_protos_perception_structs_v1_actor_proto_goTypes = []interface{}{
	(ActorCategory)(0),                        // 0: protos.perception.structs.v1.ActorCategory
	(ActivityType)(0),                         // 1: protos.perception.structs.v1.ActivityType
	(PostureType)(0),                          // 2: protos.perception.structs.v1.PostureType
	(DoorState)(0),                            // 3: protos.perception.structs.v1.DoorState
	(MotionDetectionZoneState)(0),             // 4: protos.perception.structs.v1.MotionDetectionZoneState
	(HeadCoveringType)(0),                     // 5: protos.perception.structs.v1.HeadCoveringType
	(PoseKeypointType)(0),                     // 6: protos.perception.structs.v1.PoseKeypointType
	(LimbType)(0),                             // 7: protos.perception.structs.v1.LimbType
	(PitType)(0),                              // 8: protos.perception.structs.v1.PitType
	(DoorType)(0),                             // 9: protos.perception.structs.v1.DoorType
	(DoorOrientation)(0),                      // 10: protos.perception.structs.v1.DoorOrientation
	(*Limb)(nil),                              // 11: protos.perception.structs.v1.Limb
	(*Skeleton)(nil),                          // 12: protos.perception.structs.v1.Skeleton
	(*RebaScores)(nil),                        // 13: protos.perception.structs.v1.RebaScores
	(*ErgonomicSeverityMetrics)(nil),          // 14: protos.perception.structs.v1.ErgonomicSeverityMetrics
	(*PersonMutableAttributes)(nil),           // 15: protos.perception.structs.v1.PersonMutableAttributes
	(*PitMutableAttributes)(nil),              // 16: protos.perception.structs.v1.PitMutableAttributes
	(*DoorStateProbability)(nil),              // 17: protos.perception.structs.v1.DoorStateProbability
	(*DoorMutableAttributes)(nil),             // 18: protos.perception.structs.v1.DoorMutableAttributes
	(*IntersectionMutableAttributes)(nil),     // 19: protos.perception.structs.v1.IntersectionMutableAttributes
	(*AisleMutableAttributes)(nil),            // 20: protos.perception.structs.v1.AisleMutableAttributes
	(*ProductionLineMutableAttributes)(nil),   // 21: protos.perception.structs.v1.ProductionLineMutableAttributes
	(*PitImmutableAttributes)(nil),            // 22: protos.perception.structs.v1.PitImmutableAttributes
	(*PersonImmutableAttributes)(nil),         // 23: protos.perception.structs.v1.PersonImmutableAttributes
	(*IntersectionImmutableAttributes)(nil),   // 24: protos.perception.structs.v1.IntersectionImmutableAttributes
	(*AisleImmutableAttributes)(nil),          // 25: protos.perception.structs.v1.AisleImmutableAttributes
	(*ProductionLineImmutableAttributes)(nil), // 26: protos.perception.structs.v1.ProductionLineImmutableAttributes
	(*DoorImmutableAttributes)(nil),           // 27: protos.perception.structs.v1.DoorImmutableAttributes
	(*PersonActor)(nil),                       // 28: protos.perception.structs.v1.PersonActor
	(*PitActor)(nil),                          // 29: protos.perception.structs.v1.PitActor
	(*DoorActor)(nil),                         // 30: protos.perception.structs.v1.DoorActor
	(*IntersectionActor)(nil),                 // 31: protos.perception.structs.v1.IntersectionActor
	(*AisleActor)(nil),                        // 32: protos.perception.structs.v1.AisleActor
	(*ProductionLineActor)(nil),               // 33: protos.perception.structs.v1.ProductionLineActor
	(*Actor)(nil),                             // 34: protos.perception.structs.v1.Actor
	nil,                                       // 35: protos.perception.structs.v1.PersonMutableAttributes.ActivityEntry
	(*v1.Pose)(nil),                           // 36: protos.perception.types.v1.Pose
	(*v1.VelocityPixelsPerSecond)(nil),        // 37: protos.perception.types.v1.VelocityPixelsPerSecond
	(*v1.Velocity2DMetersPerSecond)(nil),      // 38: protos.perception.types.v1.Velocity2DMetersPerSecond
	(*v1.Position3DMeters)(nil),               // 39: protos.perception.types.v1.Position3DMeters
	(*v1.Polygon)(nil),                        // 40: protos.perception.types.v1.Polygon
}
var file_protos_perception_structs_v1_actor_proto_depIdxs = []int32{
	6,  // 0: protos.perception.structs.v1.Limb.joint_start:type_name -> protos.perception.structs.v1.PoseKeypointType
	6,  // 1: protos.perception.structs.v1.Limb.joint_end:type_name -> protos.perception.structs.v1.PoseKeypointType
	7,  // 2: protos.perception.structs.v1.Limb.limb_type:type_name -> protos.perception.structs.v1.LimbType
	11, // 3: protos.perception.structs.v1.Skeleton.limbs:type_name -> protos.perception.structs.v1.Limb
	13, // 4: protos.perception.structs.v1.ErgonomicSeverityMetrics.reba_scores:type_name -> protos.perception.structs.v1.RebaScores
	36, // 5: protos.perception.structs.v1.PersonMutableAttributes.pose:type_name -> protos.perception.types.v1.Pose
	35, // 6: protos.perception.structs.v1.PersonMutableAttributes.activity:type_name -> protos.perception.structs.v1.PersonMutableAttributes.ActivityEntry
	5,  // 7: protos.perception.structs.v1.PersonMutableAttributes.head_covering_type:type_name -> protos.perception.structs.v1.HeadCoveringType
	12, // 8: protos.perception.structs.v1.PersonMutableAttributes.skeleton:type_name -> protos.perception.structs.v1.Skeleton
	14, // 9: protos.perception.structs.v1.PersonMutableAttributes.ergonomic_severity_metrics:type_name -> protos.perception.structs.v1.ErgonomicSeverityMetrics
	37, // 10: protos.perception.structs.v1.PitMutableAttributes.pixel_velocity:type_name -> protos.perception.types.v1.VelocityPixelsPerSecond
	38, // 11: protos.perception.structs.v1.PitMutableAttributes.world_velocity:type_name -> protos.perception.types.v1.Velocity2DMetersPerSecond
	39, // 12: protos.perception.structs.v1.PitMutableAttributes.position:type_name -> protos.perception.types.v1.Position3DMeters
	3,  // 13: protos.perception.structs.v1.DoorMutableAttributes.state:type_name -> protos.perception.structs.v1.DoorState
	17, // 14: protos.perception.structs.v1.DoorMutableAttributes.state_probability:type_name -> protos.perception.structs.v1.DoorStateProbability
	4,  // 15: protos.perception.structs.v1.ProductionLineMutableAttributes.state:type_name -> protos.perception.structs.v1.MotionDetectionZoneState
	8,  // 16: protos.perception.structs.v1.PitImmutableAttributes.pit_type:type_name -> protos.perception.structs.v1.PitType
	9,  // 17: protos.perception.structs.v1.DoorImmutableAttributes.type:type_name -> protos.perception.structs.v1.DoorType
	10, // 18: protos.perception.structs.v1.DoorImmutableAttributes.orientation:type_name -> protos.perception.structs.v1.DoorOrientation
	15, // 19: protos.perception.structs.v1.PersonActor.mutable_attributes:type_name -> protos.perception.structs.v1.PersonMutableAttributes
	23, // 20: protos.perception.structs.v1.PersonActor.immutable_attributes:type_name -> protos.perception.structs.v1.PersonImmutableAttributes
	16, // 21: protos.perception.structs.v1.PitActor.mutable_attributes:type_name -> protos.perception.structs.v1.PitMutableAttributes
	22, // 22: protos.perception.structs.v1.PitActor.immutable_attributes:type_name -> protos.perception.structs.v1.PitImmutableAttributes
	18, // 23: protos.perception.structs.v1.DoorActor.mutable_attributes:type_name -> protos.perception.structs.v1.DoorMutableAttributes
	27, // 24: protos.perception.structs.v1.DoorActor.immutable_attributes:type_name -> protos.perception.structs.v1.DoorImmutableAttributes
	19, // 25: protos.perception.structs.v1.IntersectionActor.mutable_attributes:type_name -> protos.perception.structs.v1.IntersectionMutableAttributes
	24, // 26: protos.perception.structs.v1.IntersectionActor.immutable_attributes:type_name -> protos.perception.structs.v1.IntersectionImmutableAttributes
	20, // 27: protos.perception.structs.v1.AisleActor.mutable_attributes:type_name -> protos.perception.structs.v1.AisleMutableAttributes
	25, // 28: protos.perception.structs.v1.AisleActor.immutable_attributes:type_name -> protos.perception.structs.v1.AisleImmutableAttributes
	21, // 29: protos.perception.structs.v1.ProductionLineActor.mutable_attributes:type_name -> protos.perception.structs.v1.ProductionLineMutableAttributes
	26, // 30: protos.perception.structs.v1.ProductionLineActor.immutable_attributes:type_name -> protos.perception.structs.v1.ProductionLineImmutableAttributes
	40, // 31: protos.perception.structs.v1.Actor.polygon:type_name -> protos.perception.types.v1.Polygon
	0,  // 32: protos.perception.structs.v1.Actor.category:type_name -> protos.perception.structs.v1.ActorCategory
	28, // 33: protos.perception.structs.v1.Actor.person_actor:type_name -> protos.perception.structs.v1.PersonActor
	29, // 34: protos.perception.structs.v1.Actor.pit_actor:type_name -> protos.perception.structs.v1.PitActor
	30, // 35: protos.perception.structs.v1.Actor.door_actor:type_name -> protos.perception.structs.v1.DoorActor
	31, // 36: protos.perception.structs.v1.Actor.intersection_actor:type_name -> protos.perception.structs.v1.IntersectionActor
	32, // 37: protos.perception.structs.v1.Actor.aisle_actor:type_name -> protos.perception.structs.v1.AisleActor
	33, // 38: protos.perception.structs.v1.Actor.production_line_actor:type_name -> protos.perception.structs.v1.ProductionLineActor
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_protos_perception_structs_v1_actor_proto_init() }
func file_protos_perception_structs_v1_actor_proto_init() {
	if File_protos_perception_structs_v1_actor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_perception_structs_v1_actor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skeleton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebaScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErgonomicSeverityMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonMutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PitMutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorStateProbability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorMutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntersectionMutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AisleMutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductionLineMutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PitImmutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonImmutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntersectionImmutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AisleImmutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductionLineImmutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorImmutableAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PitActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntersectionActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AisleActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductionLineActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perception_structs_v1_actor_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Actor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_perception_structs_v1_actor_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ErgonomicSeverityMetrics_RebaScores)(nil),
	}
	file_protos_perception_structs_v1_actor_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_protos_perception_structs_v1_actor_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Actor_PersonActor)(nil),
		(*Actor_PitActor)(nil),
		(*Actor_DoorActor)(nil),
		(*Actor_IntersectionActor)(nil),
		(*Actor_AisleActor)(nil),
		(*Actor_ProductionLineActor)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_perception_structs_v1_actor_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_perception_structs_v1_actor_proto_goTypes,
		DependencyIndexes: file_protos_perception_structs_v1_actor_proto_depIdxs,
		EnumInfos:         file_protos_perception_structs_v1_actor_proto_enumTypes,
		MessageInfos:      file_protos_perception_structs_v1_actor_proto_msgTypes,
	}.Build()
	File_protos_perception_structs_v1_actor_proto = out.File
	file_protos_perception_structs_v1_actor_proto_rawDesc = nil
	file_protos_perception_structs_v1_actor_proto_goTypes = nil
	file_protos_perception_structs_v1_actor_proto_depIdxs = nil
}
