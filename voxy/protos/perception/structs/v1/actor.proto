// Copyright 2020-2021 Voxel Labs, Inc.
// All rights reserved.
//
// This document may not be reproduced, republished, distributed, transmitted,
// displayed, broadcast or otherwise exploited in any manner without the express
// prior written permission of Voxel Labs, Inc. The receipt or possession of this
// document does not convey any rights to reproduce, disclose, or distribute its
// contents, or to manufacture, use, or sell anything that it may describe, in
// whole or in part.

syntax = "proto3";

package protos.perception.structs.v1;

option go_package = "github.com/voxel-ai/voxel/protos/perception/structs/v1;structspb";

import "protos/perception/types/v1/types.proto";

// TO maintain compatibility with old protobufs in /core/structs/
// we need to keep this here but it should be removed when we deprecate those
// trunk-ignore-all(buf-lint/ENUM_ZERO_VALUE_SUFFIX)


enum ActorCategory {
    // Change to UNSPECIFIED
    ACTOR_CATEGORY_UNKNOWN = 0; 
    ACTOR_CATEGORY_PERSON = 1;
    ACTOR_CATEGORY_PIT = 2;
    ACTOR_CATEGORY_DOOR = 3;
    ACTOR_CATEGORY_HARD_HAT = 4;
    ACTOR_CATEGORY_SAFETY_VEST = 5;
    ACTOR_CATEGORY_BARE_CHEST = 6;
    ACTOR_CATEGORY_BARE_HEAD = 7;
    ACTOR_CATEGORY_INTERSECTION = 8;
    ACTOR_CATEGORY_AISLE_END = 9;
    ACTOR_CATEGORY_TRUCK = 10;
    ACTOR_CATEGORY_VEHICLE = 11;
    ACTOR_CATEGORY_TRAILER = 12;
    ACTOR_CATEGORY_BIKE = 13;
    ACTOR_CATEGORY_BUS = 14;
    ACTOR_CATEGORY_MOTION_DETECTION_ZONE = 15;
    ACTOR_CATEGORY_DRIVING_AREA = 16;
    ACTOR_CATEGORY_NO_PED_ZONE = 17;
    ACTOR_CATEGORY_SPILL = 18;
    ACTOR_CATEGORY_COVERED_HEAD = 19;
    ACTOR_CATEGORY_PIT_V2 = 22;
    ACTOR_CATEGORY_PERSON_V2 = 23;
    ACTOR_CATEGORY_OBSTRUCTION = 25;
}

enum ActivityType {
    ACTIVITY_TYPE_UNSPECIFIED = 0;
    ACTIVITY_TYPE_LIFTING = 1;
    ACTIVITY_TYPE_REACHING = 2; 
}

enum PostureType {
    POSTURE_TYPE_UNSPECIFIED = 0;
    POSTURE_TYPE_GOOD = 1; 
    POSTURE_TYPE_BAD = 2; 
}

enum DoorState {
    DOOR_STATE_UNSPECIFIED = 0;
    DOOR_STATE_FULLY_CLOSED = 1;
    DOOR_STATE_FULLY_OPEN = 2;
    DOOR_STATE_PARTIALLY_OPEN = 3;
}

enum MotionDetectionZoneState {
    MOTION_DETECTION_ZONE_STATE_UNSPECIFIED = 0;
    MOTION_DETECTION_ZONE_STATE_FROZEN = 1;
    MOTION_DETECTION_ZONE_STATE_MOTION = 2;
    // allow for more states
    MOTION_DETECTION_ZONE_STATE_UNKNOWN = 50;
}

enum HeadCoveringType {
    HEAD_COVERING_UNKNOWN = 0;
    HEAD_COVERING_LEGACY_BARE_HEAD = 1;
    HEAD_COVERING_BARE_HEAD = 2;
    HEAD_COVERING_COVERED_HEAD = 3;
    HEAD_COVERING_HARD_HAT = 4;
}

// Make sure to update Pose in types.proto
enum PoseKeypointType {
    POSE_KEYPOINT_TYPE_UNSPECIFIED = 0;
    POSE_KEYPOINT_TYPE_NOSE = 1;
    POSE_KEYPOINT_TYPE_NECK = 2;
    POSE_KEYPOINT_TYPE_RIGHT_SHOULDER = 3;
    POSE_KEYPOINT_TYPE_RIGHT_ELBOW = 4;
    POSE_KEYPOINT_TYPE_RIGHT_WRIST = 5;
    POSE_KEYPOINT_TYPE_LEFT_SHOULDER = 6;
    POSE_KEYPOINT_TYPE_LEFT_ELBOW = 7;
    POSE_KEYPOINT_TYPE_LEFT_WRIST = 8;
    POSE_KEYPOINT_TYPE_MID_HIP = 9;
    POSE_KEYPOINT_TYPE_RIGHT_HIP = 10;
    POSE_KEYPOINT_TYPE_RIGHT_KNEE = 11;
    POSE_KEYPOINT_TYPE_RIGHT_ANKLE = 12;
    POSE_KEYPOINT_TYPE_LEFT_HIP = 13;
    POSE_KEYPOINT_TYPE_LEFT_KNEE = 14;
    POSE_KEYPOINT_TYPE_LEFT_ANKLE = 15;
    POSE_KEYPOINT_TYPE_RIGHT_EYE = 16;
    POSE_KEYPOINT_TYPE_LEFT_EYE = 17;
    POSE_KEYPOINT_TYPE_RIGHT_EAR = 18;
    POSE_KEYPOINT_TYPE_LEFT_EAR = 19;
    POSE_KEYPOINT_TYPE_LEFT_BIG_TOE = 20;
    POSE_KEYPOINT_TYPE_LEFT_SMALL_TOE = 21;
    POSE_KEYPOINT_TYPE_LEFT_HEEL = 22;
    POSE_KEYPOINT_TYPE_RIGHT_BIG_TOE = 23;
    POSE_KEYPOINT_TYPE_RIGHT_SMALL_TOE = 24;
    POSE_KEYPOINT_TYPE_RIGHT_HEEL = 25;
}

enum LimbType {
    LIMB_TYPE_UNSPECIFIED = 0;
    LIMB_TYPE_NECK = 1;
    LIMB_TYPE_UPPER_ARMS = 2;
    LIMB_TYPE_LOWER_ARMS = 3;
    LIMB_TYPE_TRUNK = 4;
    LIMB_TYPE_LEGS = 5;
}

message Limb {
    optional PoseKeypointType joint_start = 1;
    optional PoseKeypointType joint_end = 2;
    optional LimbType limb_type = 3;
    optional float confidence_probability = 4;
}

message Skeleton {
    repeated Limb limbs = 1;
}

message RebaScores {
    optional string version = 1;
    optional uint32 neck = 2;
    optional uint32 upper_arms = 3;
    optional uint32 lower_arms= 4;
    optional uint32 trunk = 5;
    optional uint32 legs = 6;
    optional uint32 table_a = 7;
    optional uint32 table_b = 8;
    optional uint32 table_c = 9;
} 

message ErgonomicSeverityMetrics {
    oneof scores {
        RebaScores reba_scores = 1;
    }
}

// Mutable Attributes
message PersonMutableAttributes {
    optional protos.perception.types.v1.Pose pose = 1;
    map<string, string> activity = 2;
    optional bool is_wearing_hard_hat = 3;
    optional bool is_wearing_safety_vest = 4;
    optional float distance_to_camera_meters = 5;
    optional bool is_carrying_object = 6;
    optional HeadCoveringType head_covering_type = 7;
    optional Skeleton skeleton = 8;
    optional ErgonomicSeverityMetrics ergonomic_severity_metrics = 9;
}


message PitMutableAttributes {
    optional bool is_human_operating = 1;
    optional bool is_loaded = 2;
    optional bool is_forks_raised = 3;
    optional bool is_operating_pit = 4;
    optional protos.perception.types.v1.VelocityPixelsPerSecond pixel_velocity = 5; 
    optional float normalized_pixel_speed_pixels_per_second = 6;
    optional protos.perception.types.v1.Velocity2DMetersPerSecond world_velocity = 7;
    optional protos.perception.types.v1.Position3DMeters position = 8;
    optional float distance_to_camera_meters = 9;
}


message DoorStateProbability {
    float open_probability = 1;
    float partially_open_probability = 2;
    float closed_probability = 3;
}

message DoorMutableAttributes {
    optional DoorState state = 1;
    optional DoorStateProbability state_probability = 2;
}

message IntersectionMutableAttributes {
}

message AisleMutableAttributes {
}

message ProductionLineMutableAttributes {
    optional MotionDetectionZoneState state = 1;
    optional float score_std = 2;
}

// Immuatable Attributes
enum PitType {
    PIT_TYPE_UNSPECIFIED = 0;
    PIT_TYPE_FORKLIFT = 1;
}

message PitImmutableAttributes {
    optional PitType pit_type = 1;
}

message PersonImmutableAttributes {
}

message IntersectionImmutableAttributes {
}

message AisleImmutableAttributes {
}

message ProductionLineImmutableAttributes {
}

enum DoorType {
    DOOR_TYPE_UNSPECIFIED = 0;
    DOOR_TYPE_DOCK = 1;
    DOOR_TYPE_FREEZER = 2;
    DOOR_TYPE_EXIT = 3;
    DOOR_TYPE_CURTAIN = 4;
}

enum DoorOrientation{
    DOOR_ORIENTATION_UNSPECIFIED = 0;
    DOOR_ORIENTATION_SIDE_DOOR = 1;
    DOOR_ORIENTATION_FRONT_DOOR = 2;
}

message DoorImmutableAttributes {
    DoorType type = 1;
    DoorOrientation orientation = 2;

}

// Actor Attributes
message PersonActor {
    PersonMutableAttributes mutable_attributes = 1;
    PersonImmutableAttributes immutable_attributes = 2;
    optional bool is_occluded = 3;
    optional bool is_truncated = 4;
}

message PitActor {
    PitMutableAttributes mutable_attributes = 1;
    PitImmutableAttributes immutable_attributes = 2;
    optional bool is_occluded = 3;
    optional bool is_truncated = 4;
}

message DoorActor {
    DoorMutableAttributes mutable_attributes = 1;
    DoorImmutableAttributes immutable_attributes = 2;
}

message IntersectionActor {
    IntersectionMutableAttributes mutable_attributes = 1;
    IntersectionImmutableAttributes immutable_attributes = 2;
}

message AisleActor {
    AisleMutableAttributes mutable_attributes = 1;
    AisleImmutableAttributes immutable_attributes = 2;
}

message ProductionLineActor {
    ProductionLineMutableAttributes mutable_attributes = 1;
    ProductionLineImmutableAttributes immutable_attributes = 2;
}

// Overall Actor Struct
message Actor {
    optional uint32 track_id = 1;
    optional protos.perception.types.v1.Polygon polygon = 2;
    optional float confidence = 3;
    optional ActorCategory category = 4;
    optional string track_uuid = 5;
    optional string uuid = 6;
    oneof actor_attributes {
        PersonActor person_actor = 101;
        PitActor pit_actor = 102;
        DoorActor door_actor = 103;
        IntersectionActor intersection_actor = 104;
        AisleActor aisle_actor = 105;
        ProductionLineActor production_line_actor = 106;
    }
}