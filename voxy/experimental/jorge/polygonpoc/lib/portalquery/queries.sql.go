// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package portalquery

import (
	"context"
	"database/sql"
	"time"
)

const getCamera = `-- name: GetCamera :one
SELECT id, created_at, updated_at, deleted_at, uuid, name, organization_id, zone_id, thumbnail_gcs_path, edge_id, lifecycle, thumbnail_s3_path FROM public.camera
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCamera(ctx context.Context, id int64) (Camera, error) {
	row := q.db.QueryRowContext(ctx, getCamera, id)
	var i Camera
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Uuid,
		&i.Name,
		&i.OrganizationID,
		&i.ZoneID,
		&i.ThumbnailGcsPath,
		&i.EdgeID,
		&i.Lifecycle,
		&i.ThumbnailS3Path,
	)
	return i, err
}

const getCameras = `-- name: GetCameras :many
SELECT id, created_at, updated_at, deleted_at, uuid, name, organization_id, zone_id, thumbnail_gcs_path, edge_id, lifecycle, thumbnail_s3_path FROM public.camera
ORDER BY created_at
`

func (q *Queries) GetCameras(ctx context.Context) ([]Camera, error) {
	rows, err := q.db.QueryContext(ctx, getCameras)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Camera
	for rows.Next() {
		var i Camera
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Uuid,
			&i.Name,
			&i.OrganizationID,
			&i.ZoneID,
			&i.ThumbnailGcsPath,
			&i.EdgeID,
			&i.Lifecycle,
			&i.ThumbnailS3Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertApiOrganization = `-- name: InsertApiOrganization :one
INSERT INTO public.api_organization (Id, Created_At, Updated_At, Name, key, deleted_at, is_sandbox, timezone) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id
`

type InsertApiOrganizationParams struct {
	ID        int64
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Key       string
	DeletedAt sql.NullTime
	IsSandbox bool
	Timezone  string
}

func (q *Queries) InsertApiOrganization(ctx context.Context, arg InsertApiOrganizationParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertApiOrganization,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Key,
		arg.DeletedAt,
		arg.IsSandbox,
		arg.Timezone,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertCamera = `-- name: InsertCamera :one
INSERT INTO public.camera (Id, Created_At, Updated_At, Deleted_At, Uuid, Name, Organization_Id, Zone_Id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id
`

type InsertCameraParams struct {
	ID             int64
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	Uuid           string
	Name           string
	OrganizationID sql.NullInt64
	ZoneID         sql.NullInt64
}

func (q *Queries) InsertCamera(ctx context.Context, arg InsertCameraParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertCamera,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Uuid,
		arg.Name,
		arg.OrganizationID,
		arg.ZoneID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertZone = `-- name: InsertZone :one
INSERT INTO public.zones (Id, Created_At, Updated_At, Deleted_At, Name, Organization_Id, Zone_type, parent_zone_id, key, timezone, active) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id
`

type InsertZoneParams struct {
	ID             int64
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	Name           string
	OrganizationID int64
	ZoneType       string
	ParentZoneID   sql.NullInt64
	Key            string
	Timezone       sql.NullString
	Active         bool
}

func (q *Queries) InsertZone(ctx context.Context, arg InsertZoneParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertZone,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Name,
		arg.OrganizationID,
		arg.ZoneType,
		arg.ParentZoneID,
		arg.Key,
		arg.Timezone,
		arg.Active,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
