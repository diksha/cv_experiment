// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: experimental/jorge/modelrepo/third_party/triton/model_config.proto

package tritonpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType int32

const (
	DataType_TYPE_INVALID DataType = 0
	DataType_TYPE_BOOL    DataType = 1
	DataType_TYPE_UINT8   DataType = 2
	DataType_TYPE_UINT16  DataType = 3
	DataType_TYPE_UINT32  DataType = 4
	DataType_TYPE_UINT64  DataType = 5
	DataType_TYPE_INT8    DataType = 6
	DataType_TYPE_INT16   DataType = 7
	DataType_TYPE_INT32   DataType = 8
	DataType_TYPE_INT64   DataType = 9
	DataType_TYPE_FP16    DataType = 10
	DataType_TYPE_FP32    DataType = 11
	DataType_TYPE_FP64    DataType = 12
	DataType_TYPE_STRING  DataType = 13
	DataType_TYPE_BF16    DataType = 14
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "TYPE_INVALID",
		1:  "TYPE_BOOL",
		2:  "TYPE_UINT8",
		3:  "TYPE_UINT16",
		4:  "TYPE_UINT32",
		5:  "TYPE_UINT64",
		6:  "TYPE_INT8",
		7:  "TYPE_INT16",
		8:  "TYPE_INT32",
		9:  "TYPE_INT64",
		10: "TYPE_FP16",
		11: "TYPE_FP32",
		12: "TYPE_FP64",
		13: "TYPE_STRING",
		14: "TYPE_BF16",
	}
	DataType_value = map[string]int32{
		"TYPE_INVALID": 0,
		"TYPE_BOOL":    1,
		"TYPE_UINT8":   2,
		"TYPE_UINT16":  3,
		"TYPE_UINT32":  4,
		"TYPE_UINT64":  5,
		"TYPE_INT8":    6,
		"TYPE_INT16":   7,
		"TYPE_INT32":   8,
		"TYPE_INT64":   9,
		"TYPE_FP16":    10,
		"TYPE_FP32":    11,
		"TYPE_FP64":    12,
		"TYPE_STRING":  13,
		"TYPE_BF16":    14,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{0}
}

type ModelInstanceGroup_Kind int32

const (
	ModelInstanceGroup_KIND_AUTO  ModelInstanceGroup_Kind = 0
	ModelInstanceGroup_KIND_GPU   ModelInstanceGroup_Kind = 1
	ModelInstanceGroup_KIND_CPU   ModelInstanceGroup_Kind = 2
	ModelInstanceGroup_KIND_MODEL ModelInstanceGroup_Kind = 3
)

// Enum value maps for ModelInstanceGroup_Kind.
var (
	ModelInstanceGroup_Kind_name = map[int32]string{
		0: "KIND_AUTO",
		1: "KIND_GPU",
		2: "KIND_CPU",
		3: "KIND_MODEL",
	}
	ModelInstanceGroup_Kind_value = map[string]int32{
		"KIND_AUTO":  0,
		"KIND_GPU":   1,
		"KIND_CPU":   2,
		"KIND_MODEL": 3,
	}
)

func (x ModelInstanceGroup_Kind) Enum() *ModelInstanceGroup_Kind {
	p := new(ModelInstanceGroup_Kind)
	*p = x
	return p
}

func (x ModelInstanceGroup_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelInstanceGroup_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[1].Descriptor()
}

func (ModelInstanceGroup_Kind) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[1]
}

func (x ModelInstanceGroup_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelInstanceGroup_Kind.Descriptor instead.
func (ModelInstanceGroup_Kind) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{1, 0}
}

type ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind int32

const (
	ModelInstanceGroup_SecondaryDevice_KIND_NVDLA ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind = 0
)

// Enum value maps for ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind.
var (
	ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind_name = map[int32]string{
		0: "KIND_NVDLA",
	}
	ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind_value = map[string]int32{
		"KIND_NVDLA": 0,
	}
)

func (x ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind) Enum() *ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind {
	p := new(ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind)
	*p = x
	return p
}

func (x ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[2].Descriptor()
}

func (ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[2]
}

func (x ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind.Descriptor instead.
func (ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{1, 0, 0}
}

type ModelInput_Format int32

const (
	ModelInput_FORMAT_NONE ModelInput_Format = 0
	ModelInput_FORMAT_NHWC ModelInput_Format = 1
	ModelInput_FORMAT_NCHW ModelInput_Format = 2
)

// Enum value maps for ModelInput_Format.
var (
	ModelInput_Format_name = map[int32]string{
		0: "FORMAT_NONE",
		1: "FORMAT_NHWC",
		2: "FORMAT_NCHW",
	}
	ModelInput_Format_value = map[string]int32{
		"FORMAT_NONE": 0,
		"FORMAT_NHWC": 1,
		"FORMAT_NCHW": 2,
	}
)

func (x ModelInput_Format) Enum() *ModelInput_Format {
	p := new(ModelInput_Format)
	*p = x
	return p
}

func (x ModelInput_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelInput_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[3].Descriptor()
}

func (ModelInput_Format) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[3]
}

func (x ModelInput_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelInput_Format.Descriptor instead.
func (ModelInput_Format) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{3, 0}
}

type BatchInput_Kind int32

const (
	BatchInput_BATCH_ELEMENT_COUNT                       BatchInput_Kind = 0
	BatchInput_BATCH_ACCUMULATED_ELEMENT_COUNT           BatchInput_Kind = 1
	BatchInput_BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO BatchInput_Kind = 2
	BatchInput_BATCH_MAX_ELEMENT_COUNT_AS_SHAPE          BatchInput_Kind = 3
	BatchInput_BATCH_ITEM_SHAPE                          BatchInput_Kind = 4
	BatchInput_BATCH_ITEM_SHAPE_FLATTEN                  BatchInput_Kind = 5
)

// Enum value maps for BatchInput_Kind.
var (
	BatchInput_Kind_name = map[int32]string{
		0: "BATCH_ELEMENT_COUNT",
		1: "BATCH_ACCUMULATED_ELEMENT_COUNT",
		2: "BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO",
		3: "BATCH_MAX_ELEMENT_COUNT_AS_SHAPE",
		4: "BATCH_ITEM_SHAPE",
		5: "BATCH_ITEM_SHAPE_FLATTEN",
	}
	BatchInput_Kind_value = map[string]int32{
		"BATCH_ELEMENT_COUNT":                       0,
		"BATCH_ACCUMULATED_ELEMENT_COUNT":           1,
		"BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO": 2,
		"BATCH_MAX_ELEMENT_COUNT_AS_SHAPE":          3,
		"BATCH_ITEM_SHAPE":                          4,
		"BATCH_ITEM_SHAPE_FLATTEN":                  5,
	}
)

func (x BatchInput_Kind) Enum() *BatchInput_Kind {
	p := new(BatchInput_Kind)
	*p = x
	return p
}

func (x BatchInput_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchInput_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[4].Descriptor()
}

func (BatchInput_Kind) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[4]
}

func (x BatchInput_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchInput_Kind.Descriptor instead.
func (BatchInput_Kind) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{5, 0}
}

type BatchOutput_Kind int32

const (
	BatchOutput_BATCH_SCATTER_WITH_INPUT_SHAPE BatchOutput_Kind = 0
)

// Enum value maps for BatchOutput_Kind.
var (
	BatchOutput_Kind_name = map[int32]string{
		0: "BATCH_SCATTER_WITH_INPUT_SHAPE",
	}
	BatchOutput_Kind_value = map[string]int32{
		"BATCH_SCATTER_WITH_INPUT_SHAPE": 0,
	}
)

func (x BatchOutput_Kind) Enum() *BatchOutput_Kind {
	p := new(BatchOutput_Kind)
	*p = x
	return p
}

func (x BatchOutput_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchOutput_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[5].Descriptor()
}

func (BatchOutput_Kind) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[5]
}

func (x BatchOutput_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchOutput_Kind.Descriptor instead.
func (BatchOutput_Kind) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{6, 0}
}

type ModelOptimizationPolicy_ModelPriority int32

const (
	ModelOptimizationPolicy_PRIORITY_DEFAULT ModelOptimizationPolicy_ModelPriority = 0
	ModelOptimizationPolicy_PRIORITY_MAX     ModelOptimizationPolicy_ModelPriority = 1
	ModelOptimizationPolicy_PRIORITY_MIN     ModelOptimizationPolicy_ModelPriority = 2
)

// Enum value maps for ModelOptimizationPolicy_ModelPriority.
var (
	ModelOptimizationPolicy_ModelPriority_name = map[int32]string{
		0: "PRIORITY_DEFAULT",
		1: "PRIORITY_MAX",
		2: "PRIORITY_MIN",
	}
	ModelOptimizationPolicy_ModelPriority_value = map[string]int32{
		"PRIORITY_DEFAULT": 0,
		"PRIORITY_MAX":     1,
		"PRIORITY_MIN":     2,
	}
)

func (x ModelOptimizationPolicy_ModelPriority) Enum() *ModelOptimizationPolicy_ModelPriority {
	p := new(ModelOptimizationPolicy_ModelPriority)
	*p = x
	return p
}

func (x ModelOptimizationPolicy_ModelPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelOptimizationPolicy_ModelPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[6].Descriptor()
}

func (ModelOptimizationPolicy_ModelPriority) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[6]
}

func (x ModelOptimizationPolicy_ModelPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelOptimizationPolicy_ModelPriority.Descriptor instead.
func (ModelOptimizationPolicy_ModelPriority) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 0}
}

type ModelQueuePolicy_TimeoutAction int32

const (
	ModelQueuePolicy_REJECT ModelQueuePolicy_TimeoutAction = 0
	ModelQueuePolicy_DELAY  ModelQueuePolicy_TimeoutAction = 1
)

// Enum value maps for ModelQueuePolicy_TimeoutAction.
var (
	ModelQueuePolicy_TimeoutAction_name = map[int32]string{
		0: "REJECT",
		1: "DELAY",
	}
	ModelQueuePolicy_TimeoutAction_value = map[string]int32{
		"REJECT": 0,
		"DELAY":  1,
	}
)

func (x ModelQueuePolicy_TimeoutAction) Enum() *ModelQueuePolicy_TimeoutAction {
	p := new(ModelQueuePolicy_TimeoutAction)
	*p = x
	return p
}

func (x ModelQueuePolicy_TimeoutAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelQueuePolicy_TimeoutAction) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[7].Descriptor()
}

func (ModelQueuePolicy_TimeoutAction) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[7]
}

func (x ModelQueuePolicy_TimeoutAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelQueuePolicy_TimeoutAction.Descriptor instead.
func (ModelQueuePolicy_TimeoutAction) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{9, 0}
}

type ModelSequenceBatching_Control_Kind int32

const (
	ModelSequenceBatching_Control_CONTROL_SEQUENCE_START  ModelSequenceBatching_Control_Kind = 0
	ModelSequenceBatching_Control_CONTROL_SEQUENCE_READY  ModelSequenceBatching_Control_Kind = 1
	ModelSequenceBatching_Control_CONTROL_SEQUENCE_END    ModelSequenceBatching_Control_Kind = 2
	ModelSequenceBatching_Control_CONTROL_SEQUENCE_CORRID ModelSequenceBatching_Control_Kind = 3
)

// Enum value maps for ModelSequenceBatching_Control_Kind.
var (
	ModelSequenceBatching_Control_Kind_name = map[int32]string{
		0: "CONTROL_SEQUENCE_START",
		1: "CONTROL_SEQUENCE_READY",
		2: "CONTROL_SEQUENCE_END",
		3: "CONTROL_SEQUENCE_CORRID",
	}
	ModelSequenceBatching_Control_Kind_value = map[string]int32{
		"CONTROL_SEQUENCE_START":  0,
		"CONTROL_SEQUENCE_READY":  1,
		"CONTROL_SEQUENCE_END":    2,
		"CONTROL_SEQUENCE_CORRID": 3,
	}
)

func (x ModelSequenceBatching_Control_Kind) Enum() *ModelSequenceBatching_Control_Kind {
	p := new(ModelSequenceBatching_Control_Kind)
	*p = x
	return p
}

func (x ModelSequenceBatching_Control_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelSequenceBatching_Control_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[8].Descriptor()
}

func (ModelSequenceBatching_Control_Kind) Type() protoreflect.EnumType {
	return &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes[8]
}

func (x ModelSequenceBatching_Control_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelSequenceBatching_Control_Kind.Descriptor instead.
func (ModelSequenceBatching_Control_Kind) EnumDescriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{11, 0, 0}
}

type ModelRateLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*ModelRateLimiter_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	Priority  uint32                       `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ModelRateLimiter) Reset() {
	*x = ModelRateLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelRateLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRateLimiter) ProtoMessage() {}

func (x *ModelRateLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRateLimiter.ProtoReflect.Descriptor instead.
func (*ModelRateLimiter) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{0}
}

func (x *ModelRateLimiter) GetResources() []*ModelRateLimiter_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ModelRateLimiter) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type ModelInstanceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind             ModelInstanceGroup_Kind               `protobuf:"varint,4,opt,name=kind,proto3,enum=experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup_Kind" json:"kind,omitempty"`
	Count            int32                                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	RateLimiter      *ModelRateLimiter                     `protobuf:"bytes,6,opt,name=rate_limiter,json=rateLimiter,proto3" json:"rate_limiter,omitempty"`
	Gpus             []int32                               `protobuf:"varint,3,rep,packed,name=gpus,proto3" json:"gpus,omitempty"`
	SecondaryDevices []*ModelInstanceGroup_SecondaryDevice `protobuf:"bytes,8,rep,name=secondary_devices,json=secondaryDevices,proto3" json:"secondary_devices,omitempty"`
	Profile          []string                              `protobuf:"bytes,5,rep,name=profile,proto3" json:"profile,omitempty"`
	Passive          bool                                  `protobuf:"varint,7,opt,name=passive,proto3" json:"passive,omitempty"`
	HostPolicy       string                                `protobuf:"bytes,9,opt,name=host_policy,json=hostPolicy,proto3" json:"host_policy,omitempty"`
}

func (x *ModelInstanceGroup) Reset() {
	*x = ModelInstanceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInstanceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInstanceGroup) ProtoMessage() {}

func (x *ModelInstanceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInstanceGroup.ProtoReflect.Descriptor instead.
func (*ModelInstanceGroup) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{1}
}

func (x *ModelInstanceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInstanceGroup) GetKind() ModelInstanceGroup_Kind {
	if x != nil {
		return x.Kind
	}
	return ModelInstanceGroup_KIND_AUTO
}

func (x *ModelInstanceGroup) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ModelInstanceGroup) GetRateLimiter() *ModelRateLimiter {
	if x != nil {
		return x.RateLimiter
	}
	return nil
}

func (x *ModelInstanceGroup) GetGpus() []int32 {
	if x != nil {
		return x.Gpus
	}
	return nil
}

func (x *ModelInstanceGroup) GetSecondaryDevices() []*ModelInstanceGroup_SecondaryDevice {
	if x != nil {
		return x.SecondaryDevices
	}
	return nil
}

func (x *ModelInstanceGroup) GetProfile() []string {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ModelInstanceGroup) GetPassive() bool {
	if x != nil {
		return x.Passive
	}
	return false
}

func (x *ModelInstanceGroup) GetHostPolicy() string {
	if x != nil {
		return x.HostPolicy
	}
	return ""
}

type ModelTensorReshape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shape []int64 `protobuf:"varint,1,rep,packed,name=shape,proto3" json:"shape,omitempty"`
}

func (x *ModelTensorReshape) Reset() {
	*x = ModelTensorReshape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTensorReshape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTensorReshape) ProtoMessage() {}

func (x *ModelTensorReshape) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTensorReshape.ProtoReflect.Descriptor instead.
func (*ModelTensorReshape) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{2}
}

func (x *ModelTensorReshape) GetShape() []int64 {
	if x != nil {
		return x.Shape
	}
	return nil
}

type ModelInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType         DataType            `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=experimental.jorge.modelrepo.third_party.triton.DataType" json:"data_type,omitempty"`
	Format           ModelInput_Format   `protobuf:"varint,3,opt,name=format,proto3,enum=experimental.jorge.modelrepo.third_party.triton.ModelInput_Format" json:"format,omitempty"`
	Dims             []int64             `protobuf:"varint,4,rep,packed,name=dims,proto3" json:"dims,omitempty"`
	Reshape          *ModelTensorReshape `protobuf:"bytes,5,opt,name=reshape,proto3" json:"reshape,omitempty"`
	IsShapeTensor    bool                `protobuf:"varint,6,opt,name=is_shape_tensor,json=isShapeTensor,proto3" json:"is_shape_tensor,omitempty"`
	AllowRaggedBatch bool                `protobuf:"varint,7,opt,name=allow_ragged_batch,json=allowRaggedBatch,proto3" json:"allow_ragged_batch,omitempty"`
	Optional         bool                `protobuf:"varint,8,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *ModelInput) Reset() {
	*x = ModelInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInput) ProtoMessage() {}

func (x *ModelInput) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInput.ProtoReflect.Descriptor instead.
func (*ModelInput) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{3}
}

func (x *ModelInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInput) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_TYPE_INVALID
}

func (x *ModelInput) GetFormat() ModelInput_Format {
	if x != nil {
		return x.Format
	}
	return ModelInput_FORMAT_NONE
}

func (x *ModelInput) GetDims() []int64 {
	if x != nil {
		return x.Dims
	}
	return nil
}

func (x *ModelInput) GetReshape() *ModelTensorReshape {
	if x != nil {
		return x.Reshape
	}
	return nil
}

func (x *ModelInput) GetIsShapeTensor() bool {
	if x != nil {
		return x.IsShapeTensor
	}
	return false
}

func (x *ModelInput) GetAllowRaggedBatch() bool {
	if x != nil {
		return x.AllowRaggedBatch
	}
	return false
}

func (x *ModelInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type ModelOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType      DataType            `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=experimental.jorge.modelrepo.third_party.triton.DataType" json:"data_type,omitempty"`
	Dims          []int64             `protobuf:"varint,3,rep,packed,name=dims,proto3" json:"dims,omitempty"`
	Reshape       *ModelTensorReshape `protobuf:"bytes,5,opt,name=reshape,proto3" json:"reshape,omitempty"`
	LabelFilename string              `protobuf:"bytes,4,opt,name=label_filename,json=labelFilename,proto3" json:"label_filename,omitempty"`
	IsShapeTensor bool                `protobuf:"varint,6,opt,name=is_shape_tensor,json=isShapeTensor,proto3" json:"is_shape_tensor,omitempty"`
}

func (x *ModelOutput) Reset() {
	*x = ModelOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOutput) ProtoMessage() {}

func (x *ModelOutput) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOutput.ProtoReflect.Descriptor instead.
func (*ModelOutput) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{4}
}

func (x *ModelOutput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelOutput) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_TYPE_INVALID
}

func (x *ModelOutput) GetDims() []int64 {
	if x != nil {
		return x.Dims
	}
	return nil
}

func (x *ModelOutput) GetReshape() *ModelTensorReshape {
	if x != nil {
		return x.Reshape
	}
	return nil
}

func (x *ModelOutput) GetLabelFilename() string {
	if x != nil {
		return x.LabelFilename
	}
	return ""
}

func (x *ModelOutput) GetIsShapeTensor() bool {
	if x != nil {
		return x.IsShapeTensor
	}
	return false
}

type BatchInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind        BatchInput_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=experimental.jorge.modelrepo.third_party.triton.BatchInput_Kind" json:"kind,omitempty"`
	TargetName  []string        `protobuf:"bytes,2,rep,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`
	DataType    DataType        `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=experimental.jorge.modelrepo.third_party.triton.DataType" json:"data_type,omitempty"`
	SourceInput []string        `protobuf:"bytes,4,rep,name=source_input,json=sourceInput,proto3" json:"source_input,omitempty"`
}

func (x *BatchInput) Reset() {
	*x = BatchInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInput) ProtoMessage() {}

func (x *BatchInput) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInput.ProtoReflect.Descriptor instead.
func (*BatchInput) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{5}
}

func (x *BatchInput) GetKind() BatchInput_Kind {
	if x != nil {
		return x.Kind
	}
	return BatchInput_BATCH_ELEMENT_COUNT
}

func (x *BatchInput) GetTargetName() []string {
	if x != nil {
		return x.TargetName
	}
	return nil
}

func (x *BatchInput) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_TYPE_INVALID
}

func (x *BatchInput) GetSourceInput() []string {
	if x != nil {
		return x.SourceInput
	}
	return nil
}

type BatchOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetName  []string         `protobuf:"bytes,1,rep,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`
	Kind        BatchOutput_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=experimental.jorge.modelrepo.third_party.triton.BatchOutput_Kind" json:"kind,omitempty"`
	SourceInput []string         `protobuf:"bytes,3,rep,name=source_input,json=sourceInput,proto3" json:"source_input,omitempty"`
}

func (x *BatchOutput) Reset() {
	*x = BatchOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOutput) ProtoMessage() {}

func (x *BatchOutput) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOutput.ProtoReflect.Descriptor instead.
func (*BatchOutput) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{6}
}

func (x *BatchOutput) GetTargetName() []string {
	if x != nil {
		return x.TargetName
	}
	return nil
}

func (x *BatchOutput) GetKind() BatchOutput_Kind {
	if x != nil {
		return x.Kind
	}
	return BatchOutput_BATCH_SCATTER_WITH_INPUT_SHAPE
}

func (x *BatchOutput) GetSourceInput() []string {
	if x != nil {
		return x.SourceInput
	}
	return nil
}

type ModelVersionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PolicyChoice:
	//
	//	*ModelVersionPolicy_Latest_
	//	*ModelVersionPolicy_All_
	//	*ModelVersionPolicy_Specific_
	PolicyChoice isModelVersionPolicy_PolicyChoice `protobuf_oneof:"policy_choice"`
}

func (x *ModelVersionPolicy) Reset() {
	*x = ModelVersionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionPolicy) ProtoMessage() {}

func (x *ModelVersionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionPolicy.ProtoReflect.Descriptor instead.
func (*ModelVersionPolicy) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{7}
}

func (m *ModelVersionPolicy) GetPolicyChoice() isModelVersionPolicy_PolicyChoice {
	if m != nil {
		return m.PolicyChoice
	}
	return nil
}

func (x *ModelVersionPolicy) GetLatest() *ModelVersionPolicy_Latest {
	if x, ok := x.GetPolicyChoice().(*ModelVersionPolicy_Latest_); ok {
		return x.Latest
	}
	return nil
}

func (x *ModelVersionPolicy) GetAll() *ModelVersionPolicy_All {
	if x, ok := x.GetPolicyChoice().(*ModelVersionPolicy_All_); ok {
		return x.All
	}
	return nil
}

func (x *ModelVersionPolicy) GetSpecific() *ModelVersionPolicy_Specific {
	if x, ok := x.GetPolicyChoice().(*ModelVersionPolicy_Specific_); ok {
		return x.Specific
	}
	return nil
}

type isModelVersionPolicy_PolicyChoice interface {
	isModelVersionPolicy_PolicyChoice()
}

type ModelVersionPolicy_Latest_ struct {
	Latest *ModelVersionPolicy_Latest `protobuf:"bytes,1,opt,name=latest,proto3,oneof"`
}

type ModelVersionPolicy_All_ struct {
	All *ModelVersionPolicy_All `protobuf:"bytes,2,opt,name=all,proto3,oneof"`
}

type ModelVersionPolicy_Specific_ struct {
	Specific *ModelVersionPolicy_Specific `protobuf:"bytes,3,opt,name=specific,proto3,oneof"`
}

func (*ModelVersionPolicy_Latest_) isModelVersionPolicy_PolicyChoice() {}

func (*ModelVersionPolicy_All_) isModelVersionPolicy_PolicyChoice() {}

func (*ModelVersionPolicy_Specific_) isModelVersionPolicy_PolicyChoice() {}

type ModelOptimizationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graph                       *ModelOptimizationPolicy_Graph                 `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	Priority                    ModelOptimizationPolicy_ModelPriority          `protobuf:"varint,2,opt,name=priority,proto3,enum=experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy_ModelPriority" json:"priority,omitempty"`
	Cuda                        *ModelOptimizationPolicy_Cuda                  `protobuf:"bytes,3,opt,name=cuda,proto3" json:"cuda,omitempty"`
	ExecutionAccelerators       *ModelOptimizationPolicy_ExecutionAccelerators `protobuf:"bytes,4,opt,name=execution_accelerators,json=executionAccelerators,proto3" json:"execution_accelerators,omitempty"`
	InputPinnedMemory           *ModelOptimizationPolicy_PinnedMemoryBuffer    `protobuf:"bytes,5,opt,name=input_pinned_memory,json=inputPinnedMemory,proto3" json:"input_pinned_memory,omitempty"`
	OutputPinnedMemory          *ModelOptimizationPolicy_PinnedMemoryBuffer    `protobuf:"bytes,6,opt,name=output_pinned_memory,json=outputPinnedMemory,proto3" json:"output_pinned_memory,omitempty"`
	GatherKernelBufferThreshold uint32                                         `protobuf:"varint,7,opt,name=gather_kernel_buffer_threshold,json=gatherKernelBufferThreshold,proto3" json:"gather_kernel_buffer_threshold,omitempty"`
	EagerBatching               bool                                           `protobuf:"varint,8,opt,name=eager_batching,json=eagerBatching,proto3" json:"eager_batching,omitempty"`
}

func (x *ModelOptimizationPolicy) Reset() {
	*x = ModelOptimizationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy) ProtoMessage() {}

func (x *ModelOptimizationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8}
}

func (x *ModelOptimizationPolicy) GetGraph() *ModelOptimizationPolicy_Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *ModelOptimizationPolicy) GetPriority() ModelOptimizationPolicy_ModelPriority {
	if x != nil {
		return x.Priority
	}
	return ModelOptimizationPolicy_PRIORITY_DEFAULT
}

func (x *ModelOptimizationPolicy) GetCuda() *ModelOptimizationPolicy_Cuda {
	if x != nil {
		return x.Cuda
	}
	return nil
}

func (x *ModelOptimizationPolicy) GetExecutionAccelerators() *ModelOptimizationPolicy_ExecutionAccelerators {
	if x != nil {
		return x.ExecutionAccelerators
	}
	return nil
}

func (x *ModelOptimizationPolicy) GetInputPinnedMemory() *ModelOptimizationPolicy_PinnedMemoryBuffer {
	if x != nil {
		return x.InputPinnedMemory
	}
	return nil
}

func (x *ModelOptimizationPolicy) GetOutputPinnedMemory() *ModelOptimizationPolicy_PinnedMemoryBuffer {
	if x != nil {
		return x.OutputPinnedMemory
	}
	return nil
}

func (x *ModelOptimizationPolicy) GetGatherKernelBufferThreshold() uint32 {
	if x != nil {
		return x.GatherKernelBufferThreshold
	}
	return 0
}

func (x *ModelOptimizationPolicy) GetEagerBatching() bool {
	if x != nil {
		return x.EagerBatching
	}
	return false
}

type ModelQueuePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutAction              ModelQueuePolicy_TimeoutAction `protobuf:"varint,1,opt,name=timeout_action,json=timeoutAction,proto3,enum=experimental.jorge.modelrepo.third_party.triton.ModelQueuePolicy_TimeoutAction" json:"timeout_action,omitempty"`
	DefaultTimeoutMicroseconds uint64                         `protobuf:"varint,2,opt,name=default_timeout_microseconds,json=defaultTimeoutMicroseconds,proto3" json:"default_timeout_microseconds,omitempty"`
	AllowTimeoutOverride       bool                           `protobuf:"varint,3,opt,name=allow_timeout_override,json=allowTimeoutOverride,proto3" json:"allow_timeout_override,omitempty"`
	MaxQueueSize               uint32                         `protobuf:"varint,4,opt,name=max_queue_size,json=maxQueueSize,proto3" json:"max_queue_size,omitempty"`
}

func (x *ModelQueuePolicy) Reset() {
	*x = ModelQueuePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelQueuePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelQueuePolicy) ProtoMessage() {}

func (x *ModelQueuePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelQueuePolicy.ProtoReflect.Descriptor instead.
func (*ModelQueuePolicy) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{9}
}

func (x *ModelQueuePolicy) GetTimeoutAction() ModelQueuePolicy_TimeoutAction {
	if x != nil {
		return x.TimeoutAction
	}
	return ModelQueuePolicy_REJECT
}

func (x *ModelQueuePolicy) GetDefaultTimeoutMicroseconds() uint64 {
	if x != nil {
		return x.DefaultTimeoutMicroseconds
	}
	return 0
}

func (x *ModelQueuePolicy) GetAllowTimeoutOverride() bool {
	if x != nil {
		return x.AllowTimeoutOverride
	}
	return false
}

func (x *ModelQueuePolicy) GetMaxQueueSize() uint32 {
	if x != nil {
		return x.MaxQueueSize
	}
	return 0
}

type ModelDynamicBatching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreferredBatchSize        []int32                      `protobuf:"varint,1,rep,packed,name=preferred_batch_size,json=preferredBatchSize,proto3" json:"preferred_batch_size,omitempty"`
	MaxQueueDelayMicroseconds uint64                       `protobuf:"varint,2,opt,name=max_queue_delay_microseconds,json=maxQueueDelayMicroseconds,proto3" json:"max_queue_delay_microseconds,omitempty"`
	PreserveOrdering          bool                         `protobuf:"varint,3,opt,name=preserve_ordering,json=preserveOrdering,proto3" json:"preserve_ordering,omitempty"`
	PriorityLevels            uint32                       `protobuf:"varint,4,opt,name=priority_levels,json=priorityLevels,proto3" json:"priority_levels,omitempty"`
	DefaultPriorityLevel      uint32                       `protobuf:"varint,5,opt,name=default_priority_level,json=defaultPriorityLevel,proto3" json:"default_priority_level,omitempty"`
	DefaultQueuePolicy        *ModelQueuePolicy            `protobuf:"bytes,6,opt,name=default_queue_policy,json=defaultQueuePolicy,proto3" json:"default_queue_policy,omitempty"`
	PriorityQueuePolicy       map[uint32]*ModelQueuePolicy `protobuf:"bytes,7,rep,name=priority_queue_policy,json=priorityQueuePolicy,proto3" json:"priority_queue_policy,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModelDynamicBatching) Reset() {
	*x = ModelDynamicBatching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelDynamicBatching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelDynamicBatching) ProtoMessage() {}

func (x *ModelDynamicBatching) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelDynamicBatching.ProtoReflect.Descriptor instead.
func (*ModelDynamicBatching) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{10}
}

func (x *ModelDynamicBatching) GetPreferredBatchSize() []int32 {
	if x != nil {
		return x.PreferredBatchSize
	}
	return nil
}

func (x *ModelDynamicBatching) GetMaxQueueDelayMicroseconds() uint64 {
	if x != nil {
		return x.MaxQueueDelayMicroseconds
	}
	return 0
}

func (x *ModelDynamicBatching) GetPreserveOrdering() bool {
	if x != nil {
		return x.PreserveOrdering
	}
	return false
}

func (x *ModelDynamicBatching) GetPriorityLevels() uint32 {
	if x != nil {
		return x.PriorityLevels
	}
	return 0
}

func (x *ModelDynamicBatching) GetDefaultPriorityLevel() uint32 {
	if x != nil {
		return x.DefaultPriorityLevel
	}
	return 0
}

func (x *ModelDynamicBatching) GetDefaultQueuePolicy() *ModelQueuePolicy {
	if x != nil {
		return x.DefaultQueuePolicy
	}
	return nil
}

func (x *ModelDynamicBatching) GetPriorityQueuePolicy() map[uint32]*ModelQueuePolicy {
	if x != nil {
		return x.PriorityQueuePolicy
	}
	return nil
}

type ModelSequenceBatching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to StrategyChoice:
	//
	//	*ModelSequenceBatching_Direct
	//	*ModelSequenceBatching_Oldest
	StrategyChoice              isModelSequenceBatching_StrategyChoice `protobuf_oneof:"strategy_choice"`
	MaxSequenceIdleMicroseconds uint64                                 `protobuf:"varint,1,opt,name=max_sequence_idle_microseconds,json=maxSequenceIdleMicroseconds,proto3" json:"max_sequence_idle_microseconds,omitempty"`
	ControlInput                []*ModelSequenceBatching_ControlInput  `protobuf:"bytes,2,rep,name=control_input,json=controlInput,proto3" json:"control_input,omitempty"`
	State                       []*ModelSequenceBatching_State         `protobuf:"bytes,5,rep,name=state,proto3" json:"state,omitempty"`
}

func (x *ModelSequenceBatching) Reset() {
	*x = ModelSequenceBatching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSequenceBatching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSequenceBatching) ProtoMessage() {}

func (x *ModelSequenceBatching) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSequenceBatching.ProtoReflect.Descriptor instead.
func (*ModelSequenceBatching) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{11}
}

func (m *ModelSequenceBatching) GetStrategyChoice() isModelSequenceBatching_StrategyChoice {
	if m != nil {
		return m.StrategyChoice
	}
	return nil
}

func (x *ModelSequenceBatching) GetDirect() *ModelSequenceBatching_StrategyDirect {
	if x, ok := x.GetStrategyChoice().(*ModelSequenceBatching_Direct); ok {
		return x.Direct
	}
	return nil
}

func (x *ModelSequenceBatching) GetOldest() *ModelSequenceBatching_StrategyOldest {
	if x, ok := x.GetStrategyChoice().(*ModelSequenceBatching_Oldest); ok {
		return x.Oldest
	}
	return nil
}

func (x *ModelSequenceBatching) GetMaxSequenceIdleMicroseconds() uint64 {
	if x != nil {
		return x.MaxSequenceIdleMicroseconds
	}
	return 0
}

func (x *ModelSequenceBatching) GetControlInput() []*ModelSequenceBatching_ControlInput {
	if x != nil {
		return x.ControlInput
	}
	return nil
}

func (x *ModelSequenceBatching) GetState() []*ModelSequenceBatching_State {
	if x != nil {
		return x.State
	}
	return nil
}

type isModelSequenceBatching_StrategyChoice interface {
	isModelSequenceBatching_StrategyChoice()
}

type ModelSequenceBatching_Direct struct {
	Direct *ModelSequenceBatching_StrategyDirect `protobuf:"bytes,3,opt,name=direct,proto3,oneof"`
}

type ModelSequenceBatching_Oldest struct {
	Oldest *ModelSequenceBatching_StrategyOldest `protobuf:"bytes,4,opt,name=oldest,proto3,oneof"`
}

func (*ModelSequenceBatching_Direct) isModelSequenceBatching_StrategyChoice() {}

func (*ModelSequenceBatching_Oldest) isModelSequenceBatching_StrategyChoice() {}

type ModelEnsembling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step []*ModelEnsembling_Step `protobuf:"bytes,1,rep,name=step,proto3" json:"step,omitempty"`
}

func (x *ModelEnsembling) Reset() {
	*x = ModelEnsembling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelEnsembling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelEnsembling) ProtoMessage() {}

func (x *ModelEnsembling) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelEnsembling.ProtoReflect.Descriptor instead.
func (*ModelEnsembling) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{12}
}

func (x *ModelEnsembling) GetStep() []*ModelEnsembling_Step {
	if x != nil {
		return x.Step
	}
	return nil
}

type ModelParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
}

func (x *ModelParameter) Reset() {
	*x = ModelParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelParameter) ProtoMessage() {}

func (x *ModelParameter) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelParameter.ProtoReflect.Descriptor instead.
func (*ModelParameter) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{13}
}

func (x *ModelParameter) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

type ModelWarmup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BatchSize uint32                        `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Inputs    map[string]*ModelWarmup_Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Count     uint32                        `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ModelWarmup) Reset() {
	*x = ModelWarmup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelWarmup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelWarmup) ProtoMessage() {}

func (x *ModelWarmup) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelWarmup.ProtoReflect.Descriptor instead.
func (*ModelWarmup) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{14}
}

func (x *ModelWarmup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelWarmup) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ModelWarmup) GetInputs() map[string]*ModelWarmup_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ModelWarmup) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ModelOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpLibraryFilename []string `protobuf:"bytes,1,rep,name=op_library_filename,json=opLibraryFilename,proto3" json:"op_library_filename,omitempty"`
}

func (x *ModelOperations) Reset() {
	*x = ModelOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOperations) ProtoMessage() {}

func (x *ModelOperations) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOperations.ProtoReflect.Descriptor instead.
func (*ModelOperations) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{15}
}

func (x *ModelOperations) GetOpLibraryFilename() []string {
	if x != nil {
		return x.OpLibraryFilename
	}
	return nil
}

type ModelTransactionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decoupled bool `protobuf:"varint,1,opt,name=decoupled,proto3" json:"decoupled,omitempty"`
}

func (x *ModelTransactionPolicy) Reset() {
	*x = ModelTransactionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelTransactionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelTransactionPolicy) ProtoMessage() {}

func (x *ModelTransactionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelTransactionPolicy.ProtoReflect.Descriptor instead.
func (*ModelTransactionPolicy) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{16}
}

func (x *ModelTransactionPolicy) GetDecoupled() bool {
	if x != nil {
		return x.Decoupled
	}
	return false
}

type ModelRepositoryAgents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents []*ModelRepositoryAgents_Agent `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *ModelRepositoryAgents) Reset() {
	*x = ModelRepositoryAgents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelRepositoryAgents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRepositoryAgents) ProtoMessage() {}

func (x *ModelRepositoryAgents) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRepositoryAgents.ProtoReflect.Descriptor instead.
func (*ModelRepositoryAgents) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{17}
}

func (x *ModelRepositoryAgents) GetAgents() []*ModelRepositoryAgents_Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

type ModelResponseCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *ModelResponseCache) Reset() {
	*x = ModelResponseCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelResponseCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelResponseCache) ProtoMessage() {}

func (x *ModelResponseCache) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelResponseCache.ProtoReflect.Descriptor instead.
func (*ModelResponseCache) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{18}
}

func (x *ModelResponseCache) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type ModelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Platform      string                   `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	Backend       string                   `protobuf:"bytes,17,opt,name=backend,proto3" json:"backend,omitempty"`
	VersionPolicy *ModelVersionPolicy      `protobuf:"bytes,3,opt,name=version_policy,json=versionPolicy,proto3" json:"version_policy,omitempty"`
	MaxBatchSize  int32                    `protobuf:"varint,4,opt,name=max_batch_size,json=maxBatchSize,proto3" json:"max_batch_size,omitempty"`
	Input         []*ModelInput            `protobuf:"bytes,5,rep,name=input,proto3" json:"input,omitempty"`
	Output        []*ModelOutput           `protobuf:"bytes,6,rep,name=output,proto3" json:"output,omitempty"`
	BatchInput    []*BatchInput            `protobuf:"bytes,20,rep,name=batch_input,json=batchInput,proto3" json:"batch_input,omitempty"`
	BatchOutput   []*BatchOutput           `protobuf:"bytes,21,rep,name=batch_output,json=batchOutput,proto3" json:"batch_output,omitempty"`
	Optimization  *ModelOptimizationPolicy `protobuf:"bytes,12,opt,name=optimization,proto3" json:"optimization,omitempty"`
	// Types that are assignable to SchedulingChoice:
	//
	//	*ModelConfig_DynamicBatching
	//	*ModelConfig_SequenceBatching
	//	*ModelConfig_EnsembleScheduling
	SchedulingChoice       isModelConfig_SchedulingChoice `protobuf_oneof:"scheduling_choice"`
	InstanceGroup          []*ModelInstanceGroup          `protobuf:"bytes,7,rep,name=instance_group,json=instanceGroup,proto3" json:"instance_group,omitempty"`
	DefaultModelFilename   string                         `protobuf:"bytes,8,opt,name=default_model_filename,json=defaultModelFilename,proto3" json:"default_model_filename,omitempty"`
	CcModelFilenames       map[string]string              `protobuf:"bytes,9,rep,name=cc_model_filenames,json=ccModelFilenames,proto3" json:"cc_model_filenames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetricTags             map[string]string              `protobuf:"bytes,10,rep,name=metric_tags,json=metricTags,proto3" json:"metric_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Parameters             map[string]*ModelParameter     `protobuf:"bytes,14,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ModelWarmup            []*ModelWarmup                 `protobuf:"bytes,16,rep,name=model_warmup,json=modelWarmup,proto3" json:"model_warmup,omitempty"`
	ModelOperations        *ModelOperations               `protobuf:"bytes,18,opt,name=model_operations,json=modelOperations,proto3" json:"model_operations,omitempty"`
	ModelTransactionPolicy *ModelTransactionPolicy        `protobuf:"bytes,19,opt,name=model_transaction_policy,json=modelTransactionPolicy,proto3" json:"model_transaction_policy,omitempty"`
	ModelRepositoryAgents  *ModelRepositoryAgents         `protobuf:"bytes,23,opt,name=model_repository_agents,json=modelRepositoryAgents,proto3" json:"model_repository_agents,omitempty"`
	ResponseCache          *ModelResponseCache            `protobuf:"bytes,24,opt,name=response_cache,json=responseCache,proto3" json:"response_cache,omitempty"`
}

func (x *ModelConfig) Reset() {
	*x = ModelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelConfig) ProtoMessage() {}

func (x *ModelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelConfig.ProtoReflect.Descriptor instead.
func (*ModelConfig) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{19}
}

func (x *ModelConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelConfig) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ModelConfig) GetBackend() string {
	if x != nil {
		return x.Backend
	}
	return ""
}

func (x *ModelConfig) GetVersionPolicy() *ModelVersionPolicy {
	if x != nil {
		return x.VersionPolicy
	}
	return nil
}

func (x *ModelConfig) GetMaxBatchSize() int32 {
	if x != nil {
		return x.MaxBatchSize
	}
	return 0
}

func (x *ModelConfig) GetInput() []*ModelInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ModelConfig) GetOutput() []*ModelOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ModelConfig) GetBatchInput() []*BatchInput {
	if x != nil {
		return x.BatchInput
	}
	return nil
}

func (x *ModelConfig) GetBatchOutput() []*BatchOutput {
	if x != nil {
		return x.BatchOutput
	}
	return nil
}

func (x *ModelConfig) GetOptimization() *ModelOptimizationPolicy {
	if x != nil {
		return x.Optimization
	}
	return nil
}

func (m *ModelConfig) GetSchedulingChoice() isModelConfig_SchedulingChoice {
	if m != nil {
		return m.SchedulingChoice
	}
	return nil
}

func (x *ModelConfig) GetDynamicBatching() *ModelDynamicBatching {
	if x, ok := x.GetSchedulingChoice().(*ModelConfig_DynamicBatching); ok {
		return x.DynamicBatching
	}
	return nil
}

func (x *ModelConfig) GetSequenceBatching() *ModelSequenceBatching {
	if x, ok := x.GetSchedulingChoice().(*ModelConfig_SequenceBatching); ok {
		return x.SequenceBatching
	}
	return nil
}

func (x *ModelConfig) GetEnsembleScheduling() *ModelEnsembling {
	if x, ok := x.GetSchedulingChoice().(*ModelConfig_EnsembleScheduling); ok {
		return x.EnsembleScheduling
	}
	return nil
}

func (x *ModelConfig) GetInstanceGroup() []*ModelInstanceGroup {
	if x != nil {
		return x.InstanceGroup
	}
	return nil
}

func (x *ModelConfig) GetDefaultModelFilename() string {
	if x != nil {
		return x.DefaultModelFilename
	}
	return ""
}

func (x *ModelConfig) GetCcModelFilenames() map[string]string {
	if x != nil {
		return x.CcModelFilenames
	}
	return nil
}

func (x *ModelConfig) GetMetricTags() map[string]string {
	if x != nil {
		return x.MetricTags
	}
	return nil
}

func (x *ModelConfig) GetParameters() map[string]*ModelParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ModelConfig) GetModelWarmup() []*ModelWarmup {
	if x != nil {
		return x.ModelWarmup
	}
	return nil
}

func (x *ModelConfig) GetModelOperations() *ModelOperations {
	if x != nil {
		return x.ModelOperations
	}
	return nil
}

func (x *ModelConfig) GetModelTransactionPolicy() *ModelTransactionPolicy {
	if x != nil {
		return x.ModelTransactionPolicy
	}
	return nil
}

func (x *ModelConfig) GetModelRepositoryAgents() *ModelRepositoryAgents {
	if x != nil {
		return x.ModelRepositoryAgents
	}
	return nil
}

func (x *ModelConfig) GetResponseCache() *ModelResponseCache {
	if x != nil {
		return x.ResponseCache
	}
	return nil
}

type isModelConfig_SchedulingChoice interface {
	isModelConfig_SchedulingChoice()
}

type ModelConfig_DynamicBatching struct {
	DynamicBatching *ModelDynamicBatching `protobuf:"bytes,11,opt,name=dynamic_batching,json=dynamicBatching,proto3,oneof"`
}

type ModelConfig_SequenceBatching struct {
	SequenceBatching *ModelSequenceBatching `protobuf:"bytes,13,opt,name=sequence_batching,json=sequenceBatching,proto3,oneof"`
}

type ModelConfig_EnsembleScheduling struct {
	EnsembleScheduling *ModelEnsembling `protobuf:"bytes,15,opt,name=ensemble_scheduling,json=ensembleScheduling,proto3,oneof"`
}

func (*ModelConfig_DynamicBatching) isModelConfig_SchedulingChoice() {}

func (*ModelConfig_SequenceBatching) isModelConfig_SchedulingChoice() {}

func (*ModelConfig_EnsembleScheduling) isModelConfig_SchedulingChoice() {}

type ModelRateLimiter_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Global bool   `protobuf:"varint,2,opt,name=global,proto3" json:"global,omitempty"`
	Count  uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ModelRateLimiter_Resource) Reset() {
	*x = ModelRateLimiter_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelRateLimiter_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRateLimiter_Resource) ProtoMessage() {}

func (x *ModelRateLimiter_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRateLimiter_Resource.ProtoReflect.Descriptor instead.
func (*ModelRateLimiter_Resource) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ModelRateLimiter_Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelRateLimiter_Resource) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

func (x *ModelRateLimiter_Resource) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ModelInstanceGroup_SecondaryDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind `protobuf:"varint,1,opt,name=kind,proto3,enum=experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind" json:"kind,omitempty"`
	DeviceId int64                                                  `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *ModelInstanceGroup_SecondaryDevice) Reset() {
	*x = ModelInstanceGroup_SecondaryDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelInstanceGroup_SecondaryDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInstanceGroup_SecondaryDevice) ProtoMessage() {}

func (x *ModelInstanceGroup_SecondaryDevice) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInstanceGroup_SecondaryDevice.ProtoReflect.Descriptor instead.
func (*ModelInstanceGroup_SecondaryDevice) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ModelInstanceGroup_SecondaryDevice) GetKind() ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind {
	if x != nil {
		return x.Kind
	}
	return ModelInstanceGroup_SecondaryDevice_KIND_NVDLA
}

func (x *ModelInstanceGroup_SecondaryDevice) GetDeviceId() int64 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type ModelVersionPolicy_Latest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumVersions uint32 `protobuf:"varint,1,opt,name=num_versions,json=numVersions,proto3" json:"num_versions,omitempty"`
}

func (x *ModelVersionPolicy_Latest) Reset() {
	*x = ModelVersionPolicy_Latest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionPolicy_Latest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionPolicy_Latest) ProtoMessage() {}

func (x *ModelVersionPolicy_Latest) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionPolicy_Latest.ProtoReflect.Descriptor instead.
func (*ModelVersionPolicy_Latest) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ModelVersionPolicy_Latest) GetNumVersions() uint32 {
	if x != nil {
		return x.NumVersions
	}
	return 0
}

type ModelVersionPolicy_All struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModelVersionPolicy_All) Reset() {
	*x = ModelVersionPolicy_All{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionPolicy_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionPolicy_All) ProtoMessage() {}

func (x *ModelVersionPolicy_All) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionPolicy_All.ProtoReflect.Descriptor instead.
func (*ModelVersionPolicy_All) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{7, 1}
}

type ModelVersionPolicy_Specific struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions []int64 `protobuf:"varint,1,rep,packed,name=versions,proto3" json:"versions,omitempty"`
}

func (x *ModelVersionPolicy_Specific) Reset() {
	*x = ModelVersionPolicy_Specific{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionPolicy_Specific) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionPolicy_Specific) ProtoMessage() {}

func (x *ModelVersionPolicy_Specific) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionPolicy_Specific.ProtoReflect.Descriptor instead.
func (*ModelVersionPolicy_Specific) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{7, 2}
}

func (x *ModelVersionPolicy_Specific) GetVersions() []int64 {
	if x != nil {
		return x.Versions
	}
	return nil
}

type ModelOptimizationPolicy_Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *ModelOptimizationPolicy_Graph) Reset() {
	*x = ModelOptimizationPolicy_Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy_Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy_Graph) ProtoMessage() {}

func (x *ModelOptimizationPolicy_Graph) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy_Graph.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy_Graph) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ModelOptimizationPolicy_Graph) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ModelOptimizationPolicy_Cuda struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graphs           bool                                      `protobuf:"varint,1,opt,name=graphs,proto3" json:"graphs,omitempty"`
	BusyWaitEvents   bool                                      `protobuf:"varint,2,opt,name=busy_wait_events,json=busyWaitEvents,proto3" json:"busy_wait_events,omitempty"`
	GraphSpec        []*ModelOptimizationPolicy_Cuda_GraphSpec `protobuf:"bytes,3,rep,name=graph_spec,json=graphSpec,proto3" json:"graph_spec,omitempty"`
	OutputCopyStream bool                                      `protobuf:"varint,4,opt,name=output_copy_stream,json=outputCopyStream,proto3" json:"output_copy_stream,omitempty"`
}

func (x *ModelOptimizationPolicy_Cuda) Reset() {
	*x = ModelOptimizationPolicy_Cuda{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy_Cuda) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy_Cuda) ProtoMessage() {}

func (x *ModelOptimizationPolicy_Cuda) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy_Cuda.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy_Cuda) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ModelOptimizationPolicy_Cuda) GetGraphs() bool {
	if x != nil {
		return x.Graphs
	}
	return false
}

func (x *ModelOptimizationPolicy_Cuda) GetBusyWaitEvents() bool {
	if x != nil {
		return x.BusyWaitEvents
	}
	return false
}

func (x *ModelOptimizationPolicy_Cuda) GetGraphSpec() []*ModelOptimizationPolicy_Cuda_GraphSpec {
	if x != nil {
		return x.GraphSpec
	}
	return nil
}

func (x *ModelOptimizationPolicy_Cuda) GetOutputCopyStream() bool {
	if x != nil {
		return x.OutputCopyStream
	}
	return false
}

type ModelOptimizationPolicy_ExecutionAccelerators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuExecutionAccelerator []*ModelOptimizationPolicy_ExecutionAccelerators_Accelerator `protobuf:"bytes,1,rep,name=gpu_execution_accelerator,json=gpuExecutionAccelerator,proto3" json:"gpu_execution_accelerator,omitempty"`
	CpuExecutionAccelerator []*ModelOptimizationPolicy_ExecutionAccelerators_Accelerator `protobuf:"bytes,2,rep,name=cpu_execution_accelerator,json=cpuExecutionAccelerator,proto3" json:"cpu_execution_accelerator,omitempty"`
}

func (x *ModelOptimizationPolicy_ExecutionAccelerators) Reset() {
	*x = ModelOptimizationPolicy_ExecutionAccelerators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy_ExecutionAccelerators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy_ExecutionAccelerators) ProtoMessage() {}

func (x *ModelOptimizationPolicy_ExecutionAccelerators) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy_ExecutionAccelerators.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy_ExecutionAccelerators) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 2}
}

func (x *ModelOptimizationPolicy_ExecutionAccelerators) GetGpuExecutionAccelerator() []*ModelOptimizationPolicy_ExecutionAccelerators_Accelerator {
	if x != nil {
		return x.GpuExecutionAccelerator
	}
	return nil
}

func (x *ModelOptimizationPolicy_ExecutionAccelerators) GetCpuExecutionAccelerator() []*ModelOptimizationPolicy_ExecutionAccelerators_Accelerator {
	if x != nil {
		return x.CpuExecutionAccelerator
	}
	return nil
}

type ModelOptimizationPolicy_PinnedMemoryBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *ModelOptimizationPolicy_PinnedMemoryBuffer) Reset() {
	*x = ModelOptimizationPolicy_PinnedMemoryBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy_PinnedMemoryBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy_PinnedMemoryBuffer) ProtoMessage() {}

func (x *ModelOptimizationPolicy_PinnedMemoryBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy_PinnedMemoryBuffer.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy_PinnedMemoryBuffer) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 3}
}

func (x *ModelOptimizationPolicy_PinnedMemoryBuffer) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type ModelOptimizationPolicy_Cuda_GraphSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize       int32                                                    `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Input           map[string]*ModelOptimizationPolicy_Cuda_GraphSpec_Shape `protobuf:"bytes,2,rep,name=input,proto3" json:"input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GraphLowerBound *ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound       `protobuf:"bytes,3,opt,name=graph_lower_bound,json=graphLowerBound,proto3" json:"graph_lower_bound,omitempty"`
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec) Reset() {
	*x = ModelOptimizationPolicy_Cuda_GraphSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy_Cuda_GraphSpec) ProtoMessage() {}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy_Cuda_GraphSpec.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy_Cuda_GraphSpec) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 1, 0}
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec) GetInput() map[string]*ModelOptimizationPolicy_Cuda_GraphSpec_Shape {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec) GetGraphLowerBound() *ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound {
	if x != nil {
		return x.GraphLowerBound
	}
	return nil
}

type ModelOptimizationPolicy_Cuda_GraphSpec_Shape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim []int64 `protobuf:"varint,1,rep,packed,name=dim,proto3" json:"dim,omitempty"`
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_Shape) Reset() {
	*x = ModelOptimizationPolicy_Cuda_GraphSpec_Shape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_Shape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy_Cuda_GraphSpec_Shape) ProtoMessage() {}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_Shape) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy_Cuda_GraphSpec_Shape.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy_Cuda_GraphSpec_Shape) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 1, 0, 0}
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_Shape) GetDim() []int64 {
	if x != nil {
		return x.Dim
	}
	return nil
}

type ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize int32                                                    `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Input     map[string]*ModelOptimizationPolicy_Cuda_GraphSpec_Shape `protobuf:"bytes,2,rep,name=input,proto3" json:"input,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound) Reset() {
	*x = ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound) ProtoMessage() {}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 1, 0, 1}
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound) GetInput() map[string]*ModelOptimizationPolicy_Cuda_GraphSpec_Shape {
	if x != nil {
		return x.Input
	}
	return nil
}

type ModelOptimizationPolicy_ExecutionAccelerators_Accelerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModelOptimizationPolicy_ExecutionAccelerators_Accelerator) Reset() {
	*x = ModelOptimizationPolicy_ExecutionAccelerators_Accelerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOptimizationPolicy_ExecutionAccelerators_Accelerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptimizationPolicy_ExecutionAccelerators_Accelerator) ProtoMessage() {}

func (x *ModelOptimizationPolicy_ExecutionAccelerators_Accelerator) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptimizationPolicy_ExecutionAccelerators_Accelerator.ProtoReflect.Descriptor instead.
func (*ModelOptimizationPolicy_ExecutionAccelerators_Accelerator) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{8, 2, 0}
}

func (x *ModelOptimizationPolicy_ExecutionAccelerators_Accelerator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelOptimizationPolicy_ExecutionAccelerators_Accelerator) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ModelSequenceBatching_Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind           ModelSequenceBatching_Control_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching_Control_Kind" json:"kind,omitempty"`
	Int32FalseTrue []int32                            `protobuf:"varint,2,rep,packed,name=int32_false_true,json=int32FalseTrue,proto3" json:"int32_false_true,omitempty"`
	Fp32FalseTrue  []float32                          `protobuf:"fixed32,3,rep,packed,name=fp32_false_true,json=fp32FalseTrue,proto3" json:"fp32_false_true,omitempty"`
	BoolFalseTrue  []bool                             `protobuf:"varint,5,rep,packed,name=bool_false_true,json=boolFalseTrue,proto3" json:"bool_false_true,omitempty"`
	DataType       DataType                           `protobuf:"varint,4,opt,name=data_type,json=dataType,proto3,enum=experimental.jorge.modelrepo.third_party.triton.DataType" json:"data_type,omitempty"`
}

func (x *ModelSequenceBatching_Control) Reset() {
	*x = ModelSequenceBatching_Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSequenceBatching_Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSequenceBatching_Control) ProtoMessage() {}

func (x *ModelSequenceBatching_Control) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSequenceBatching_Control.ProtoReflect.Descriptor instead.
func (*ModelSequenceBatching_Control) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ModelSequenceBatching_Control) GetKind() ModelSequenceBatching_Control_Kind {
	if x != nil {
		return x.Kind
	}
	return ModelSequenceBatching_Control_CONTROL_SEQUENCE_START
}

func (x *ModelSequenceBatching_Control) GetInt32FalseTrue() []int32 {
	if x != nil {
		return x.Int32FalseTrue
	}
	return nil
}

func (x *ModelSequenceBatching_Control) GetFp32FalseTrue() []float32 {
	if x != nil {
		return x.Fp32FalseTrue
	}
	return nil
}

func (x *ModelSequenceBatching_Control) GetBoolFalseTrue() []bool {
	if x != nil {
		return x.BoolFalseTrue
	}
	return nil
}

func (x *ModelSequenceBatching_Control) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_TYPE_INVALID
}

type ModelSequenceBatching_ControlInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Control []*ModelSequenceBatching_Control `protobuf:"bytes,2,rep,name=control,proto3" json:"control,omitempty"`
}

func (x *ModelSequenceBatching_ControlInput) Reset() {
	*x = ModelSequenceBatching_ControlInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSequenceBatching_ControlInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSequenceBatching_ControlInput) ProtoMessage() {}

func (x *ModelSequenceBatching_ControlInput) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSequenceBatching_ControlInput.ProtoReflect.Descriptor instead.
func (*ModelSequenceBatching_ControlInput) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ModelSequenceBatching_ControlInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelSequenceBatching_ControlInput) GetControl() []*ModelSequenceBatching_Control {
	if x != nil {
		return x.Control
	}
	return nil
}

type ModelSequenceBatching_InitialState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=experimental.jorge.modelrepo.third_party.triton.DataType" json:"data_type,omitempty"`
	Dims     []int64  `protobuf:"varint,2,rep,packed,name=dims,proto3" json:"dims,omitempty"`
	// Types that are assignable to StateData:
	//
	//	*ModelSequenceBatching_InitialState_ZeroData
	//	*ModelSequenceBatching_InitialState_DataFile
	StateData isModelSequenceBatching_InitialState_StateData `protobuf_oneof:"state_data"`
	Name      string                                         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ModelSequenceBatching_InitialState) Reset() {
	*x = ModelSequenceBatching_InitialState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSequenceBatching_InitialState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSequenceBatching_InitialState) ProtoMessage() {}

func (x *ModelSequenceBatching_InitialState) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSequenceBatching_InitialState.ProtoReflect.Descriptor instead.
func (*ModelSequenceBatching_InitialState) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{11, 2}
}

func (x *ModelSequenceBatching_InitialState) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_TYPE_INVALID
}

func (x *ModelSequenceBatching_InitialState) GetDims() []int64 {
	if x != nil {
		return x.Dims
	}
	return nil
}

func (m *ModelSequenceBatching_InitialState) GetStateData() isModelSequenceBatching_InitialState_StateData {
	if m != nil {
		return m.StateData
	}
	return nil
}

func (x *ModelSequenceBatching_InitialState) GetZeroData() bool {
	if x, ok := x.GetStateData().(*ModelSequenceBatching_InitialState_ZeroData); ok {
		return x.ZeroData
	}
	return false
}

func (x *ModelSequenceBatching_InitialState) GetDataFile() string {
	if x, ok := x.GetStateData().(*ModelSequenceBatching_InitialState_DataFile); ok {
		return x.DataFile
	}
	return ""
}

func (x *ModelSequenceBatching_InitialState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type isModelSequenceBatching_InitialState_StateData interface {
	isModelSequenceBatching_InitialState_StateData()
}

type ModelSequenceBatching_InitialState_ZeroData struct {
	ZeroData bool `protobuf:"varint,3,opt,name=zero_data,json=zeroData,proto3,oneof"`
}

type ModelSequenceBatching_InitialState_DataFile struct {
	DataFile string `protobuf:"bytes,4,opt,name=data_file,json=dataFile,proto3,oneof"`
}

func (*ModelSequenceBatching_InitialState_ZeroData) isModelSequenceBatching_InitialState_StateData() {
}

func (*ModelSequenceBatching_InitialState_DataFile) isModelSequenceBatching_InitialState_StateData() {
}

type ModelSequenceBatching_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputName    string                                `protobuf:"bytes,1,opt,name=input_name,json=inputName,proto3" json:"input_name,omitempty"`
	OutputName   string                                `protobuf:"bytes,2,opt,name=output_name,json=outputName,proto3" json:"output_name,omitempty"`
	DataType     DataType                              `protobuf:"varint,3,opt,name=data_type,json=dataType,proto3,enum=experimental.jorge.modelrepo.third_party.triton.DataType" json:"data_type,omitempty"`
	Dims         []int64                               `protobuf:"varint,4,rep,packed,name=dims,proto3" json:"dims,omitempty"`
	InitialState []*ModelSequenceBatching_InitialState `protobuf:"bytes,5,rep,name=initial_state,json=initialState,proto3" json:"initial_state,omitempty"`
}

func (x *ModelSequenceBatching_State) Reset() {
	*x = ModelSequenceBatching_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSequenceBatching_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSequenceBatching_State) ProtoMessage() {}

func (x *ModelSequenceBatching_State) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSequenceBatching_State.ProtoReflect.Descriptor instead.
func (*ModelSequenceBatching_State) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{11, 3}
}

func (x *ModelSequenceBatching_State) GetInputName() string {
	if x != nil {
		return x.InputName
	}
	return ""
}

func (x *ModelSequenceBatching_State) GetOutputName() string {
	if x != nil {
		return x.OutputName
	}
	return ""
}

func (x *ModelSequenceBatching_State) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_TYPE_INVALID
}

func (x *ModelSequenceBatching_State) GetDims() []int64 {
	if x != nil {
		return x.Dims
	}
	return nil
}

func (x *ModelSequenceBatching_State) GetInitialState() []*ModelSequenceBatching_InitialState {
	if x != nil {
		return x.InitialState
	}
	return nil
}

type ModelSequenceBatching_StrategyDirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxQueueDelayMicroseconds uint64  `protobuf:"varint,1,opt,name=max_queue_delay_microseconds,json=maxQueueDelayMicroseconds,proto3" json:"max_queue_delay_microseconds,omitempty"`
	MinimumSlotUtilization    float32 `protobuf:"fixed32,2,opt,name=minimum_slot_utilization,json=minimumSlotUtilization,proto3" json:"minimum_slot_utilization,omitempty"`
}

func (x *ModelSequenceBatching_StrategyDirect) Reset() {
	*x = ModelSequenceBatching_StrategyDirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSequenceBatching_StrategyDirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSequenceBatching_StrategyDirect) ProtoMessage() {}

func (x *ModelSequenceBatching_StrategyDirect) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSequenceBatching_StrategyDirect.ProtoReflect.Descriptor instead.
func (*ModelSequenceBatching_StrategyDirect) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{11, 4}
}

func (x *ModelSequenceBatching_StrategyDirect) GetMaxQueueDelayMicroseconds() uint64 {
	if x != nil {
		return x.MaxQueueDelayMicroseconds
	}
	return 0
}

func (x *ModelSequenceBatching_StrategyDirect) GetMinimumSlotUtilization() float32 {
	if x != nil {
		return x.MinimumSlotUtilization
	}
	return 0
}

type ModelSequenceBatching_StrategyOldest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCandidateSequences     int32   `protobuf:"varint,1,opt,name=max_candidate_sequences,json=maxCandidateSequences,proto3" json:"max_candidate_sequences,omitempty"`
	PreferredBatchSize        []int32 `protobuf:"varint,2,rep,packed,name=preferred_batch_size,json=preferredBatchSize,proto3" json:"preferred_batch_size,omitempty"`
	MaxQueueDelayMicroseconds uint64  `protobuf:"varint,3,opt,name=max_queue_delay_microseconds,json=maxQueueDelayMicroseconds,proto3" json:"max_queue_delay_microseconds,omitempty"`
}

func (x *ModelSequenceBatching_StrategyOldest) Reset() {
	*x = ModelSequenceBatching_StrategyOldest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelSequenceBatching_StrategyOldest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelSequenceBatching_StrategyOldest) ProtoMessage() {}

func (x *ModelSequenceBatching_StrategyOldest) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelSequenceBatching_StrategyOldest.ProtoReflect.Descriptor instead.
func (*ModelSequenceBatching_StrategyOldest) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{11, 5}
}

func (x *ModelSequenceBatching_StrategyOldest) GetMaxCandidateSequences() int32 {
	if x != nil {
		return x.MaxCandidateSequences
	}
	return 0
}

func (x *ModelSequenceBatching_StrategyOldest) GetPreferredBatchSize() []int32 {
	if x != nil {
		return x.PreferredBatchSize
	}
	return nil
}

func (x *ModelSequenceBatching_StrategyOldest) GetMaxQueueDelayMicroseconds() uint64 {
	if x != nil {
		return x.MaxQueueDelayMicroseconds
	}
	return 0
}

type ModelEnsembling_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName      string            `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ModelVersion   int64             `protobuf:"varint,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	InputMap       map[string]string `protobuf:"bytes,3,rep,name=input_map,json=inputMap,proto3" json:"input_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OutputMap      map[string]string `protobuf:"bytes,4,rep,name=output_map,json=outputMap,proto3" json:"output_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ModelNamespace string            `protobuf:"bytes,5,opt,name=model_namespace,json=modelNamespace,proto3" json:"model_namespace,omitempty"`
}

func (x *ModelEnsembling_Step) Reset() {
	*x = ModelEnsembling_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelEnsembling_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelEnsembling_Step) ProtoMessage() {}

func (x *ModelEnsembling_Step) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelEnsembling_Step.ProtoReflect.Descriptor instead.
func (*ModelEnsembling_Step) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ModelEnsembling_Step) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelEnsembling_Step) GetModelVersion() int64 {
	if x != nil {
		return x.ModelVersion
	}
	return 0
}

func (x *ModelEnsembling_Step) GetInputMap() map[string]string {
	if x != nil {
		return x.InputMap
	}
	return nil
}

func (x *ModelEnsembling_Step) GetOutputMap() map[string]string {
	if x != nil {
		return x.OutputMap
	}
	return nil
}

func (x *ModelEnsembling_Step) GetModelNamespace() string {
	if x != nil {
		return x.ModelNamespace
	}
	return ""
}

type ModelWarmup_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=experimental.jorge.modelrepo.third_party.triton.DataType" json:"data_type,omitempty"`
	Dims     []int64  `protobuf:"varint,2,rep,packed,name=dims,proto3" json:"dims,omitempty"`
	// Types that are assignable to InputDataType:
	//
	//	*ModelWarmup_Input_ZeroData
	//	*ModelWarmup_Input_RandomData
	//	*ModelWarmup_Input_InputDataFile
	InputDataType isModelWarmup_Input_InputDataType `protobuf_oneof:"input_data_type"`
}

func (x *ModelWarmup_Input) Reset() {
	*x = ModelWarmup_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelWarmup_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelWarmup_Input) ProtoMessage() {}

func (x *ModelWarmup_Input) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelWarmup_Input.ProtoReflect.Descriptor instead.
func (*ModelWarmup_Input) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ModelWarmup_Input) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_TYPE_INVALID
}

func (x *ModelWarmup_Input) GetDims() []int64 {
	if x != nil {
		return x.Dims
	}
	return nil
}

func (m *ModelWarmup_Input) GetInputDataType() isModelWarmup_Input_InputDataType {
	if m != nil {
		return m.InputDataType
	}
	return nil
}

func (x *ModelWarmup_Input) GetZeroData() bool {
	if x, ok := x.GetInputDataType().(*ModelWarmup_Input_ZeroData); ok {
		return x.ZeroData
	}
	return false
}

func (x *ModelWarmup_Input) GetRandomData() bool {
	if x, ok := x.GetInputDataType().(*ModelWarmup_Input_RandomData); ok {
		return x.RandomData
	}
	return false
}

func (x *ModelWarmup_Input) GetInputDataFile() string {
	if x, ok := x.GetInputDataType().(*ModelWarmup_Input_InputDataFile); ok {
		return x.InputDataFile
	}
	return ""
}

type isModelWarmup_Input_InputDataType interface {
	isModelWarmup_Input_InputDataType()
}

type ModelWarmup_Input_ZeroData struct {
	ZeroData bool `protobuf:"varint,3,opt,name=zero_data,json=zeroData,proto3,oneof"`
}

type ModelWarmup_Input_RandomData struct {
	RandomData bool `protobuf:"varint,4,opt,name=random_data,json=randomData,proto3,oneof"`
}

type ModelWarmup_Input_InputDataFile struct {
	InputDataFile string `protobuf:"bytes,5,opt,name=input_data_file,json=inputDataFile,proto3,oneof"`
}

func (*ModelWarmup_Input_ZeroData) isModelWarmup_Input_InputDataType() {}

func (*ModelWarmup_Input_RandomData) isModelWarmup_Input_InputDataType() {}

func (*ModelWarmup_Input_InputDataFile) isModelWarmup_Input_InputDataType() {}

type ModelRepositoryAgents_Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModelRepositoryAgents_Agent) Reset() {
	*x = ModelRepositoryAgents_Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelRepositoryAgents_Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelRepositoryAgents_Agent) ProtoMessage() {}

func (x *ModelRepositoryAgents_Agent) ProtoReflect() protoreflect.Message {
	mi := &file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelRepositoryAgents_Agent.ProtoReflect.Descriptor instead.
func (*ModelRepositoryAgents_Agent) Descriptor() ([]byte, []int) {
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ModelRepositoryAgents_Agent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelRepositoryAgents_Agent) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_experimental_jorge_modelrepo_third_party_triton_model_config_proto protoreflect.FileDescriptor

var file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDesc = []byte{
	0x0a, 0x42, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x6a,
	0x6f, 0x72, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x74, 0x72, 0x69, 0x74, 0x6f,
	0x6e, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x68, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72,
	0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x1a, 0x4c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86,
	0x06, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x64, 0x0a,
	0x0c, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a,
	0xd2, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x7b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x67, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f,
	0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x25, 0x0a,
	0x13, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x56, 0x44,
	0x4c, 0x41, 0x10, 0x00, 0x22, 0x41, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x47, 0x50, 0x55, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x03, 0x22, 0x2a, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x22, 0xf6, 0x03, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5a,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f,
	0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x12, 0x5d,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a,
	0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x68, 0x61, 0x70, 0x65, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0x3b, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x48, 0x57, 0x43, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x43, 0x48, 0x57, 0x10, 0x02, 0x22, 0xbb, 0x02, 0x0a,
	0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x12, 0x5d, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72,
	0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x22, 0xce, 0x03, 0x0a, 0x0a, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x56, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x43, 0x43, 0x55,
	0x4d, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x5f,
	0x53, 0x48, 0x41, 0x50, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x50, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x50,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x10, 0x05, 0x22, 0xd4, 0x01, 0x0a, 0x0b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x2a, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x22,
	0x0a, 0x1e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x43, 0x41, 0x54, 0x54, 0x45, 0x52, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x50, 0x45,
	0x10, 0x00, 0x22, 0xb0, 0x03, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x64, 0x0a, 0x06, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x5b, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f,
	0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x1a, 0x2b, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x05, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x1a, 0x26, 0x0a, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xa8, 0x15, 0x0a, 0x17, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x64, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x72, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x04, 0x63,
	0x75, 0x64, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x52, 0x04, 0x63, 0x75, 0x64, 0x61, 0x12, 0x95,
	0x01, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5e, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a,
	0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x67, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x65, 0x61, 0x67, 0x65, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x1a, 0x1d, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a,
	0xa9, 0x08, 0x0a, 0x04, 0x43, 0x75, 0x64, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x75, 0x73, 0x79,
	0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f,
	0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x2e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x70,
	0x79, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x1a, 0xb8, 0x06, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x78, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x8e, 0x01, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x75,
	0x64, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x19, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x64, 0x69, 0x6d, 0x1a, 0xcb, 0x02, 0x0a, 0x0a, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6d, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f,
	0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x64, 0x61,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x73, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5d, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x43, 0x75, 0x64, 0x61, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x97, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x73, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5d, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f,
	0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x75, 0x64, 0x61,
	0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe9, 0x04, 0x0a, 0x15,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x19, 0x67, 0x70, 0x75, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x17, 0x67, 0x70, 0x75, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xa6,
	0x01, 0x0a, 0x19, 0x63, 0x70, 0x75, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x17,
	0x63, 0x70, 0x75, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xfd, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x7a, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x2c, 0x0a, 0x12, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02,
	0x22, 0xd0, 0x02, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x76, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72,
	0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x26, 0x0a, 0x0d, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x10, 0x01, 0x22, 0xab, 0x05, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f,
	0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x73, 0x0a, 0x14, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x92, 0x01, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5e, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74,
	0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x89, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd5, 0x0f, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x6f, 0x0a, 0x06, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x6f, 0x0a, 0x06,
	0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4f, 0x6c, 0x64,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x78, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x62, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xbb, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x67, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x54, 0x72, 0x75, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x66, 0x70, 0x33, 0x32, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x74, 0x72,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x70, 0x33, 0x32, 0x46, 0x61,
	0x6c, 0x73, 0x65, 0x54, 0x72, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x54, 0x72, 0x75, 0x65, 0x12,
	0x56, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x75, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x49, 0x44, 0x10, 0x03, 0x1a, 0x8c,
	0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x68, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0xda, 0x01,
	0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f,
	0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x7a, 0x65,
	0x72, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x7a, 0x65, 0x72, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xad, 0x02, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x69, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x6d, 0x73,
	0x12, 0x78, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x0e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a,
	0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x55, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbb, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x4f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61,
	0x78, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6d, 0x61, 0x78,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xc4, 0x04, 0x0a, 0x0f, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x1a, 0xd5, 0x03, 0x0a, 0x04, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x73, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x0f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x33, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x04, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57,
	0x61, 0x72, 0x6d, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x60, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0xf2, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72,
	0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x7a, 0x65, 0x72,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x7d, 0x0a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x61, 0x72,
	0x6d, 0x75, 0x70, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x70, 0x5f, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x70, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x75, 0x70, 0x6c, 0x65, 0x64, 0x22,
	0xd8, 0x02, 0x0a, 0x15, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x06, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0xd8, 0x01, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7c, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x5c, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f,
	0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x12, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xf8, 0x12, 0x0a, 0x0b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x6a, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65,
	0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74,
	0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x5c, 0x0a,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5f, 0x0a, 0x0c, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f,
	0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x6c, 0x0a, 0x0c,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x10, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x75,
	0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x73, 0x0a, 0x13, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a,
	0x12, 0x63, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x6d, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e,
	0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x12, 0x6c,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70,
	0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x12, 0x6b, 0x0a,
	0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x18, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72,
	0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x16, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7e,
	0x0a, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a,
	0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f,
	0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6a,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x2e, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7e,
	0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x6a, 0x6f, 0x72, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70,
	0x6f, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2a, 0xfa, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54,
	0x36, 0x34, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x38, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x31,
	0x36, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x36,
	0x34, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x50, 0x31, 0x36,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x50, 0x33, 0x32, 0x10,
	0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x50, 0x36, 0x34, 0x10, 0x0c,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x46, 0x31, 0x36, 0x10, 0x0e,
	0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
	0x6f, 0x78, 0x65, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x76, 0x6f, 0x78, 0x65, 0x6c, 0x2f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x6a, 0x6f, 0x72, 0x67, 0x65,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x3b, 0x74, 0x72,
	0x69, 0x74, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescOnce sync.Once
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescData = file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDesc
)

func file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescGZIP() []byte {
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescOnce.Do(func() {
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescData)
	})
	return file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDescData
}

var file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes = make([]protoimpl.MessageInfo, 53)
var file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_goTypes = []interface{}{
	(DataType)(0),                // 0: experimental.jorge.modelrepo.third_party.triton.DataType
	(ModelInstanceGroup_Kind)(0), // 1: experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.Kind
	(ModelInstanceGroup_SecondaryDevice_SecondaryDeviceKind)(0), // 2: experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.SecondaryDevice.SecondaryDeviceKind
	(ModelInput_Format)(0),                                    // 3: experimental.jorge.modelrepo.third_party.triton.ModelInput.Format
	(BatchInput_Kind)(0),                                      // 4: experimental.jorge.modelrepo.third_party.triton.BatchInput.Kind
	(BatchOutput_Kind)(0),                                     // 5: experimental.jorge.modelrepo.third_party.triton.BatchOutput.Kind
	(ModelOptimizationPolicy_ModelPriority)(0),                // 6: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ModelPriority
	(ModelQueuePolicy_TimeoutAction)(0),                       // 7: experimental.jorge.modelrepo.third_party.triton.ModelQueuePolicy.TimeoutAction
	(ModelSequenceBatching_Control_Kind)(0),                   // 8: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.Control.Kind
	(*ModelRateLimiter)(nil),                                  // 9: experimental.jorge.modelrepo.third_party.triton.ModelRateLimiter
	(*ModelInstanceGroup)(nil),                                // 10: experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup
	(*ModelTensorReshape)(nil),                                // 11: experimental.jorge.modelrepo.third_party.triton.ModelTensorReshape
	(*ModelInput)(nil),                                        // 12: experimental.jorge.modelrepo.third_party.triton.ModelInput
	(*ModelOutput)(nil),                                       // 13: experimental.jorge.modelrepo.third_party.triton.ModelOutput
	(*BatchInput)(nil),                                        // 14: experimental.jorge.modelrepo.third_party.triton.BatchInput
	(*BatchOutput)(nil),                                       // 15: experimental.jorge.modelrepo.third_party.triton.BatchOutput
	(*ModelVersionPolicy)(nil),                                // 16: experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy
	(*ModelOptimizationPolicy)(nil),                           // 17: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy
	(*ModelQueuePolicy)(nil),                                  // 18: experimental.jorge.modelrepo.third_party.triton.ModelQueuePolicy
	(*ModelDynamicBatching)(nil),                              // 19: experimental.jorge.modelrepo.third_party.triton.ModelDynamicBatching
	(*ModelSequenceBatching)(nil),                             // 20: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching
	(*ModelEnsembling)(nil),                                   // 21: experimental.jorge.modelrepo.third_party.triton.ModelEnsembling
	(*ModelParameter)(nil),                                    // 22: experimental.jorge.modelrepo.third_party.triton.ModelParameter
	(*ModelWarmup)(nil),                                       // 23: experimental.jorge.modelrepo.third_party.triton.ModelWarmup
	(*ModelOperations)(nil),                                   // 24: experimental.jorge.modelrepo.third_party.triton.ModelOperations
	(*ModelTransactionPolicy)(nil),                            // 25: experimental.jorge.modelrepo.third_party.triton.ModelTransactionPolicy
	(*ModelRepositoryAgents)(nil),                             // 26: experimental.jorge.modelrepo.third_party.triton.ModelRepositoryAgents
	(*ModelResponseCache)(nil),                                // 27: experimental.jorge.modelrepo.third_party.triton.ModelResponseCache
	(*ModelConfig)(nil),                                       // 28: experimental.jorge.modelrepo.third_party.triton.ModelConfig
	(*ModelRateLimiter_Resource)(nil),                         // 29: experimental.jorge.modelrepo.third_party.triton.ModelRateLimiter.Resource
	(*ModelInstanceGroup_SecondaryDevice)(nil),                // 30: experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.SecondaryDevice
	(*ModelVersionPolicy_Latest)(nil),                         // 31: experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.Latest
	(*ModelVersionPolicy_All)(nil),                            // 32: experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.All
	(*ModelVersionPolicy_Specific)(nil),                       // 33: experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.Specific
	(*ModelOptimizationPolicy_Graph)(nil),                     // 34: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Graph
	(*ModelOptimizationPolicy_Cuda)(nil),                      // 35: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda
	(*ModelOptimizationPolicy_ExecutionAccelerators)(nil),     // 36: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators
	(*ModelOptimizationPolicy_PinnedMemoryBuffer)(nil),        // 37: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.PinnedMemoryBuffer
	(*ModelOptimizationPolicy_Cuda_GraphSpec)(nil),            // 38: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec
	(*ModelOptimizationPolicy_Cuda_GraphSpec_Shape)(nil),      // 39: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.Shape
	(*ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound)(nil), // 40: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound
	nil, // 41: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.InputEntry
	nil, // 42: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound.InputEntry
	(*ModelOptimizationPolicy_ExecutionAccelerators_Accelerator)(nil), // 43: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator
	nil,                                   // 44: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator.ParametersEntry
	nil,                                   // 45: experimental.jorge.modelrepo.third_party.triton.ModelDynamicBatching.PriorityQueuePolicyEntry
	(*ModelSequenceBatching_Control)(nil), // 46: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.Control
	(*ModelSequenceBatching_ControlInput)(nil),   // 47: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.ControlInput
	(*ModelSequenceBatching_InitialState)(nil),   // 48: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.InitialState
	(*ModelSequenceBatching_State)(nil),          // 49: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.State
	(*ModelSequenceBatching_StrategyDirect)(nil), // 50: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.StrategyDirect
	(*ModelSequenceBatching_StrategyOldest)(nil), // 51: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.StrategyOldest
	(*ModelEnsembling_Step)(nil),                 // 52: experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.Step
	nil,                                          // 53: experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.Step.InputMapEntry
	nil,                                          // 54: experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.Step.OutputMapEntry
	(*ModelWarmup_Input)(nil),                    // 55: experimental.jorge.modelrepo.third_party.triton.ModelWarmup.Input
	nil,                                          // 56: experimental.jorge.modelrepo.third_party.triton.ModelWarmup.InputsEntry
	(*ModelRepositoryAgents_Agent)(nil),          // 57: experimental.jorge.modelrepo.third_party.triton.ModelRepositoryAgents.Agent
	nil,                                          // 58: experimental.jorge.modelrepo.third_party.triton.ModelRepositoryAgents.Agent.ParametersEntry
	nil,                                          // 59: experimental.jorge.modelrepo.third_party.triton.ModelConfig.CcModelFilenamesEntry
	nil,                                          // 60: experimental.jorge.modelrepo.third_party.triton.ModelConfig.MetricTagsEntry
	nil,                                          // 61: experimental.jorge.modelrepo.third_party.triton.ModelConfig.ParametersEntry
}
var file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_depIdxs = []int32{
	29, // 0: experimental.jorge.modelrepo.third_party.triton.ModelRateLimiter.resources:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelRateLimiter.Resource
	1,  // 1: experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.kind:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.Kind
	9,  // 2: experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.rate_limiter:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelRateLimiter
	30, // 3: experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.secondary_devices:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.SecondaryDevice
	0,  // 4: experimental.jorge.modelrepo.third_party.triton.ModelInput.data_type:type_name -> experimental.jorge.modelrepo.third_party.triton.DataType
	3,  // 5: experimental.jorge.modelrepo.third_party.triton.ModelInput.format:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelInput.Format
	11, // 6: experimental.jorge.modelrepo.third_party.triton.ModelInput.reshape:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelTensorReshape
	0,  // 7: experimental.jorge.modelrepo.third_party.triton.ModelOutput.data_type:type_name -> experimental.jorge.modelrepo.third_party.triton.DataType
	11, // 8: experimental.jorge.modelrepo.third_party.triton.ModelOutput.reshape:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelTensorReshape
	4,  // 9: experimental.jorge.modelrepo.third_party.triton.BatchInput.kind:type_name -> experimental.jorge.modelrepo.third_party.triton.BatchInput.Kind
	0,  // 10: experimental.jorge.modelrepo.third_party.triton.BatchInput.data_type:type_name -> experimental.jorge.modelrepo.third_party.triton.DataType
	5,  // 11: experimental.jorge.modelrepo.third_party.triton.BatchOutput.kind:type_name -> experimental.jorge.modelrepo.third_party.triton.BatchOutput.Kind
	31, // 12: experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.latest:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.Latest
	32, // 13: experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.all:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.All
	33, // 14: experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.specific:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy.Specific
	34, // 15: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.graph:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Graph
	6,  // 16: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.priority:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ModelPriority
	35, // 17: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.cuda:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda
	36, // 18: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.execution_accelerators:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators
	37, // 19: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.input_pinned_memory:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.PinnedMemoryBuffer
	37, // 20: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.output_pinned_memory:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.PinnedMemoryBuffer
	7,  // 21: experimental.jorge.modelrepo.third_party.triton.ModelQueuePolicy.timeout_action:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelQueuePolicy.TimeoutAction
	18, // 22: experimental.jorge.modelrepo.third_party.triton.ModelDynamicBatching.default_queue_policy:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelQueuePolicy
	45, // 23: experimental.jorge.modelrepo.third_party.triton.ModelDynamicBatching.priority_queue_policy:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelDynamicBatching.PriorityQueuePolicyEntry
	50, // 24: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.direct:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.StrategyDirect
	51, // 25: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.oldest:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.StrategyOldest
	47, // 26: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.control_input:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.ControlInput
	49, // 27: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.state:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.State
	52, // 28: experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.step:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.Step
	56, // 29: experimental.jorge.modelrepo.third_party.triton.ModelWarmup.inputs:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelWarmup.InputsEntry
	57, // 30: experimental.jorge.modelrepo.third_party.triton.ModelRepositoryAgents.agents:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelRepositoryAgents.Agent
	16, // 31: experimental.jorge.modelrepo.third_party.triton.ModelConfig.version_policy:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelVersionPolicy
	12, // 32: experimental.jorge.modelrepo.third_party.triton.ModelConfig.input:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelInput
	13, // 33: experimental.jorge.modelrepo.third_party.triton.ModelConfig.output:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOutput
	14, // 34: experimental.jorge.modelrepo.third_party.triton.ModelConfig.batch_input:type_name -> experimental.jorge.modelrepo.third_party.triton.BatchInput
	15, // 35: experimental.jorge.modelrepo.third_party.triton.ModelConfig.batch_output:type_name -> experimental.jorge.modelrepo.third_party.triton.BatchOutput
	17, // 36: experimental.jorge.modelrepo.third_party.triton.ModelConfig.optimization:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy
	19, // 37: experimental.jorge.modelrepo.third_party.triton.ModelConfig.dynamic_batching:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelDynamicBatching
	20, // 38: experimental.jorge.modelrepo.third_party.triton.ModelConfig.sequence_batching:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching
	21, // 39: experimental.jorge.modelrepo.third_party.triton.ModelConfig.ensemble_scheduling:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelEnsembling
	10, // 40: experimental.jorge.modelrepo.third_party.triton.ModelConfig.instance_group:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup
	59, // 41: experimental.jorge.modelrepo.third_party.triton.ModelConfig.cc_model_filenames:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelConfig.CcModelFilenamesEntry
	60, // 42: experimental.jorge.modelrepo.third_party.triton.ModelConfig.metric_tags:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelConfig.MetricTagsEntry
	61, // 43: experimental.jorge.modelrepo.third_party.triton.ModelConfig.parameters:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelConfig.ParametersEntry
	23, // 44: experimental.jorge.modelrepo.third_party.triton.ModelConfig.model_warmup:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelWarmup
	24, // 45: experimental.jorge.modelrepo.third_party.triton.ModelConfig.model_operations:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOperations
	25, // 46: experimental.jorge.modelrepo.third_party.triton.ModelConfig.model_transaction_policy:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelTransactionPolicy
	26, // 47: experimental.jorge.modelrepo.third_party.triton.ModelConfig.model_repository_agents:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelRepositoryAgents
	27, // 48: experimental.jorge.modelrepo.third_party.triton.ModelConfig.response_cache:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelResponseCache
	2,  // 49: experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.SecondaryDevice.kind:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelInstanceGroup.SecondaryDevice.SecondaryDeviceKind
	38, // 50: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.graph_spec:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec
	43, // 51: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators.gpu_execution_accelerator:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator
	43, // 52: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators.cpu_execution_accelerator:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator
	41, // 53: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.input:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.InputEntry
	40, // 54: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.graph_lower_bound:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound
	42, // 55: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound.input:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound.InputEntry
	39, // 56: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.InputEntry.value:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.Shape
	39, // 57: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.LowerBound.InputEntry.value:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.Cuda.GraphSpec.Shape
	44, // 58: experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator.parameters:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelOptimizationPolicy.ExecutionAccelerators.Accelerator.ParametersEntry
	18, // 59: experimental.jorge.modelrepo.third_party.triton.ModelDynamicBatching.PriorityQueuePolicyEntry.value:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelQueuePolicy
	8,  // 60: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.Control.kind:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.Control.Kind
	0,  // 61: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.Control.data_type:type_name -> experimental.jorge.modelrepo.third_party.triton.DataType
	46, // 62: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.ControlInput.control:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.Control
	0,  // 63: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.InitialState.data_type:type_name -> experimental.jorge.modelrepo.third_party.triton.DataType
	0,  // 64: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.State.data_type:type_name -> experimental.jorge.modelrepo.third_party.triton.DataType
	48, // 65: experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.State.initial_state:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelSequenceBatching.InitialState
	53, // 66: experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.Step.input_map:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.Step.InputMapEntry
	54, // 67: experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.Step.output_map:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelEnsembling.Step.OutputMapEntry
	0,  // 68: experimental.jorge.modelrepo.third_party.triton.ModelWarmup.Input.data_type:type_name -> experimental.jorge.modelrepo.third_party.triton.DataType
	55, // 69: experimental.jorge.modelrepo.third_party.triton.ModelWarmup.InputsEntry.value:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelWarmup.Input
	58, // 70: experimental.jorge.modelrepo.third_party.triton.ModelRepositoryAgents.Agent.parameters:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelRepositoryAgents.Agent.ParametersEntry
	22, // 71: experimental.jorge.modelrepo.third_party.triton.ModelConfig.ParametersEntry.value:type_name -> experimental.jorge.modelrepo.third_party.triton.ModelParameter
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_init() }
func file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_init() {
	if File_experimental_jorge_modelrepo_third_party_triton_model_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelRateLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInstanceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTensorReshape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelQueuePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelDynamicBatching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSequenceBatching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelEnsembling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelWarmup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelTransactionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelRepositoryAgents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelResponseCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelRateLimiter_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelInstanceGroup_SecondaryDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionPolicy_Latest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionPolicy_All); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionPolicy_Specific); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy_Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy_Cuda); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy_ExecutionAccelerators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy_PinnedMemoryBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy_Cuda_GraphSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy_Cuda_GraphSpec_Shape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy_Cuda_GraphSpec_LowerBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOptimizationPolicy_ExecutionAccelerators_Accelerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSequenceBatching_Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSequenceBatching_ControlInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSequenceBatching_InitialState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSequenceBatching_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSequenceBatching_StrategyDirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelSequenceBatching_StrategyOldest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelEnsembling_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelWarmup_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelRepositoryAgents_Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ModelVersionPolicy_Latest_)(nil),
		(*ModelVersionPolicy_All_)(nil),
		(*ModelVersionPolicy_Specific_)(nil),
	}
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ModelSequenceBatching_Direct)(nil),
		(*ModelSequenceBatching_Oldest)(nil),
	}
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ModelConfig_DynamicBatching)(nil),
		(*ModelConfig_SequenceBatching)(nil),
		(*ModelConfig_EnsembleScheduling)(nil),
	}
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*ModelSequenceBatching_InitialState_ZeroData)(nil),
		(*ModelSequenceBatching_InitialState_DataFile)(nil),
	}
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*ModelWarmup_Input_ZeroData)(nil),
		(*ModelWarmup_Input_RandomData)(nil),
		(*ModelWarmup_Input_InputDataFile)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   53,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_goTypes,
		DependencyIndexes: file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_depIdxs,
		EnumInfos:         file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_enumTypes,
		MessageInfos:      file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_msgTypes,
	}.Build()
	File_experimental_jorge_modelrepo_third_party_triton_model_config_proto = out.File
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_rawDesc = nil
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_goTypes = nil
	file_experimental_jorge_modelrepo_third_party_triton_model_config_proto_depIdxs = nil
}
