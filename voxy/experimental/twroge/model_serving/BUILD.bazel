load("@pip_deps//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")

package(default_visibility = ["//visibility:public"])

py_binary(
    name = "triton_example",
    srcs = ["triton_example.py"],
    deps = [
        ":triton",
        "//core/execution/runners:develop",
    ],
)

py_binary(
    name = "ensemble_setup_yolo",
    srcs = ["ensemble_setup_yolo.py"],
    visibility = ["//visibility:public"],
    # these are all the dependencies for the ensemble setup script
    deps = [
        requirement("torch"),
        requirement("numpy"),
        requirement("tritonclient"),
        ":triton",
        "//core/structs",
        "//lib/infra/utils:resolve_model_path",
        "//lib/ml/inference/backends:base",
        "//lib/ml/inference/tasks/object_detection_2d/yolov5:post_processing_model",
        "//lib/ml/inference/tasks/object_detection_2d/yolov5:pre_processing_model",
        "//lib/ml/inference/tasks/object_detection_2d/yolov5:utils",
    ],
)

py_library(
    name = "ensemble_provider",
    srcs = ["ensemble_provider.py"],
    visibility = ["//visibility:public"],
    deps = [
        requirement("torch"),
        ":triton",
        "//lib/ml/inference/backends:torchscript",
        "//lib/ml/inference/backends:trt",
        "//lib/ml/inference/tasks/object_detection_2d/yolov5:post_processing_model",
        "//lib/ml/inference/tasks/object_detection_2d/yolov5:utils",
    ],
)
