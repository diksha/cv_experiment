// Code generated by counterfeiter. DO NOT EDIT.
package buildtritonfakes

import (
	"sync"

	cirruspb "github.com/voxel-ai/voxel/protos/perception/cirrus/v1"
	graphconfigpb "github.com/voxel-ai/voxel/protos/perception/graph_config/v1"
	"github.com/voxel-ai/voxel/services/perception/cirrus/cmd/buildtriton"
)

type FakeTritonConfigInterface struct {
	GetGraphConfigFromGraphModelRepoStub        func(map[string]*cirruspb.ProductionGraphModelRepo) (map[string]*graphconfigpb.GraphConfig, error)
	getGraphConfigFromGraphModelRepoMutex       sync.RWMutex
	getGraphConfigFromGraphModelRepoArgsForCall []struct {
		arg1 map[string]*cirruspb.ProductionGraphModelRepo
	}
	getGraphConfigFromGraphModelRepoReturns struct {
		result1 map[string]*graphconfigpb.GraphConfig
		result2 error
	}
	getGraphConfigFromGraphModelRepoReturnsOnCall map[int]struct {
		result1 map[string]*graphconfigpb.GraphConfig
		result2 error
	}
	GetModelsFromConfigStub        func(string) (map[string]*cirruspb.Model, map[string]*cirruspb.Ensemble, error)
	getModelsFromConfigMutex       sync.RWMutex
	getModelsFromConfigArgsForCall []struct {
		arg1 string
	}
	getModelsFromConfigReturns struct {
		result1 map[string]*cirruspb.Model
		result2 map[string]*cirruspb.Ensemble
		result3 error
	}
	getModelsFromConfigReturnsOnCall map[int]struct {
		result1 map[string]*cirruspb.Model
		result2 map[string]*cirruspb.Ensemble
		result3 error
	}
	GetProductionGraphModelRepoFromConfigStub        func(string) (map[string]*cirruspb.ProductionGraphModelRepo, error)
	getProductionGraphModelRepoFromConfigMutex       sync.RWMutex
	getProductionGraphModelRepoFromConfigArgsForCall []struct {
		arg1 string
	}
	getProductionGraphModelRepoFromConfigReturns struct {
		result1 map[string]*cirruspb.ProductionGraphModelRepo
		result2 error
	}
	getProductionGraphModelRepoFromConfigReturnsOnCall map[int]struct {
		result1 map[string]*cirruspb.ProductionGraphModelRepo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTritonConfigInterface) GetGraphConfigFromGraphModelRepo(arg1 map[string]*cirruspb.ProductionGraphModelRepo) (map[string]*graphconfigpb.GraphConfig, error) {
	fake.getGraphConfigFromGraphModelRepoMutex.Lock()
	ret, specificReturn := fake.getGraphConfigFromGraphModelRepoReturnsOnCall[len(fake.getGraphConfigFromGraphModelRepoArgsForCall)]
	fake.getGraphConfigFromGraphModelRepoArgsForCall = append(fake.getGraphConfigFromGraphModelRepoArgsForCall, struct {
		arg1 map[string]*cirruspb.ProductionGraphModelRepo
	}{arg1})
	stub := fake.GetGraphConfigFromGraphModelRepoStub
	fakeReturns := fake.getGraphConfigFromGraphModelRepoReturns
	fake.recordInvocation("GetGraphConfigFromGraphModelRepo", []interface{}{arg1})
	fake.getGraphConfigFromGraphModelRepoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTritonConfigInterface) GetGraphConfigFromGraphModelRepoCallCount() int {
	fake.getGraphConfigFromGraphModelRepoMutex.RLock()
	defer fake.getGraphConfigFromGraphModelRepoMutex.RUnlock()
	return len(fake.getGraphConfigFromGraphModelRepoArgsForCall)
}

func (fake *FakeTritonConfigInterface) GetGraphConfigFromGraphModelRepoCalls(stub func(map[string]*cirruspb.ProductionGraphModelRepo) (map[string]*graphconfigpb.GraphConfig, error)) {
	fake.getGraphConfigFromGraphModelRepoMutex.Lock()
	defer fake.getGraphConfigFromGraphModelRepoMutex.Unlock()
	fake.GetGraphConfigFromGraphModelRepoStub = stub
}

func (fake *FakeTritonConfigInterface) GetGraphConfigFromGraphModelRepoArgsForCall(i int) map[string]*cirruspb.ProductionGraphModelRepo {
	fake.getGraphConfigFromGraphModelRepoMutex.RLock()
	defer fake.getGraphConfigFromGraphModelRepoMutex.RUnlock()
	argsForCall := fake.getGraphConfigFromGraphModelRepoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTritonConfigInterface) GetGraphConfigFromGraphModelRepoReturns(result1 map[string]*graphconfigpb.GraphConfig, result2 error) {
	fake.getGraphConfigFromGraphModelRepoMutex.Lock()
	defer fake.getGraphConfigFromGraphModelRepoMutex.Unlock()
	fake.GetGraphConfigFromGraphModelRepoStub = nil
	fake.getGraphConfigFromGraphModelRepoReturns = struct {
		result1 map[string]*graphconfigpb.GraphConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTritonConfigInterface) GetGraphConfigFromGraphModelRepoReturnsOnCall(i int, result1 map[string]*graphconfigpb.GraphConfig, result2 error) {
	fake.getGraphConfigFromGraphModelRepoMutex.Lock()
	defer fake.getGraphConfigFromGraphModelRepoMutex.Unlock()
	fake.GetGraphConfigFromGraphModelRepoStub = nil
	if fake.getGraphConfigFromGraphModelRepoReturnsOnCall == nil {
		fake.getGraphConfigFromGraphModelRepoReturnsOnCall = make(map[int]struct {
			result1 map[string]*graphconfigpb.GraphConfig
			result2 error
		})
	}
	fake.getGraphConfigFromGraphModelRepoReturnsOnCall[i] = struct {
		result1 map[string]*graphconfigpb.GraphConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeTritonConfigInterface) GetModelsFromConfig(arg1 string) (map[string]*cirruspb.Model, map[string]*cirruspb.Ensemble, error) {
	fake.getModelsFromConfigMutex.Lock()
	ret, specificReturn := fake.getModelsFromConfigReturnsOnCall[len(fake.getModelsFromConfigArgsForCall)]
	fake.getModelsFromConfigArgsForCall = append(fake.getModelsFromConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetModelsFromConfigStub
	fakeReturns := fake.getModelsFromConfigReturns
	fake.recordInvocation("GetModelsFromConfig", []interface{}{arg1})
	fake.getModelsFromConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeTritonConfigInterface) GetModelsFromConfigCallCount() int {
	fake.getModelsFromConfigMutex.RLock()
	defer fake.getModelsFromConfigMutex.RUnlock()
	return len(fake.getModelsFromConfigArgsForCall)
}

func (fake *FakeTritonConfigInterface) GetModelsFromConfigCalls(stub func(string) (map[string]*cirruspb.Model, map[string]*cirruspb.Ensemble, error)) {
	fake.getModelsFromConfigMutex.Lock()
	defer fake.getModelsFromConfigMutex.Unlock()
	fake.GetModelsFromConfigStub = stub
}

func (fake *FakeTritonConfigInterface) GetModelsFromConfigArgsForCall(i int) string {
	fake.getModelsFromConfigMutex.RLock()
	defer fake.getModelsFromConfigMutex.RUnlock()
	argsForCall := fake.getModelsFromConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTritonConfigInterface) GetModelsFromConfigReturns(result1 map[string]*cirruspb.Model, result2 map[string]*cirruspb.Ensemble, result3 error) {
	fake.getModelsFromConfigMutex.Lock()
	defer fake.getModelsFromConfigMutex.Unlock()
	fake.GetModelsFromConfigStub = nil
	fake.getModelsFromConfigReturns = struct {
		result1 map[string]*cirruspb.Model
		result2 map[string]*cirruspb.Ensemble
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTritonConfigInterface) GetModelsFromConfigReturnsOnCall(i int, result1 map[string]*cirruspb.Model, result2 map[string]*cirruspb.Ensemble, result3 error) {
	fake.getModelsFromConfigMutex.Lock()
	defer fake.getModelsFromConfigMutex.Unlock()
	fake.GetModelsFromConfigStub = nil
	if fake.getModelsFromConfigReturnsOnCall == nil {
		fake.getModelsFromConfigReturnsOnCall = make(map[int]struct {
			result1 map[string]*cirruspb.Model
			result2 map[string]*cirruspb.Ensemble
			result3 error
		})
	}
	fake.getModelsFromConfigReturnsOnCall[i] = struct {
		result1 map[string]*cirruspb.Model
		result2 map[string]*cirruspb.Ensemble
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTritonConfigInterface) GetProductionGraphModelRepoFromConfig(arg1 string) (map[string]*cirruspb.ProductionGraphModelRepo, error) {
	fake.getProductionGraphModelRepoFromConfigMutex.Lock()
	ret, specificReturn := fake.getProductionGraphModelRepoFromConfigReturnsOnCall[len(fake.getProductionGraphModelRepoFromConfigArgsForCall)]
	fake.getProductionGraphModelRepoFromConfigArgsForCall = append(fake.getProductionGraphModelRepoFromConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetProductionGraphModelRepoFromConfigStub
	fakeReturns := fake.getProductionGraphModelRepoFromConfigReturns
	fake.recordInvocation("GetProductionGraphModelRepoFromConfig", []interface{}{arg1})
	fake.getProductionGraphModelRepoFromConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTritonConfigInterface) GetProductionGraphModelRepoFromConfigCallCount() int {
	fake.getProductionGraphModelRepoFromConfigMutex.RLock()
	defer fake.getProductionGraphModelRepoFromConfigMutex.RUnlock()
	return len(fake.getProductionGraphModelRepoFromConfigArgsForCall)
}

func (fake *FakeTritonConfigInterface) GetProductionGraphModelRepoFromConfigCalls(stub func(string) (map[string]*cirruspb.ProductionGraphModelRepo, error)) {
	fake.getProductionGraphModelRepoFromConfigMutex.Lock()
	defer fake.getProductionGraphModelRepoFromConfigMutex.Unlock()
	fake.GetProductionGraphModelRepoFromConfigStub = stub
}

func (fake *FakeTritonConfigInterface) GetProductionGraphModelRepoFromConfigArgsForCall(i int) string {
	fake.getProductionGraphModelRepoFromConfigMutex.RLock()
	defer fake.getProductionGraphModelRepoFromConfigMutex.RUnlock()
	argsForCall := fake.getProductionGraphModelRepoFromConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTritonConfigInterface) GetProductionGraphModelRepoFromConfigReturns(result1 map[string]*cirruspb.ProductionGraphModelRepo, result2 error) {
	fake.getProductionGraphModelRepoFromConfigMutex.Lock()
	defer fake.getProductionGraphModelRepoFromConfigMutex.Unlock()
	fake.GetProductionGraphModelRepoFromConfigStub = nil
	fake.getProductionGraphModelRepoFromConfigReturns = struct {
		result1 map[string]*cirruspb.ProductionGraphModelRepo
		result2 error
	}{result1, result2}
}

func (fake *FakeTritonConfigInterface) GetProductionGraphModelRepoFromConfigReturnsOnCall(i int, result1 map[string]*cirruspb.ProductionGraphModelRepo, result2 error) {
	fake.getProductionGraphModelRepoFromConfigMutex.Lock()
	defer fake.getProductionGraphModelRepoFromConfigMutex.Unlock()
	fake.GetProductionGraphModelRepoFromConfigStub = nil
	if fake.getProductionGraphModelRepoFromConfigReturnsOnCall == nil {
		fake.getProductionGraphModelRepoFromConfigReturnsOnCall = make(map[int]struct {
			result1 map[string]*cirruspb.ProductionGraphModelRepo
			result2 error
		})
	}
	fake.getProductionGraphModelRepoFromConfigReturnsOnCall[i] = struct {
		result1 map[string]*cirruspb.ProductionGraphModelRepo
		result2 error
	}{result1, result2}
}

func (fake *FakeTritonConfigInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getGraphConfigFromGraphModelRepoMutex.RLock()
	defer fake.getGraphConfigFromGraphModelRepoMutex.RUnlock()
	fake.getModelsFromConfigMutex.RLock()
	defer fake.getModelsFromConfigMutex.RUnlock()
	fake.getProductionGraphModelRepoFromConfigMutex.RLock()
	defer fake.getProductionGraphModelRepoFromConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTritonConfigInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ buildtriton.TritonConfigInterface = new(FakeTritonConfigInterface)
