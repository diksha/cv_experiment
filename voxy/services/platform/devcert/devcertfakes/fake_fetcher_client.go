// Code generated by counterfeiter. DO NOT EDIT.
package devcertfakes

import (
	"context"
	"sync"

	devcertpb "github.com/voxel-ai/voxel/protos/platform/devcert/v1"
	"github.com/voxel-ai/voxel/services/platform/devcert"
	"google.golang.org/grpc"
)

type FakeFetcherClient struct {
	GetDevCertStub        func(context.Context, *devcertpb.GetDevCertRequest, ...grpc.CallOption) (*devcertpb.GetDevCertResponse, error)
	getDevCertMutex       sync.RWMutex
	getDevCertArgsForCall []struct {
		arg1 context.Context
		arg2 *devcertpb.GetDevCertRequest
		arg3 []grpc.CallOption
	}
	getDevCertReturns struct {
		result1 *devcertpb.GetDevCertResponse
		result2 error
	}
	getDevCertReturnsOnCall map[int]struct {
		result1 *devcertpb.GetDevCertResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetcherClient) GetDevCert(arg1 context.Context, arg2 *devcertpb.GetDevCertRequest, arg3 ...grpc.CallOption) (*devcertpb.GetDevCertResponse, error) {
	fake.getDevCertMutex.Lock()
	ret, specificReturn := fake.getDevCertReturnsOnCall[len(fake.getDevCertArgsForCall)]
	fake.getDevCertArgsForCall = append(fake.getDevCertArgsForCall, struct {
		arg1 context.Context
		arg2 *devcertpb.GetDevCertRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetDevCertStub
	fakeReturns := fake.getDevCertReturns
	fake.recordInvocation("GetDevCert", []interface{}{arg1, arg2, arg3})
	fake.getDevCertMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFetcherClient) GetDevCertCallCount() int {
	fake.getDevCertMutex.RLock()
	defer fake.getDevCertMutex.RUnlock()
	return len(fake.getDevCertArgsForCall)
}

func (fake *FakeFetcherClient) GetDevCertCalls(stub func(context.Context, *devcertpb.GetDevCertRequest, ...grpc.CallOption) (*devcertpb.GetDevCertResponse, error)) {
	fake.getDevCertMutex.Lock()
	defer fake.getDevCertMutex.Unlock()
	fake.GetDevCertStub = stub
}

func (fake *FakeFetcherClient) GetDevCertArgsForCall(i int) (context.Context, *devcertpb.GetDevCertRequest, []grpc.CallOption) {
	fake.getDevCertMutex.RLock()
	defer fake.getDevCertMutex.RUnlock()
	argsForCall := fake.getDevCertArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFetcherClient) GetDevCertReturns(result1 *devcertpb.GetDevCertResponse, result2 error) {
	fake.getDevCertMutex.Lock()
	defer fake.getDevCertMutex.Unlock()
	fake.GetDevCertStub = nil
	fake.getDevCertReturns = struct {
		result1 *devcertpb.GetDevCertResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcherClient) GetDevCertReturnsOnCall(i int, result1 *devcertpb.GetDevCertResponse, result2 error) {
	fake.getDevCertMutex.Lock()
	defer fake.getDevCertMutex.Unlock()
	fake.GetDevCertStub = nil
	if fake.getDevCertReturnsOnCall == nil {
		fake.getDevCertReturnsOnCall = make(map[int]struct {
			result1 *devcertpb.GetDevCertResponse
			result2 error
		})
	}
	fake.getDevCertReturnsOnCall[i] = struct {
		result1 *devcertpb.GetDevCertResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcherClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDevCertMutex.RLock()
	defer fake.getDevCertMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFetcherClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ devcert.FetcherClient = new(FakeFetcherClient)
