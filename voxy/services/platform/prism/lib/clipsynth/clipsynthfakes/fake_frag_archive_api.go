// Code generated by counterfeiter. DO NOT EDIT.
package clipsynthfakes

import (
	"context"
	"sync"

	"github.com/voxel-ai/voxel/services/platform/prism/lib/clipsynth"
	"github.com/voxel-ai/voxel/services/platform/prism/lib/fragarchive"
	fragkey "github.com/voxel-ai/voxel/services/platform/prism/lib/fragarchive/key"
)

type FakeFragArchiveAPI struct {
	GetFragmentStub        func(context.Context, fragkey.FragmentKey) ([]byte, fragarchive.FragmentMetadata, error)
	getFragmentMutex       sync.RWMutex
	getFragmentArgsForCall []struct {
		arg1 context.Context
		arg2 fragkey.FragmentKey
	}
	getFragmentReturns struct {
		result1 []byte
		result2 fragarchive.FragmentMetadata
		result3 error
	}
	getFragmentReturnsOnCall map[int]struct {
		result1 []byte
		result2 fragarchive.FragmentMetadata
		result3 error
	}
	GetFragmentKeysInRangeStub        func(context.Context, fragarchive.RangeQuery) ([]fragkey.FragmentKey, error)
	getFragmentKeysInRangeMutex       sync.RWMutex
	getFragmentKeysInRangeArgsForCall []struct {
		arg1 context.Context
		arg2 fragarchive.RangeQuery
	}
	getFragmentKeysInRangeReturns struct {
		result1 []fragkey.FragmentKey
		result2 error
	}
	getFragmentKeysInRangeReturnsOnCall map[int]struct {
		result1 []fragkey.FragmentKey
		result2 error
	}
	GetMetadataStub        func(context.Context, fragkey.FragmentKey) (fragarchive.FragmentMetadata, error)
	getMetadataMutex       sync.RWMutex
	getMetadataArgsForCall []struct {
		arg1 context.Context
		arg2 fragkey.FragmentKey
	}
	getMetadataReturns struct {
		result1 fragarchive.FragmentMetadata
		result2 error
	}
	getMetadataReturnsOnCall map[int]struct {
		result1 fragarchive.FragmentMetadata
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFragArchiveAPI) GetFragment(arg1 context.Context, arg2 fragkey.FragmentKey) ([]byte, fragarchive.FragmentMetadata, error) {
	fake.getFragmentMutex.Lock()
	ret, specificReturn := fake.getFragmentReturnsOnCall[len(fake.getFragmentArgsForCall)]
	fake.getFragmentArgsForCall = append(fake.getFragmentArgsForCall, struct {
		arg1 context.Context
		arg2 fragkey.FragmentKey
	}{arg1, arg2})
	stub := fake.GetFragmentStub
	fakeReturns := fake.getFragmentReturns
	fake.recordInvocation("GetFragment", []interface{}{arg1, arg2})
	fake.getFragmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeFragArchiveAPI) GetFragmentCallCount() int {
	fake.getFragmentMutex.RLock()
	defer fake.getFragmentMutex.RUnlock()
	return len(fake.getFragmentArgsForCall)
}

func (fake *FakeFragArchiveAPI) GetFragmentCalls(stub func(context.Context, fragkey.FragmentKey) ([]byte, fragarchive.FragmentMetadata, error)) {
	fake.getFragmentMutex.Lock()
	defer fake.getFragmentMutex.Unlock()
	fake.GetFragmentStub = stub
}

func (fake *FakeFragArchiveAPI) GetFragmentArgsForCall(i int) (context.Context, fragkey.FragmentKey) {
	fake.getFragmentMutex.RLock()
	defer fake.getFragmentMutex.RUnlock()
	argsForCall := fake.getFragmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFragArchiveAPI) GetFragmentReturns(result1 []byte, result2 fragarchive.FragmentMetadata, result3 error) {
	fake.getFragmentMutex.Lock()
	defer fake.getFragmentMutex.Unlock()
	fake.GetFragmentStub = nil
	fake.getFragmentReturns = struct {
		result1 []byte
		result2 fragarchive.FragmentMetadata
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFragArchiveAPI) GetFragmentReturnsOnCall(i int, result1 []byte, result2 fragarchive.FragmentMetadata, result3 error) {
	fake.getFragmentMutex.Lock()
	defer fake.getFragmentMutex.Unlock()
	fake.GetFragmentStub = nil
	if fake.getFragmentReturnsOnCall == nil {
		fake.getFragmentReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 fragarchive.FragmentMetadata
			result3 error
		})
	}
	fake.getFragmentReturnsOnCall[i] = struct {
		result1 []byte
		result2 fragarchive.FragmentMetadata
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeFragArchiveAPI) GetFragmentKeysInRange(arg1 context.Context, arg2 fragarchive.RangeQuery) ([]fragkey.FragmentKey, error) {
	fake.getFragmentKeysInRangeMutex.Lock()
	ret, specificReturn := fake.getFragmentKeysInRangeReturnsOnCall[len(fake.getFragmentKeysInRangeArgsForCall)]
	fake.getFragmentKeysInRangeArgsForCall = append(fake.getFragmentKeysInRangeArgsForCall, struct {
		arg1 context.Context
		arg2 fragarchive.RangeQuery
	}{arg1, arg2})
	stub := fake.GetFragmentKeysInRangeStub
	fakeReturns := fake.getFragmentKeysInRangeReturns
	fake.recordInvocation("GetFragmentKeysInRange", []interface{}{arg1, arg2})
	fake.getFragmentKeysInRangeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFragArchiveAPI) GetFragmentKeysInRangeCallCount() int {
	fake.getFragmentKeysInRangeMutex.RLock()
	defer fake.getFragmentKeysInRangeMutex.RUnlock()
	return len(fake.getFragmentKeysInRangeArgsForCall)
}

func (fake *FakeFragArchiveAPI) GetFragmentKeysInRangeCalls(stub func(context.Context, fragarchive.RangeQuery) ([]fragkey.FragmentKey, error)) {
	fake.getFragmentKeysInRangeMutex.Lock()
	defer fake.getFragmentKeysInRangeMutex.Unlock()
	fake.GetFragmentKeysInRangeStub = stub
}

func (fake *FakeFragArchiveAPI) GetFragmentKeysInRangeArgsForCall(i int) (context.Context, fragarchive.RangeQuery) {
	fake.getFragmentKeysInRangeMutex.RLock()
	defer fake.getFragmentKeysInRangeMutex.RUnlock()
	argsForCall := fake.getFragmentKeysInRangeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFragArchiveAPI) GetFragmentKeysInRangeReturns(result1 []fragkey.FragmentKey, result2 error) {
	fake.getFragmentKeysInRangeMutex.Lock()
	defer fake.getFragmentKeysInRangeMutex.Unlock()
	fake.GetFragmentKeysInRangeStub = nil
	fake.getFragmentKeysInRangeReturns = struct {
		result1 []fragkey.FragmentKey
		result2 error
	}{result1, result2}
}

func (fake *FakeFragArchiveAPI) GetFragmentKeysInRangeReturnsOnCall(i int, result1 []fragkey.FragmentKey, result2 error) {
	fake.getFragmentKeysInRangeMutex.Lock()
	defer fake.getFragmentKeysInRangeMutex.Unlock()
	fake.GetFragmentKeysInRangeStub = nil
	if fake.getFragmentKeysInRangeReturnsOnCall == nil {
		fake.getFragmentKeysInRangeReturnsOnCall = make(map[int]struct {
			result1 []fragkey.FragmentKey
			result2 error
		})
	}
	fake.getFragmentKeysInRangeReturnsOnCall[i] = struct {
		result1 []fragkey.FragmentKey
		result2 error
	}{result1, result2}
}

func (fake *FakeFragArchiveAPI) GetMetadata(arg1 context.Context, arg2 fragkey.FragmentKey) (fragarchive.FragmentMetadata, error) {
	fake.getMetadataMutex.Lock()
	ret, specificReturn := fake.getMetadataReturnsOnCall[len(fake.getMetadataArgsForCall)]
	fake.getMetadataArgsForCall = append(fake.getMetadataArgsForCall, struct {
		arg1 context.Context
		arg2 fragkey.FragmentKey
	}{arg1, arg2})
	stub := fake.GetMetadataStub
	fakeReturns := fake.getMetadataReturns
	fake.recordInvocation("GetMetadata", []interface{}{arg1, arg2})
	fake.getMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFragArchiveAPI) GetMetadataCallCount() int {
	fake.getMetadataMutex.RLock()
	defer fake.getMetadataMutex.RUnlock()
	return len(fake.getMetadataArgsForCall)
}

func (fake *FakeFragArchiveAPI) GetMetadataCalls(stub func(context.Context, fragkey.FragmentKey) (fragarchive.FragmentMetadata, error)) {
	fake.getMetadataMutex.Lock()
	defer fake.getMetadataMutex.Unlock()
	fake.GetMetadataStub = stub
}

func (fake *FakeFragArchiveAPI) GetMetadataArgsForCall(i int) (context.Context, fragkey.FragmentKey) {
	fake.getMetadataMutex.RLock()
	defer fake.getMetadataMutex.RUnlock()
	argsForCall := fake.getMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFragArchiveAPI) GetMetadataReturns(result1 fragarchive.FragmentMetadata, result2 error) {
	fake.getMetadataMutex.Lock()
	defer fake.getMetadataMutex.Unlock()
	fake.GetMetadataStub = nil
	fake.getMetadataReturns = struct {
		result1 fragarchive.FragmentMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeFragArchiveAPI) GetMetadataReturnsOnCall(i int, result1 fragarchive.FragmentMetadata, result2 error) {
	fake.getMetadataMutex.Lock()
	defer fake.getMetadataMutex.Unlock()
	fake.GetMetadataStub = nil
	if fake.getMetadataReturnsOnCall == nil {
		fake.getMetadataReturnsOnCall = make(map[int]struct {
			result1 fragarchive.FragmentMetadata
			result2 error
		})
	}
	fake.getMetadataReturnsOnCall[i] = struct {
		result1 fragarchive.FragmentMetadata
		result2 error
	}{result1, result2}
}

func (fake *FakeFragArchiveAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFragmentMutex.RLock()
	defer fake.getFragmentMutex.RUnlock()
	fake.getFragmentKeysInRangeMutex.RLock()
	defer fake.getFragmentKeysInRangeMutex.RUnlock()
	fake.getMetadataMutex.RLock()
	defer fake.getMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFragArchiveAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clipsynth.FragArchiveAPI = new(FakeFragArchiveAPI)
