// Code generated by counterfeiter. DO NOT EDIT.
package filesystemfakes

import (
	"sync"

	"github.com/voxel-ai/voxel/lib/utils/go/filesystem"
)

type FakeDirectoryOperationsInterface struct {
	GetFilePathsStub        func(string, string) ([]string, error)
	getFilePathsMutex       sync.RWMutex
	getFilePathsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getFilePathsReturns struct {
		result1 []string
		result2 error
	}
	getFilePathsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	IsDirectoryStub        func(string) (bool, error)
	isDirectoryMutex       sync.RWMutex
	isDirectoryArgsForCall []struct {
		arg1 string
	}
	isDirectoryReturns struct {
		result1 bool
		result2 error
	}
	isDirectoryReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsFileStub        func(string) (bool, error)
	isFileMutex       sync.RWMutex
	isFileArgsForCall []struct {
		arg1 string
	}
	isFileReturns struct {
		result1 bool
		result2 error
	}
	isFileReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ReadFileStub        func(string) ([]byte, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		arg1 string
	}
	readFileReturns struct {
		result1 []byte
		result2 error
	}
	readFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDirectoryOperationsInterface) GetFilePaths(arg1 string, arg2 string) ([]string, error) {
	fake.getFilePathsMutex.Lock()
	ret, specificReturn := fake.getFilePathsReturnsOnCall[len(fake.getFilePathsArgsForCall)]
	fake.getFilePathsArgsForCall = append(fake.getFilePathsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetFilePathsStub
	fakeReturns := fake.getFilePathsReturns
	fake.recordInvocation("GetFilePaths", []interface{}{arg1, arg2})
	fake.getFilePathsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDirectoryOperationsInterface) GetFilePathsCallCount() int {
	fake.getFilePathsMutex.RLock()
	defer fake.getFilePathsMutex.RUnlock()
	return len(fake.getFilePathsArgsForCall)
}

func (fake *FakeDirectoryOperationsInterface) GetFilePathsCalls(stub func(string, string) ([]string, error)) {
	fake.getFilePathsMutex.Lock()
	defer fake.getFilePathsMutex.Unlock()
	fake.GetFilePathsStub = stub
}

func (fake *FakeDirectoryOperationsInterface) GetFilePathsArgsForCall(i int) (string, string) {
	fake.getFilePathsMutex.RLock()
	defer fake.getFilePathsMutex.RUnlock()
	argsForCall := fake.getFilePathsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDirectoryOperationsInterface) GetFilePathsReturns(result1 []string, result2 error) {
	fake.getFilePathsMutex.Lock()
	defer fake.getFilePathsMutex.Unlock()
	fake.GetFilePathsStub = nil
	fake.getFilePathsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDirectoryOperationsInterface) GetFilePathsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getFilePathsMutex.Lock()
	defer fake.getFilePathsMutex.Unlock()
	fake.GetFilePathsStub = nil
	if fake.getFilePathsReturnsOnCall == nil {
		fake.getFilePathsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getFilePathsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeDirectoryOperationsInterface) IsDirectory(arg1 string) (bool, error) {
	fake.isDirectoryMutex.Lock()
	ret, specificReturn := fake.isDirectoryReturnsOnCall[len(fake.isDirectoryArgsForCall)]
	fake.isDirectoryArgsForCall = append(fake.isDirectoryArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsDirectoryStub
	fakeReturns := fake.isDirectoryReturns
	fake.recordInvocation("IsDirectory", []interface{}{arg1})
	fake.isDirectoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDirectoryOperationsInterface) IsDirectoryCallCount() int {
	fake.isDirectoryMutex.RLock()
	defer fake.isDirectoryMutex.RUnlock()
	return len(fake.isDirectoryArgsForCall)
}

func (fake *FakeDirectoryOperationsInterface) IsDirectoryCalls(stub func(string) (bool, error)) {
	fake.isDirectoryMutex.Lock()
	defer fake.isDirectoryMutex.Unlock()
	fake.IsDirectoryStub = stub
}

func (fake *FakeDirectoryOperationsInterface) IsDirectoryArgsForCall(i int) string {
	fake.isDirectoryMutex.RLock()
	defer fake.isDirectoryMutex.RUnlock()
	argsForCall := fake.isDirectoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDirectoryOperationsInterface) IsDirectoryReturns(result1 bool, result2 error) {
	fake.isDirectoryMutex.Lock()
	defer fake.isDirectoryMutex.Unlock()
	fake.IsDirectoryStub = nil
	fake.isDirectoryReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDirectoryOperationsInterface) IsDirectoryReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isDirectoryMutex.Lock()
	defer fake.isDirectoryMutex.Unlock()
	fake.IsDirectoryStub = nil
	if fake.isDirectoryReturnsOnCall == nil {
		fake.isDirectoryReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isDirectoryReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDirectoryOperationsInterface) IsFile(arg1 string) (bool, error) {
	fake.isFileMutex.Lock()
	ret, specificReturn := fake.isFileReturnsOnCall[len(fake.isFileArgsForCall)]
	fake.isFileArgsForCall = append(fake.isFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsFileStub
	fakeReturns := fake.isFileReturns
	fake.recordInvocation("IsFile", []interface{}{arg1})
	fake.isFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDirectoryOperationsInterface) IsFileCallCount() int {
	fake.isFileMutex.RLock()
	defer fake.isFileMutex.RUnlock()
	return len(fake.isFileArgsForCall)
}

func (fake *FakeDirectoryOperationsInterface) IsFileCalls(stub func(string) (bool, error)) {
	fake.isFileMutex.Lock()
	defer fake.isFileMutex.Unlock()
	fake.IsFileStub = stub
}

func (fake *FakeDirectoryOperationsInterface) IsFileArgsForCall(i int) string {
	fake.isFileMutex.RLock()
	defer fake.isFileMutex.RUnlock()
	argsForCall := fake.isFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDirectoryOperationsInterface) IsFileReturns(result1 bool, result2 error) {
	fake.isFileMutex.Lock()
	defer fake.isFileMutex.Unlock()
	fake.IsFileStub = nil
	fake.isFileReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDirectoryOperationsInterface) IsFileReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isFileMutex.Lock()
	defer fake.isFileMutex.Unlock()
	fake.IsFileStub = nil
	if fake.isFileReturnsOnCall == nil {
		fake.isFileReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isFileReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDirectoryOperationsInterface) ReadFile(arg1 string) ([]byte, error) {
	fake.readFileMutex.Lock()
	ret, specificReturn := fake.readFileReturnsOnCall[len(fake.readFileArgsForCall)]
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadFileStub
	fakeReturns := fake.readFileReturns
	fake.recordInvocation("ReadFile", []interface{}{arg1})
	fake.readFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDirectoryOperationsInterface) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeDirectoryOperationsInterface) ReadFileCalls(stub func(string) ([]byte, error)) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = stub
}

func (fake *FakeDirectoryOperationsInterface) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	argsForCall := fake.readFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDirectoryOperationsInterface) ReadFileReturns(result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeDirectoryOperationsInterface) ReadFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	if fake.readFileReturnsOnCall == nil {
		fake.readFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeDirectoryOperationsInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFilePathsMutex.RLock()
	defer fake.getFilePathsMutex.RUnlock()
	fake.isDirectoryMutex.RLock()
	defer fake.isDirectoryMutex.RUnlock()
	fake.isFileMutex.RLock()
	defer fake.isFileMutex.RUnlock()
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDirectoryOperationsInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ filesystem.DirectoryOperationsInterface = new(FakeDirectoryOperationsInterface)
