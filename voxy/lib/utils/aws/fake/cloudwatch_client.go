// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/cloudwatch"
)

type CloudwatchClient struct {
	PutMetricDataStub        func(context.Context, *cloudwatch.PutMetricDataInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricDataOutput, error)
	putMetricDataMutex       sync.RWMutex
	putMetricDataArgsForCall []struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricDataInput
		arg3 []func(*cloudwatch.Options)
	}
	putMetricDataReturns struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	putMetricDataReturnsOnCall map[int]struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CloudwatchClient) PutMetricData(arg1 context.Context, arg2 *cloudwatch.PutMetricDataInput, arg3 ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricDataOutput, error) {
	fake.putMetricDataMutex.Lock()
	ret, specificReturn := fake.putMetricDataReturnsOnCall[len(fake.putMetricDataArgsForCall)]
	fake.putMetricDataArgsForCall = append(fake.putMetricDataArgsForCall, struct {
		arg1 context.Context
		arg2 *cloudwatch.PutMetricDataInput
		arg3 []func(*cloudwatch.Options)
	}{arg1, arg2, arg3})
	stub := fake.PutMetricDataStub
	fakeReturns := fake.putMetricDataReturns
	fake.recordInvocation("PutMetricData", []interface{}{arg1, arg2, arg3})
	fake.putMetricDataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CloudwatchClient) PutMetricDataCallCount() int {
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	return len(fake.putMetricDataArgsForCall)
}

func (fake *CloudwatchClient) PutMetricDataCalls(stub func(context.Context, *cloudwatch.PutMetricDataInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricDataOutput, error)) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = stub
}

func (fake *CloudwatchClient) PutMetricDataArgsForCall(i int) (context.Context, *cloudwatch.PutMetricDataInput, []func(*cloudwatch.Options)) {
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	argsForCall := fake.putMetricDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CloudwatchClient) PutMetricDataReturns(result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = nil
	fake.putMetricDataReturns = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *CloudwatchClient) PutMetricDataReturnsOnCall(i int, result1 *cloudwatch.PutMetricDataOutput, result2 error) {
	fake.putMetricDataMutex.Lock()
	defer fake.putMetricDataMutex.Unlock()
	fake.PutMetricDataStub = nil
	if fake.putMetricDataReturnsOnCall == nil {
		fake.putMetricDataReturnsOnCall = make(map[int]struct {
			result1 *cloudwatch.PutMetricDataOutput
			result2 error
		})
	}
	fake.putMetricDataReturnsOnCall[i] = struct {
		result1 *cloudwatch.PutMetricDataOutput
		result2 error
	}{result1, result2}
}

func (fake *CloudwatchClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.putMetricDataMutex.RLock()
	defer fake.putMetricDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CloudwatchClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
