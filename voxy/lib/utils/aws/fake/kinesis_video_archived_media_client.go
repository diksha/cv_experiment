// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/kinesisvideoarchivedmedia"
)

type KinesisVideoArchivedMediaClient struct {
	GetMediaForFragmentListStub        func(context.Context, *kinesisvideoarchivedmedia.GetMediaForFragmentListInput, ...func(*kinesisvideoarchivedmedia.Options)) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error)
	getMediaForFragmentListMutex       sync.RWMutex
	getMediaForFragmentListArgsForCall []struct {
		arg1 context.Context
		arg2 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput
		arg3 []func(*kinesisvideoarchivedmedia.Options)
	}
	getMediaForFragmentListReturns struct {
		result1 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
		result2 error
	}
	getMediaForFragmentListReturnsOnCall map[int]struct {
		result1 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
		result2 error
	}
	ListFragmentsStub        func(context.Context, *kinesisvideoarchivedmedia.ListFragmentsInput, ...func(*kinesisvideoarchivedmedia.Options)) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error)
	listFragmentsMutex       sync.RWMutex
	listFragmentsArgsForCall []struct {
		arg1 context.Context
		arg2 *kinesisvideoarchivedmedia.ListFragmentsInput
		arg3 []func(*kinesisvideoarchivedmedia.Options)
	}
	listFragmentsReturns struct {
		result1 *kinesisvideoarchivedmedia.ListFragmentsOutput
		result2 error
	}
	listFragmentsReturnsOnCall map[int]struct {
		result1 *kinesisvideoarchivedmedia.ListFragmentsOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KinesisVideoArchivedMediaClient) GetMediaForFragmentList(arg1 context.Context, arg2 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput, arg3 ...func(*kinesisvideoarchivedmedia.Options)) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error) {
	fake.getMediaForFragmentListMutex.Lock()
	ret, specificReturn := fake.getMediaForFragmentListReturnsOnCall[len(fake.getMediaForFragmentListArgsForCall)]
	fake.getMediaForFragmentListArgsForCall = append(fake.getMediaForFragmentListArgsForCall, struct {
		arg1 context.Context
		arg2 *kinesisvideoarchivedmedia.GetMediaForFragmentListInput
		arg3 []func(*kinesisvideoarchivedmedia.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetMediaForFragmentListStub
	fakeReturns := fake.getMediaForFragmentListReturns
	fake.recordInvocation("GetMediaForFragmentList", []interface{}{arg1, arg2, arg3})
	fake.getMediaForFragmentListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KinesisVideoArchivedMediaClient) GetMediaForFragmentListCallCount() int {
	fake.getMediaForFragmentListMutex.RLock()
	defer fake.getMediaForFragmentListMutex.RUnlock()
	return len(fake.getMediaForFragmentListArgsForCall)
}

func (fake *KinesisVideoArchivedMediaClient) GetMediaForFragmentListCalls(stub func(context.Context, *kinesisvideoarchivedmedia.GetMediaForFragmentListInput, ...func(*kinesisvideoarchivedmedia.Options)) (*kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, error)) {
	fake.getMediaForFragmentListMutex.Lock()
	defer fake.getMediaForFragmentListMutex.Unlock()
	fake.GetMediaForFragmentListStub = stub
}

func (fake *KinesisVideoArchivedMediaClient) GetMediaForFragmentListArgsForCall(i int) (context.Context, *kinesisvideoarchivedmedia.GetMediaForFragmentListInput, []func(*kinesisvideoarchivedmedia.Options)) {
	fake.getMediaForFragmentListMutex.RLock()
	defer fake.getMediaForFragmentListMutex.RUnlock()
	argsForCall := fake.getMediaForFragmentListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KinesisVideoArchivedMediaClient) GetMediaForFragmentListReturns(result1 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, result2 error) {
	fake.getMediaForFragmentListMutex.Lock()
	defer fake.getMediaForFragmentListMutex.Unlock()
	fake.GetMediaForFragmentListStub = nil
	fake.getMediaForFragmentListReturns = struct {
		result1 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
		result2 error
	}{result1, result2}
}

func (fake *KinesisVideoArchivedMediaClient) GetMediaForFragmentListReturnsOnCall(i int, result1 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput, result2 error) {
	fake.getMediaForFragmentListMutex.Lock()
	defer fake.getMediaForFragmentListMutex.Unlock()
	fake.GetMediaForFragmentListStub = nil
	if fake.getMediaForFragmentListReturnsOnCall == nil {
		fake.getMediaForFragmentListReturnsOnCall = make(map[int]struct {
			result1 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
			result2 error
		})
	}
	fake.getMediaForFragmentListReturnsOnCall[i] = struct {
		result1 *kinesisvideoarchivedmedia.GetMediaForFragmentListOutput
		result2 error
	}{result1, result2}
}

func (fake *KinesisVideoArchivedMediaClient) ListFragments(arg1 context.Context, arg2 *kinesisvideoarchivedmedia.ListFragmentsInput, arg3 ...func(*kinesisvideoarchivedmedia.Options)) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error) {
	fake.listFragmentsMutex.Lock()
	ret, specificReturn := fake.listFragmentsReturnsOnCall[len(fake.listFragmentsArgsForCall)]
	fake.listFragmentsArgsForCall = append(fake.listFragmentsArgsForCall, struct {
		arg1 context.Context
		arg2 *kinesisvideoarchivedmedia.ListFragmentsInput
		arg3 []func(*kinesisvideoarchivedmedia.Options)
	}{arg1, arg2, arg3})
	stub := fake.ListFragmentsStub
	fakeReturns := fake.listFragmentsReturns
	fake.recordInvocation("ListFragments", []interface{}{arg1, arg2, arg3})
	fake.listFragmentsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *KinesisVideoArchivedMediaClient) ListFragmentsCallCount() int {
	fake.listFragmentsMutex.RLock()
	defer fake.listFragmentsMutex.RUnlock()
	return len(fake.listFragmentsArgsForCall)
}

func (fake *KinesisVideoArchivedMediaClient) ListFragmentsCalls(stub func(context.Context, *kinesisvideoarchivedmedia.ListFragmentsInput, ...func(*kinesisvideoarchivedmedia.Options)) (*kinesisvideoarchivedmedia.ListFragmentsOutput, error)) {
	fake.listFragmentsMutex.Lock()
	defer fake.listFragmentsMutex.Unlock()
	fake.ListFragmentsStub = stub
}

func (fake *KinesisVideoArchivedMediaClient) ListFragmentsArgsForCall(i int) (context.Context, *kinesisvideoarchivedmedia.ListFragmentsInput, []func(*kinesisvideoarchivedmedia.Options)) {
	fake.listFragmentsMutex.RLock()
	defer fake.listFragmentsMutex.RUnlock()
	argsForCall := fake.listFragmentsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *KinesisVideoArchivedMediaClient) ListFragmentsReturns(result1 *kinesisvideoarchivedmedia.ListFragmentsOutput, result2 error) {
	fake.listFragmentsMutex.Lock()
	defer fake.listFragmentsMutex.Unlock()
	fake.ListFragmentsStub = nil
	fake.listFragmentsReturns = struct {
		result1 *kinesisvideoarchivedmedia.ListFragmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *KinesisVideoArchivedMediaClient) ListFragmentsReturnsOnCall(i int, result1 *kinesisvideoarchivedmedia.ListFragmentsOutput, result2 error) {
	fake.listFragmentsMutex.Lock()
	defer fake.listFragmentsMutex.Unlock()
	fake.ListFragmentsStub = nil
	if fake.listFragmentsReturnsOnCall == nil {
		fake.listFragmentsReturnsOnCall = make(map[int]struct {
			result1 *kinesisvideoarchivedmedia.ListFragmentsOutput
			result2 error
		})
	}
	fake.listFragmentsReturnsOnCall[i] = struct {
		result1 *kinesisvideoarchivedmedia.ListFragmentsOutput
		result2 error
	}{result1, result2}
}

func (fake *KinesisVideoArchivedMediaClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMediaForFragmentListMutex.RLock()
	defer fake.getMediaForFragmentListMutex.RUnlock()
	fake.listFragmentsMutex.RLock()
	defer fake.listFragmentsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KinesisVideoArchivedMediaClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
