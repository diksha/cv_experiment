// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/kinesisvideo"
)

type FakeKinesisVideoClient struct {
	GetDataEndpointStub        func(context.Context, *kinesisvideo.GetDataEndpointInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.GetDataEndpointOutput, error)
	getDataEndpointMutex       sync.RWMutex
	getDataEndpointArgsForCall []struct {
		arg1 context.Context
		arg2 *kinesisvideo.GetDataEndpointInput
		arg3 []func(*kinesisvideo.Options)
	}
	getDataEndpointReturns struct {
		result1 *kinesisvideo.GetDataEndpointOutput
		result2 error
	}
	getDataEndpointReturnsOnCall map[int]struct {
		result1 *kinesisvideo.GetDataEndpointOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKinesisVideoClient) GetDataEndpoint(arg1 context.Context, arg2 *kinesisvideo.GetDataEndpointInput, arg3 ...func(*kinesisvideo.Options)) (*kinesisvideo.GetDataEndpointOutput, error) {
	fake.getDataEndpointMutex.Lock()
	ret, specificReturn := fake.getDataEndpointReturnsOnCall[len(fake.getDataEndpointArgsForCall)]
	fake.getDataEndpointArgsForCall = append(fake.getDataEndpointArgsForCall, struct {
		arg1 context.Context
		arg2 *kinesisvideo.GetDataEndpointInput
		arg3 []func(*kinesisvideo.Options)
	}{arg1, arg2, arg3})
	stub := fake.GetDataEndpointStub
	fakeReturns := fake.getDataEndpointReturns
	fake.recordInvocation("GetDataEndpoint", []interface{}{arg1, arg2, arg3})
	fake.getDataEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKinesisVideoClient) GetDataEndpointCallCount() int {
	fake.getDataEndpointMutex.RLock()
	defer fake.getDataEndpointMutex.RUnlock()
	return len(fake.getDataEndpointArgsForCall)
}

func (fake *FakeKinesisVideoClient) GetDataEndpointCalls(stub func(context.Context, *kinesisvideo.GetDataEndpointInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.GetDataEndpointOutput, error)) {
	fake.getDataEndpointMutex.Lock()
	defer fake.getDataEndpointMutex.Unlock()
	fake.GetDataEndpointStub = stub
}

func (fake *FakeKinesisVideoClient) GetDataEndpointArgsForCall(i int) (context.Context, *kinesisvideo.GetDataEndpointInput, []func(*kinesisvideo.Options)) {
	fake.getDataEndpointMutex.RLock()
	defer fake.getDataEndpointMutex.RUnlock()
	argsForCall := fake.getDataEndpointArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKinesisVideoClient) GetDataEndpointReturns(result1 *kinesisvideo.GetDataEndpointOutput, result2 error) {
	fake.getDataEndpointMutex.Lock()
	defer fake.getDataEndpointMutex.Unlock()
	fake.GetDataEndpointStub = nil
	fake.getDataEndpointReturns = struct {
		result1 *kinesisvideo.GetDataEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeKinesisVideoClient) GetDataEndpointReturnsOnCall(i int, result1 *kinesisvideo.GetDataEndpointOutput, result2 error) {
	fake.getDataEndpointMutex.Lock()
	defer fake.getDataEndpointMutex.Unlock()
	fake.GetDataEndpointStub = nil
	if fake.getDataEndpointReturnsOnCall == nil {
		fake.getDataEndpointReturnsOnCall = make(map[int]struct {
			result1 *kinesisvideo.GetDataEndpointOutput
			result2 error
		})
	}
	fake.getDataEndpointReturnsOnCall[i] = struct {
		result1 *kinesisvideo.GetDataEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeKinesisVideoClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDataEndpointMutex.RLock()
	defer fake.getDataEndpointMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKinesisVideoClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
