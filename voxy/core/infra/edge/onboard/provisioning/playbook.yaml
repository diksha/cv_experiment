---
- name: Network
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Update repositories cache and Install Network Manager
      apt:
        name: network-manager
        state: present
        update_cache: true
    - name: Install FFMpeg
      apt:
        name: ffmpeg
        state: present
    - name: Install NMap
      apt:
        name: nmap
        state: present
    - name: Remove cloud config depends on MAAS such that box can be used without MAAS
      shell: |
        rm -rf /etc/cloud/cloud.cfg.d/90_dpkg*
        rm -rf /etc/cloud/cloud.cfg.d/50-curtin-networking.cfg
        rm -rf  /etc/netplan/*
    - name: Make Netplan use Network Manager
      copy:
        dest: /etc/netplan/00-installer-config.yaml
        content: |
          # This file describes the network interfaces available on your system
          # For more information, see netplan(5).
          network:
            version: 2
            renderer: NetworkManager
    - name: Netplan Generate and Apply to use Network Manager
      shell: |
        netplan generate
        netplan apply
    - name: Netplan Generate and Apply to use Network Manager
      shell: |
        netplan generate
        netplan apply
    - name: Set config for Network Manager spefically for it use dhclient
      # We want to use dhclient because NM's inbuilt dhcp resolver doesn't work well.
      copy:
        dest: /etc/NetworkManager/NetworkManager.conf
        content: |
          [main]
          plugins=ifupdown,keyfile
          dhcp=dhclient

          [ifupdown]
          managed=false

          [device]
          wifi.scan-rand-mac-address=no
    - name: Restart NetworkManager and enable on boot
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: NetworkManager
    - name: Restart Resolvd and enable on boot for DNS Management
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: systemd-resolved

- name: User Management
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Include variables
      include_vars: variables.yaml
    - name: Update root password
      ansible.builtin.user:
        name: root
        password: "{{ROOT_ENCRYPTED_PASS}}"

- name: Disable Nouveao for Nvidia
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Disable Nouveao for Nvidia in /usr/lib
      copy:
        dest: /usr/lib/modprobe.d/nvidia-installer-disable-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modeset=0
    - name: Disable Nouveao for Nvidia in /etc
      copy:
        dest: /etc/modprobe.d/nvidia-installer-disable-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modeset=0
    - name: Update Initramfs
      command: update-initramfs -u

- name: Prepare resources for MicroK8s and Greengrass
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Ensure group "microk8s" exists
      ansible.builtin.group:
        name: microk8s
        state: present
    - name: Ensure group "ggc_group" exists
      ansible.builtin.group:
        name: ggc_group
        state: present
    - name: Create custom temp directory
      file:
        path: /voxel/runtime
        state: directory
        owner: root
        group: ggc_group
        mode: 760
    - name: Use this temp directory in Java
      ansible.builtin.lineinfile:
        path: /etc/environment
        regexp: '^_JAVA_OPTIONS='
        line: _JAVA_OPTIONS=-Djava.io.tmpdir=/voxel/runtime
    - name: Install libpam-pwquality
      apt:
        name:
          - libpam-pwquality
        state: present
        update_cache: true


- name: Reboot
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Reboot the machine
      reboot:
          reboot_timeout: 300

- name: Install Greengrass
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Verify Java is using new temp directory
      ansible.builtin.command: java -XshowSettings
      ignore_errors: true
    - name: Mount
      command: mount -t tmpfs -o exec tmpfs /tmp
    - name: Update repositories cache and Install unzip
      apt:
        name: unzip
        state: present
        update_cache: true
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: /home/voxel/ansible/greengrass-nucleus-latest.zip
        dest: /tmp/greengrass-nucleus-latest.zip
        owner: root
        group: root
        mode: 0700
    - name: Create greengrass directory
      file:
        path: /var/lib/GreengrassCore
        state: directory
    - name: Unzip Greengrass
      ansible.builtin.unarchive:
        src: /tmp/greengrass-nucleus-latest.zip 
        dest: /var/lib/GreengrassCore
        # We download the file to remote machine as I am not sure where ansible copies it.
        remote_src: true

- name: Install Docker
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Update repositories cache and install required packages
      apt:
        name:
          - default-jre
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
        state: present
        update_cache: true
    - name: Add Docker apt signing key to a specific keyring file
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg
        state: present
    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable
        state: present
        filename: docker
    - name: Update repositories cache and Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: true    
    - name: Restart Docker and enable on boot
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: docker

- name: Setup Ubuntu Advantage and Landscape
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Include variables
      include_vars: variables.yaml
    - name: Apt Install Packages
      apt:
        name:
          - apparmor-utils
          - landscape-client
          - ubuntu-advantage-tools
        state: present
        update_cache: true
    - name: Attach Machine to Ubuntu Advantage
      command: ua attach "{{UA_TOKEN}}"
    - name: Enroll into Landscape
      command: landscape-config --computer-title {{ansible_hostname}} --account-name "{{LANDSCAPE_ACCOUNT_NAME}}" --registration-key "{{LANDSCAPE_REGISTRATION_KEY}}" --silent --script-users=ubuntu
    - name: Enable USG
      command: ua enable usg
    - name: Apt Install Packages - usg needs to be installed after ua attach
      apt:
        name:
          - usg
        state: present
        update_cache: true

- name: Set up Greengrass
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Include variables
      include_vars: variables.yaml
    - name: Install
      shell: |
        java -Droot="/greengrass/v2" -Dlog.store=FILE -Djava.io.tmpdir=/voxel/runtime \
        -jar /var/lib/GreengrassCore/lib/Greengrass.jar \
        --aws-region us-west-2 \
        --thing-name {{ansible_hostname}} \
        --thing-group-name all-edge-servers \
        --component-default-user ggc_user:ggc_group \
        --provision true \
        --setup-system-service true
      environment:
        AWS_ACCESS_KEY_ID: "{{AWS_ACCESS_KEY_ID}}"
        AWS_SECRET_ACCESS_KEY: "{{AWS_SECRET_ACCESS_KEY}}"
    - name: Add ggc_user to docker
      command: usermod -aG docker ggc_user
    - name: Add ggc_user to microk8s
      command: usermod -aG microk8s ggc_user

- name: Setup CIS (part 1)
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Create motd
      command: touch /etc/motd
    - name: Update log permissions
      shell: find /var/log -type f -exec chmod g-wx,o-rwx {} +
    - name: Remove vulnerable permissions
      shell: |
        rm -rf /etc/logrotate.d/alternatives
        rm -rf /etc/logrotate.d/btmp
        rm -rf /etc/logrotate.d/dpkg
        rm -rf /etc/logrotate.d/wtmp
    - name: Add AllowUsers to sshd
      lineinfile:
        line: AllowUsers ubuntu
        dest: /etc/ssh/sshd_config
    - name: Reload SSHD
      ansible.builtin.systemd:
        state: reloaded
        daemon_reload: true
        enabled: true
        name: sshd
    - name: Enfoce App Armor
      command: aa-enforce /etc/apparmor.d/*

- name: Setup CIS (part 2)
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Install usg
      apt:
        name: usg
        state: present
    - name: Mount
      command: mount -t tmpfs -o exec tmpfs /tmp
    - name: Generate USG CIS Fixes
      command: usg generate-fix cis_level2_server --output /tmp/fix.sh
    - name: Comment out Aide
      shell: sed -e '/^\/usr\/sbin\/aideinit -y -f/s/^/#/' -i /tmp/fix.sh
    - name: Run USG CIS Fixes
      shell: bash /tmp/fix.sh
    - name: Uninstall Aide
      apt:
        name: aide
        state: absent
        autoremove: true
    - name: Remove Aide cron jobs
      command: rm -rf /etc/cron.daily/aide

- name: Set up fsck repair on boot
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Update grub config
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX='
        line: GRUB_CMDLINE_LINUX="audit=1 audit_backlog_limit=8192 apparmor=1 security=apparmor fsck.mode=force fsck.repair=yes"
    - name: Apply new grub config
      command: update-grub

- name: Setup Cron Jobs to restart service and check connectivity.
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Check network connectivty job that runs at every hour at minute 0
      ansible.builtin.cron:
        name: "Check Network Connectivity or Restart Service"
        minute: "0"
        job: "/usr/bin/curl --max-time 5 https://landscape.canonical.com/ || /usr/sbin/service network-manager restart"

    - name: Check dns resolution job that runs at every hour at minute 1
      ansible.builtin.cron:
        name: "Check DNS Resoultion or Restart Service"
        minute: "1"
        job: "/usr/bin/curl --max-time 5 https://landscape.canonical.com/ || /usr/sbin/service systemd-resolved restart"

    - name: Check network connectivty daily at midnight and restart if it fails
      ansible.builtin.cron:
        name: "Check Network Connectivity or Restart Machine"
        minute: "10"
        hour: "0"
        job: "/usr/bin/curl --max-time 5 https://landscape.canonical.com/ || /sbin/reboot"
    - name: Clean up temp directories after reboots
      ansible.builtin.cron:
        name: "Remove files from /voxel/runtime && restart Greengrass service"
        special_time: reboot
        job: "/bin/rm -rf /voxel/runtime/* && /usr/sbin/service greengrass restart"

- name: Reboot
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Reboot the machine
      reboot:
          reboot_timeout: 300

- name: Setup Secure Boot
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Mount
      command: mount -t tmpfs -o exec tmpfs /tmp
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: /home/voxel/ansible/secure-boot.der
        dest: /tmp/secure-boot.der
        owner: root
        group: root
        mode: 0600
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: /home/voxel/ansible/secure-boot_pw_hash
        dest: /tmp/secure-boot_pw_hash
        owner: root
        group: root
        mode: 0600
    - name: Enroll Password in Secure Boot
      command: mokutil --password --hash-file /tmp/secure-boot_pw_hash
    - name: Enroll Key in Secure Boot
      command: mokutil --import /tmp/secure-boot.der --hash-file /tmp/secure-boot_pw_hash

- name: Install Nvidia Drivers
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Mount
      command: mount -t tmpfs -o exec tmpfs /tmp
    - name: Update repositories cache and Install Build Essential
      apt:
        name: build-essential
        state: present
        update_cache: true
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: /home/voxel/ansible/NVIDIA-Linux-x86_64-510.47.03.run
        dest: /tmp/NVIDIA-Linux-x86_64-510.47.03.run
        owner: root
        group: root
        mode: 0700
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: /home/voxel/ansible/secure-boot.key
        dest: /tmp/secure-boot.key
        owner: root
        group: root
        mode: 0600
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: /home/voxel/ansible/secure-boot.der
        dest: /tmp/secure-boot.der
        owner: root
        group: root
        mode: 0600
    - name: rmmod Nouveao
      command: rmmod nouveau
      ignore_errors: true
    - name: Install Nvidia Drivers
      shell: sh /tmp/NVIDIA-Linux-x86_64-510.47.03.run -s --module-signing-secret-key=/tmp/secure-boot.key --module-signing-public-key=/tmp/secure-boot.der
    - name: Update repositories cache and Install Cuda Toolkit
      apt:
        name: nvidia-cuda-toolkit
        state: present
        update_cache: true

- name: Install Nvidia Docker
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Add Nvidia docker apt signing key
      ansible.builtin.apt_key:
        url: https://nvidia.github.io/nvidia-docker/gpgkey
        state: present
    - name: Add Nvidia Docker Repository
      get_url:
        url: https://nvidia.github.io/nvidia-docker/ubuntu20.04/nvidia-docker.list
        dest: /etc/apt/sources.list.d/nvidia-docker.list
    - name: Update repositories cache and Install Nvidia Docker
      apt:
        name:
          - nvidia-container-runtime
        state: present
        update_cache: true    
    - name: Restart Docker and enable on boot
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        enabled: true
        name: docker

- name: Install Tailscale
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Include variables
      include_vars: variables.yaml
    - name: Add Tailscale's package signing key and repository
      shell: |
        curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | apt-key add -
        curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.list | tee /etc/apt/sources.list.d/tailscale.list
    - name: Install Tailscale
      apt:
        name: tailscale
        state: present
        update_cache: true


- name: Install MicroK8s
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Uninstall existing MicroK8s
      community.general.snap:
        name: microk8s
        state: absent
    - name: Install MicroK8s
      community.general.snap:
        name: microk8s
        classic: yes
        channel: 1.22/stable
    - name: Enable microk8s gpu - may take 5 to 10 minutes
      shell: microk8s enable gpu
    - name: Symlink microk8s and docker configs
      ansible.builtin.file:
        src: /root/.docker/config.json
        dest: /var/snap/microk8s/common/var/lib/kubelet/config.json
        owner: root
        group: root
        state: link
        force: yes

- name: Install Tmux
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Install tmux
      apt:
        name: tmux
        state: present

- name: Pre-pull large docker images / base layers
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Pull Nvidia image
      command: docker pull nvidia/cuda:11.6.0-devel-ubuntu20.04
    - name: Pull Nvidia image Micro K8s
      command: microk8s ctr images pull docker.io/nvidia/cuda:11.6.0-devel-ubuntu20.04


- name: Remove provisioning SSH key
  hosts: all
  tasks:
    - name: Remove provisioning public key from authorized_keys
      ansible.posix.authorized_key:
        user: ubuntu
        state: absent
        key: "{{ lookup('file', '/home/voxel/.ssh/edge-provisioning.pub') }}"

- name: Remove curtin files from apt config
  hosts: all
  become: true
  become_user: root
  tasks:
  - name: Find files
    find:
      paths: /etc/apt/apt.conf.d
      patterns: "^.*curtin.*"
      use_regex: yes
    register: found_files
  - name: Remove files
    file:
      path: '{{ item.path }}'
      state: absent
    with_items: '{{ found_files.files }}'

- name: Configure iptables
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: ipv4
      copy:
        dest: /etc/iptables/rules.v4
        content: |
          *filter
          # Ping
          -A INPUT -p icmp -m conntrack --ctstate NEW,RELATED,ESTABLISHED -j ACCEPT

          # DNS
          -A INPUT -p udp -m udp --sport 53 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -p udp -m udp --dport 53 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

          # SSH
          -A INPUT -p tcp -m tcp --sport 22 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT

          # HTTP
          -A INPUT -p tcp -m tcp --sport 80 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 80 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

          # HTTPS
          -A INPUT -p tcp -m tcp --sport 443 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 443 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

          # NTP
          -A INPUT -p udp -m udp --sport 123 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -p udp -m udp --dport 123 -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT

          # RTSP
          -A INPUT -p tcp -m tcp --sport 554 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -p tcp -m tcp --dport 554 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -p udp -m udp --sport 554 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
          -A INPUT -p udp -m udp --dport 554 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

          -A INPUT -i lo -j ACCEPT
          -A INPUT -i 127.0.0.1 -j ACCEPT

          -P FORWARD DROP
          -P INPUT -i eno1 DROP
          -P INPUT -i enp111s0 DROP

          COMMIT
    - name: ipv6
      copy:
        dest: /etc/iptables/rules.v6
        content: |
          *filter

          -A INPUT -i lo -j ACCEPT
          -A INPUT -i 127.0.0.1 -j ACCEPT

          -P FORWARD ACCEPT
          -P INPUT DROP

          COMMIT


- name: Start tailscale -- This is interactive right now
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Start Tailscale
      command: tailscale up --auth-key {{TAILSCALE_AUTH_KEY}}

- name: Shutdown
  hosts: all
  become: true
  become_user: root
  tasks:
    - name: Shut down the machine
      community.general.shutdown:
        delay: 10