from typing import List

from django.contrib import admin
from django.contrib.auth.models import User
from django.db import models
from django.db.models.query import QuerySet
from django_cte import CTEManager, CTEQuerySet

from core.portal.api.models.organization import Organization
from core.portal.compliance.models.production_line_filters import apply_filter
from core.portal.devices.models.camera import Camera
from core.portal.incidents.types import Filter
from core.portal.lib.models.base import Model
from core.portal.zones.models.zone import Zone


class ProductionLineQuerySet(CTEQuerySet):
    def apply_filters(
        self, filters: List[Filter], current_user: User
    ) -> QuerySet["ProductionLine"]:
        """Applies all provided filters to the queryset.
        Args:
            filters (List[FilterInputType]):
                A list of FilterInputType object defines the query filters
            current_user (User): Current user
        Returns:
            queryset (QuerySet["ProductionLine"]): A production line queryset
        """

        queryset: QuerySet[ProductionLine] = self
        for filter_data in filters:
            queryset = apply_filter(queryset, filter_data, current_user)
        return queryset


class DefaultManager(CTEManager):
    def get_queryset(self) -> ProductionLineQuerySet:
        """Get production line queryeset

        Returns:
            ProductionLineQuerySet: Production line queryeset
        """
        return ProductionLineQuerySet(self.model, using=self._db)


class ProductionLine(Model):
    """Model representing real-world production line."""

    class Meta:
        """Django meta class used to configure the model."""

        app_label = "compliance"
        db_table = "production_line"

    uuid = models.CharField(
        help_text=(
            "Unique identifier generated by perception systems used to"
            + " associate state/event data with a specific production"
            + " line instance."
        ),
        max_length=250,
        null=False,
        blank=False,
        unique=True,
    )
    name = models.CharField(
        help_text="User friendly name displayed throughout apps.",
        max_length=250,
        null=False,
        blank=False,
    )
    organization = models.ForeignKey(
        Organization,
        on_delete=models.CASCADE,
        blank=False,
        null=False,
        related_name="production_lines",
    )
    zone = models.ForeignKey(
        Zone,
        on_delete=models.CASCADE,
        blank=False,
        null=False,
        related_name="production_lines",
    )
    camera = models.ForeignKey(
        Camera,
        on_delete=models.CASCADE,
        blank=False,
        null=False,
        related_name="production_lines",
    )

    def __str__(self) -> str:
        """String representation of a model instance.

        Returns:
            str: string representation
        """
        return " > ".join(
            [
                self.organization.name,
                self.zone.name,
                self.camera.name,
                self.name,
            ]
        )

    # Custom model managers
    objects = DefaultManager.from_queryset(ProductionLineQuerySet)()


admin.site.register(ProductionLine)
